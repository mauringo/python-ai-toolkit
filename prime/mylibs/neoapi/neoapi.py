# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
python extension wrapper for neoapi
this shared library (wrapper) supports c++ neoapi api for python
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_neoapi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_neoapi')
    _neoapi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_neoapi', [dirname(__file__)])
        except ImportError:
            import _neoapi
            return _neoapi
        try:
            _mod = imp.load_module('_neoapi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _neoapi = swig_import_helper()
    del swig_import_helper
else:
    import _neoapi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



try:
  from types import ModuleType
  import ctypes
  import numpy as _neoapi_numpy
except:
  pass

def needs_numpy(func):
  def func_wrapper(*args, **kwargs):
    e = None
    try:
      if not isinstance(_neoapi_numpy, ModuleType):
        e = RuntimeError("_neoapi_numpy not a module - pls install it!")
    except NameError:
      e = NotImplementedError("please install numpy to use this method")
    if e: raise e
    return func(*args, **kwargs)
  return func_wrapper

class StopIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neoapi.new_StopIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_StopIterator
    __del__ = lambda self: None
StopIterator_swigregister = _neoapi.StopIterator_swigregister
StopIterator_swigregister(StopIterator)

class Iterator(_object):
    """
    Iterator functionality
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Iterator, name)
    __repr__ = _swig_repr

    def __init__(self, _cur: 'FeatureListIterator', _end: 'FeatureListIterator'):
        """
        Constructor
        Parameter:
            _cur A FeatureListIterator
            _end A FeatureListIterator
        """
        this = _neoapi.new_Iterator(_cur, _end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self) -> "Iterator":
        """
        Provides iterator functionality
        Return: Iterator
        """
        return _neoapi.Iterator___iter__(self)
    __swig_setmethods__["cur"] = _neoapi.Iterator_cur_set
    __swig_getmethods__["cur"] = _neoapi.Iterator_cur_get
    if _newclass:
        cur = _swig_property(_neoapi.Iterator_cur_get, _neoapi.Iterator_cur_set)
    __swig_setmethods__["end"] = _neoapi.Iterator_end_set
    __swig_getmethods__["end"] = _neoapi.Iterator_end_get
    if _newclass:
        end = _swig_property(_neoapi.Iterator_end_get, _neoapi.Iterator_end_set)

    def __next__(self) -> "Feature":
        """
        Iterator functionality
        Return: A Feature object
        """
        return _neoapi.Iterator___next__(self)
    __swig_destroy__ = _neoapi.delete_Iterator
    __del__ = lambda self: None
Iterator_swigregister = _neoapi.Iterator_swigregister
Iterator_swigregister(Iterator)

class CamInfoStopIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfoStopIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfoStopIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neoapi.new_CamInfoStopIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CamInfoStopIterator
    __del__ = lambda self: None
CamInfoStopIterator_swigregister = _neoapi.CamInfoStopIterator_swigregister
CamInfoStopIterator_swigregister(CamInfoStopIterator)

class CamInfoIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfoIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfoIterator, name)
    __repr__ = _swig_repr

    def __init__(self, _cur: 'CamInfoListIterator', _end: 'CamInfoListIterator'):
        this = _neoapi.new_CamInfoIterator(_cur, _end)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self) -> "CamInfoIterator":
        return _neoapi.CamInfoIterator___iter__(self)
    __swig_setmethods__["cur"] = _neoapi.CamInfoIterator_cur_set
    __swig_getmethods__["cur"] = _neoapi.CamInfoIterator_cur_get
    if _newclass:
        cur = _swig_property(_neoapi.CamInfoIterator_cur_get, _neoapi.CamInfoIterator_cur_set)
    __swig_setmethods__["end"] = _neoapi.CamInfoIterator_end_set
    __swig_getmethods__["end"] = _neoapi.CamInfoIterator_end_get
    if _newclass:
        end = _swig_property(_neoapi.CamInfoIterator_end_get, _neoapi.CamInfoIterator_end_set)

    def __next__(self) -> "CamInfo":
        return _neoapi.CamInfoIterator___next__(self)
    __swig_destroy__ = _neoapi.delete_CamInfoIterator
    __del__ = lambda self: None
CamInfoIterator_swigregister = _neoapi.CamInfoIterator_swigregister
CamInfoIterator_swigregister(CamInfoIterator)

class NeoException(Exception):
    """
    Base neoAPI Exception class
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An Exception object
        """
        this = _neoapi.new_NeoException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.NeoException_GetDescription(self)

    __str__ = lambda self : _neoapi.NeoException_GetDescription(self)

NeoException_swigregister = _neoapi.NeoException_swigregister
NeoException_swigregister(NeoException)

class NotConnectedException(NeoException):
    """
    No camera connected Exception
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotConnectedException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotConnectedException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_NotConnectedException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NotConnectedException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.NotConnectedException_GetDescription(self)
NotConnectedException_swigregister = _neoapi.NotConnectedException_swigregister
NotConnectedException_swigregister(NotConnectedException)

class NoAccessException(NeoException):
    """
    Camera not accessible Exception
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAccessException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoAccessException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_NoAccessException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NoAccessException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.NoAccessException_GetDescription(self)
NoAccessException_swigregister = _neoapi.NoAccessException_swigregister
NoAccessException_swigregister(NoAccessException)

class FeatureAccessException(NeoException):
    """
    Feature not accessible Exception
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureAccessException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureAccessException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_FeatureAccessException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FeatureAccessException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.FeatureAccessException_GetDescription(self)
FeatureAccessException_swigregister = _neoapi.FeatureAccessException_swigregister
FeatureAccessException_swigregister(FeatureAccessException)

class NoImageBufferException(NeoException):
    """
    Requesting an image while holing all available image resources
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoImageBufferException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoImageBufferException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_NoImageBufferException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NoImageBufferException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.NoImageBufferException_GetDescription(self)
NoImageBufferException_swigregister = _neoapi.NoImageBufferException_swigregister
NoImageBufferException_swigregister(NoImageBufferException)

class FileAccessException(NeoException):
    """
    File not accessible Exception
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAccessException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileAccessException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_FileAccessException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FileAccessException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.FileAccessException_GetDescription(self)
FileAccessException_swigregister = _neoapi.FileAccessException_swigregister
FileAccessException_swigregister(FileAccessException)

class InvalidArgumentException(NeoException):
    """
    Invalid Arguments Exception
    """
    __swig_setmethods__ = {}
    for _s in [NeoException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
    __swig_getmethods__ = {}
    for _s in [NeoException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
    __repr__ = _swig_repr

    def __init__(self, description: 'str'):
        """
        Constructor
        Parameter:
            description A string with the description
        """
        this = _neoapi.new_InvalidArgumentException(description)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_InvalidArgumentException
    __del__ = lambda self: None

    def GetDescription(self) -> "str":
        """
        Get the description
        Return: The description
        """
        return _neoapi.InvalidArgumentException_GetDescription(self)
InvalidArgumentException_swigregister = _neoapi.InvalidArgumentException_swigregister
InvalidArgumentException_swigregister(InvalidArgumentException)

class ColorMatrix(_object):
    """
    Color Transformation Matrix
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMatrix, name)
    __repr__ = _swig_repr
    Gain_Gain00 = _neoapi.ColorMatrix_Gain_Gain00
    Gain_Gain01 = _neoapi.ColorMatrix_Gain_Gain01
    Gain_Gain02 = _neoapi.ColorMatrix_Gain_Gain02
    Gain_Gain10 = _neoapi.ColorMatrix_Gain_Gain10
    Gain_Gain11 = _neoapi.ColorMatrix_Gain_Gain11
    Gain_Gain12 = _neoapi.ColorMatrix_Gain_Gain12
    Gain_Gain20 = _neoapi.ColorMatrix_Gain_Gain20
    Gain_Gain21 = _neoapi.ColorMatrix_Gain_Gain21
    Gain_Gain22 = _neoapi.ColorMatrix_Gain_Gain22

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A ColorMatrix object
        """
        this = _neoapi.new_ColorMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_ColorMatrix
    __del__ = lambda self: None

    def GetValue(self, gain_selector: 'int') -> "float":
        """
        Get a single component from the matrix
        Parameter:
            gain_selector  Selects a component.
        Return: The value of the selected component
        """
        return _neoapi.ColorMatrix_GetValue(self, gain_selector)

    def SetValue(self, gain_selector: 'int', value: 'float') -> "ColorMatrix":
        """
        Set a single component in the matrix
        Parameter:
            gain_selector  Selects a component.
            value  The new value for this component.
        Return: The ConverterSettings object
        """
        return _neoapi.ColorMatrix_SetValue(self, gain_selector, value)
ColorMatrix_swigregister = _neoapi.ColorMatrix_swigregister
ColorMatrix_swigregister(ColorMatrix)

class ConverterSettings(_object):
    """
    Image post processing settings
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConverterSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConverterSettings, name)
    __repr__ = _swig_repr
    Sharpening_Off = _neoapi.ConverterSettings_Sharpening_Off
    Sharpening_Global = _neoapi.ConverterSettings_Sharpening_Global
    Sharpening_Adaptive = _neoapi.ConverterSettings_Sharpening_Adaptive
    Sharpening_ActiveNoiseReduction = _neoapi.ConverterSettings_Sharpening_ActiveNoiseReduction
    Demosaicing_Bilinear3x3 = _neoapi.ConverterSettings_Demosaicing_Bilinear3x3
    Demosaicing_Baumer5x5 = _neoapi.ConverterSettings_Demosaicing_Baumer5x5
    Demosaicing_NearestNeighbor = _neoapi.ConverterSettings_Demosaicing_NearestNeighbor

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A ConverterSettings object
        """
        this = _neoapi.new_ConverterSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_ConverterSettings
    __del__ = lambda self: None

    def SetDebayerFormat(self, format: 'str') -> "ConverterSettings":
        """
        Set the target PixelFormat for a conversion
        Parameter:
            format The target PixelFormat name
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetDebayerFormat(self, format)

    def GetDebayerFormat(self) -> "str":
        """
        Get the target PixelFormat for a conversion
        Return: The target PixelFormat
        """
        return _neoapi.ConverterSettings_GetDebayerFormat(self)

    def SetSharpeningMode(self, mode: 'int') -> "ConverterSettings":
        """
        Set the target SharpeningMode for a conversion
        Parameter:
            mode  The SharpeningMode for the converted image.
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetSharpeningMode(self, mode)

    def GetSharpeningMode(self) -> "int":
        """
        Get the target SharpeningMode for a conversion
        Return: The target SharpeningMode
        """
        return _neoapi.ConverterSettings_GetSharpeningMode(self)

    def SetDemosaicingMethod(self, method: 'int') -> "ConverterSettings":
        """
        Set the target DemosaicingMethod for a conversion
        Parameter:
            method  The DemosaicingMethod for the converted image.
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetDemosaicingMethod(self, method)

    def GetDemosaicingMethod(self) -> "int":
        """
        Get the target DemosaicingMethod for a conversion
        Return: The target DemosaicingMethod
        """
        return _neoapi.ConverterSettings_GetDemosaicingMethod(self)

    def SetSharpeningFactor(self, factor: 'int') -> "ConverterSettings":
        """
        Set the target SharpeningFactor for a conversion
        Parameter:
            factor  The SharpeningFactor for the converted image.
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetSharpeningFactor(self, factor)

    def GetSharpeningFactor(self) -> "int":
        """
        Get the target SharpeningFactor for a conversion
        Return: The target SharpeningFactor
        """
        return _neoapi.ConverterSettings_GetSharpeningFactor(self)

    def SetSharpeningSensitivityThreshold(self, threshold: 'int') -> "ConverterSettings":
        """
        Set the target SharpeningSensitivityThreshold for a conversion
        Parameter:
            threshold  The SharpeningSensitivityThreshold for the converted image.
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetSharpeningSensitivityThreshold(self, threshold)

    def GetSharpeningSensitivityThreshold(self) -> "int":
        """
        Get the target SharpeningSensitivityThreshold for a conversion
        Return: The target SharpeningSensitivityThreshold
        """
        return _neoapi.ConverterSettings_GetSharpeningSensitivityThreshold(self)

    def SetColorTransformationMatrix(self, matrix: 'ColorMatrix') -> "ConverterSettings":
        """
        Set the target ColorTransformationMatrix for a conversion
        Parameter:
            matrix  The ColorMatrix for the converted image.
        Return: The ConverterSettings object
        """
        return _neoapi.ConverterSettings_SetColorTransformationMatrix(self, matrix)

    def GetColorTransformationMatrix(self) -> "ColorMatrix":
        """
        Get the target ColorTransformationMatrix for a conversion
        Return: The target ColorTransformationMatrix
        """
        return _neoapi.ConverterSettings_GetColorTransformationMatrix(self)
ConverterSettings_swigregister = _neoapi.ConverterSettings_swigregister
ConverterSettings_swigregister(ConverterSettings)

class NeoEvent(_object):
    """
    Provides access to events
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A NeoEvent object
        """
        this = _neoapi.new_NeoEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoEvent
    __del__ = lambda self: None

    def IsEmpty(self) -> "bool":
        """
        Check if the event is empty or filled with data
        Return: False if the event is filled with data, otherwise true
        """
        return _neoapi.NeoEvent_IsEmpty(self)

    def GetName(self) -> "str":
        """
        Get the name of the NeoEvent object
        Return: The name of the Feature object, empty if the event does not contain any data
        """
        return _neoapi.NeoEvent_GetName(self)

    def GetTimestamp(self) -> "int":
        """
        Get the timestamp of the NeoEvent object
        Return: The timestamp of the Feature object, zero if the event does not contain any data
        """
        return _neoapi.NeoEvent_GetTimestamp(self)

    def GetId(self) -> "int":
        """
        Get the ID of the NeoEvent object
        Return: The ID of the Feature object, zero if the event does not contain any data
        """
        return _neoapi.NeoEvent_GetId(self)

    def GetCameraId(self) -> "str":
        """
        Get the ID of the camera.
        Return: The ID of the camera, empty if the event does not contain any data.
        """
        return _neoapi.NeoEvent_GetCameraId(self)
NeoEvent_swigregister = _neoapi.NeoEvent_swigregister
NeoEvent_swigregister(NeoEvent)

class Feature(_object):
    """
    Provides access to camera features
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A Feature object
        """
        this = _neoapi.new_Feature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_Feature
    __del__ = lambda self: None

    def GetInterface(self) -> "str":
        """
        Get the GenICam data type of the Feature object
        Return: The interface type of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetInterface(self)

    def GetToolTip(self) -> "str":
        """
        Get a short description of the Feature object
        Return: The short description of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetToolTip(self)

    def GetDescription(self) -> "str":
        """
        Get the description of the Feature object
        Return: The description text of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDescription(self)

    def GetName(self) -> "str":
        """
        Get the name of the Feature object
        Return: The name of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetName(self)

    def GetDisplayName(self) -> "str":
        """
        Get the display name of the Feature object
        Return: The display name of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDisplayName(self)

    def GetVisibility(self) -> "str":
        """
        Get the recommended visibility (Beginner/Expert/Guru or Invisible) of the Feature object
        Return: The string representing the visibility of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetVisibility(self)

    def IsReadable(self) -> "bool":
        """
        Indicates that the Feature object is readable
        Return: True if the Feature object is readable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_IsReadable(self)

    def IsWritable(self) -> "bool":
        """
        Indicates if a Feature object is writeable
        Return: True if the Feature object is writable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_IsWritable(self)

    def GetRepresentation(self) -> "str":
        """
        Get a value, which recommends the representation type of the Feature object in a GUI
        Return: The recommended value for the representation of the Feature object in a GUI
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetRepresentation(self)

    def GetUnit(self) -> "str":
        """
        Get the physical unit of the Feature object, only available for the interface types 'IFloat' and 'IInteger'
        Return: The physical unit of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetUnit(self)

    def IsAvailable(self) -> "bool":
        """
        Indicates whether the Feature object is available
        Return: True if the Feature object is available to work with it, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_IsAvailable(self)

    def GetEnumValueList(self) -> "FeatureList":
        """
        Get a list of all possible values of the Feature object
        Return: The list of all possible values of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetEnumValueList(self)

    def GetInt(self) -> "int":
        """
        Get the current value of the Feature object as integer
        Return: The current Feature value
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetInt(self)

    def SetInt(self, value: 'int') -> "Feature":
        """
        Writes an integer value to the Feature object
        Parameter:
            value An integer value to be written
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_SetInt(self, value)

    def GetIntMin(self) -> "int":
        """
        Get the smallest allowed value of the Feature object as integer
        Return: The smallest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetIntMin(self)

    def GetIntMax(self) -> "int":
        """
        Get the largest allowed value of the Feature object as integer
        Return: The largest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetIntMax(self)

    def GetIntInc(self) -> "int":
        """
        Get the allowed step size for the value of the Feature object as integer
        Return: The allowed step size for the value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetIntInc(self)

    def GetDouble(self) -> "float":
        """
        Get the current value of the Feature object as floating-point number
        Return: The current value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDouble(self)

    def SetDouble(self, value: 'float') -> "Feature":
        """
        This function writes a floating-point value to the Feature object
        Parameter:
            value A double value to be written
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_SetDouble(self, value)

    def GetDoubleMin(self) -> "float":
        """
        Get the smallest allowed value of the Feature object as a floating-point number
        Return: The smallest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDoubleMin(self)

    def GetDoubleMax(self) -> "float":
        """
        Get the largest allowed value of the Feature object as a floating-point number
        Return: The largest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDoubleMax(self)

    def GetDoubleInc(self) -> "float":
        """
        Get the allowed step size for the value of the Feature object as a floating-point number
        Return: The allowed step size for the value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDoubleInc(self)

    def GetDoublePrecision(self) -> "int":
        """
        Get the precision for the corresponding double
        Return: The non-negative number for the precision the double should be displayed
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetDoublePrecision(self)

    def GetMaxStringLength(self) -> "int":
        """
        Get the maximum allowed string-length of the Feature object
        Return: The maximum length of the string
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetMaxStringLength(self)

    def GetString(self) -> "str":
        """
        Get the value of a Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetString(self)

    def SetString(self, value: 'str') -> "Feature":
        """
        Write the value of a Feature as a string
        Parameter:
            value A string value to be written
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_SetString(self, value)

    def Execute(self) -> "Feature":
        """
        Executes the command of the Feature object
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_Execute(self)

    def IsDone(self) -> "bool":
        """
        Indicates whether the command of the Feature object is still executing
        Return: False if the command of the Feature object is still been executed, True if it finished executing
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_IsDone(self)

    def GetBool(self) -> "bool":
        """
        Get the current value of the Feature object as boolean value
        Return: The current value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetBool(self)

    def SetBool(self, value: 'bool') -> "Feature":
        """
        Write a boolean value to the Feature object
        Parameter:
            value A boolean value to be written
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_SetBool(self, value)

    def IsSelector(self) -> "bool":
        """
        Indicates whether the Feature object is a selector
        Return: True if the Feature object is a selector, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_IsSelector(self)

    def GetSelectedFeatureList(self) -> "FeatureList":
        """
        Get a list of features that depend on a selector Feature
        Return: The list of all features that depend on this selector Feature
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetSelectedFeatureList(self)

    def GetRegisterLength(self) -> "int":
        """
        Get the length in bytes of the memory pointed to by the Feature object
        Return: The length in bytes of the memory pointed to by the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetRegisterLength(self)

    def GetRegisterAddress(self) -> "int":
        """
        Get the address of the memory pointed to by the Feature object
        Return: The address of the memory pointed to by the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetRegisterAddress(self)

    def GetRegister(self, buffer: 'bytes', length: 'int') -> "Feature":
        """
        Reads the memory pointed to by the Feature object and writes it into the provided buffer
        Parameter:
            buffer The destination buffer into which the read data is copied
            length The size of the destination buffer. The method `GetRegisterLength()` provides the necessary size
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_GetRegister(self, buffer, length)

    def SetRegister(self, buffer: 'bytes', length: 'int') -> "Feature":
        """
        Writes the memory pointed to by the Feature object
        Parameter:
            buffer The buffer for the data to be written
            length The size of the destination buffer, `GetRegisterLength()` provides the necessary size
        Return: The Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.Feature_SetRegister(self, buffer, length)

    def GetValue(self):
        """
        Get the value of the Feature
        Return: The value of the Feature
        """
        interface = self.GetInterface()
        if(interface == "IInteger"):
            return _neoapi.Feature_GetInt(self)
        elif(interface == "IBoolean"):
            return _neoapi.Feature_GetBool(self)
        elif(interface == "IFloat"):
            return _neoapi.Feature_GetDouble(self)
        else:
            return _neoapi.Feature_GetString(self)

    def SetValue(self, value):
        """
        Set the value of the Feature
        Parameter:
            value A value to be set
        Return: The Feature
        """
        if isinstance(value, bool):
            return _neoapi.Feature_SetBool(self, value)
        elif isinstance(value, int):
            return _neoapi.Feature_SetInt(self, value)
        elif isinstance(value, float):
            return _neoapi.Feature_SetDouble(self, value)
        else:
            return _neoapi.Feature_SetString(self, value)

    value = property(GetValue, SetValue)

Feature_swigregister = _neoapi.Feature_swigregister
Feature_swigregister(Feature)

class FeatureList(_object):
    """
    Provides list functionality for camera features
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A FeatureList object
        """
        this = _neoapi.new_FeatureList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FeatureList
    __del__ = lambda self: None

    def HasFeature(self, name: 'str') -> "bool":
        """
        Indicates if a feature is supported by this camera
        Parameter:
            name The name of the feature to check
        Return: True if the feature is supported by the camera
        """
        return _neoapi.FeatureList_HasFeature(self, name)

    def IsReadable(self, name: 'str') -> "bool":
        """
        Indicates if a feature is readable
        Parameter:
            name The name of the feature to check
        Return: True if the feature is readable
        """
        return _neoapi.FeatureList_IsReadable(self, name)

    def IsWritable(self, name: 'str') -> "bool":
        """
        Indicates if a feature is writable
        Parameter:
            name The name of the feature to check
        Return: True if the feature is writable
        """
        return _neoapi.FeatureList_IsWritable(self, name)

    def GetSize(self) -> "int":
        """
        Provides the number of features in this list
        Return: The number of features
        """
        return _neoapi.FeatureList_GetSize(self)

    def find(self, name: 'str') -> "FeatureListIterator":
        """
        Get an iterator by feature name
        Parameter:
            name The name of the Feature
        Return: iterator
        """
        return _neoapi.FeatureList_find(self, name)

    def __iter__(self) -> "Iterator":
        """
        Provides iterator functionality
        Return: Iterator
        """
        return _neoapi.FeatureList___iter__(self)

    def __getitem__(self, s: 'str') -> "Feature":
        """
        Provides iterator functionality
        Parameter:
            s The name of the Feature
        Return: The Feature
        """
        return _neoapi.FeatureList___getitem__(self, s)
FeatureList_swigregister = _neoapi.FeatureList_swigregister
FeatureList_swigregister(FeatureList)

class FeatureListIterator(_object):
    """
    Provides iterator functionality for the FeatureList
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureListIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureListIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A FeatureListIterator object
        """
        this = _neoapi.new_FeatureListIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FeatureListIterator
    __del__ = lambda self: None

    def __eq__(self, *args) -> "bool":
        """
        Provides the "==" operator
        Parameter:
            args object A FeatureListIterator
        Return: bool
        """
        return _neoapi.FeatureListIterator___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        """
        Provides the "=!" operator
        Parameter:
            args object A FeatureListIterator
        Return: bool
        """
        return _neoapi.FeatureListIterator___ne__(self, *args)

    def __ref__(self) -> "Feature":
        """
        Provides the reference
        Return: The Feature object
        """
        return _neoapi.FeatureListIterator___ref__(self)

    def GetName(self) -> "str":
        """
        Get the name of the current Feature
        Return: The Name of the Feature
        """
        return _neoapi.FeatureListIterator_GetName(self)
FeatureListIterator_swigregister = _neoapi.FeatureListIterator_swigregister
FeatureListIterator_swigregister(FeatureListIterator)

class BaseFeature(_object):
    """
    Base Feature class providing the interface to be used independent of Feature data-type
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseFeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __cam__ Pointer to the camera and __name__ Name of the Feature\n
            or\n
            __feature__ A Feature object
        """
        this = _neoapi.new_BaseFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_BaseFeature
    __del__ = lambda self: None

    def GetInterface(self) -> "str":
        """
        Get the GenICam data type of the Feature object
        Return: The interface type of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetInterface(self)

    def GetToolTip(self) -> "str":
        """
        Get a short description of the Feature object
        Return: The short description of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetToolTip(self)

    def GetDescription(self) -> "str":
        """
        Get the description of the Feature object
        Return: The description text of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetDescription(self)

    def GetName(self) -> "str":
        """
        Get the name of the Feature object
        Return: The name of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetName(self)

    def GetDisplayName(self) -> "str":
        """
        Get the display name of the Feature object
        Return: The display name of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetDisplayName(self)

    def GetVisibility(self) -> "str":
        """
        Get the recommended visibility (Beginner/Expert/Guru or Invisible) of the Feature object
        Return: The string representing the visibility of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_GetVisibility(self)

    def IsReadable(self) -> "bool":
        """
        Indicates that the Feature object is readable
        Return: True if the Feature object is readable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_IsReadable(self)

    def IsWritable(self) -> "bool":
        """
        Indicates if a Feature object is writable
        Return: True if the Feature object is writable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_IsWritable(self)

    def IsAvailable(self) -> "bool":
        """
        Indicates whether the Feature object is available
        Return: True if the Feature object is available to work with it, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BaseFeature_IsAvailable(self)
BaseFeature_swigregister = _neoapi.BaseFeature_swigregister
BaseFeature_swigregister(BaseFeature)

class DoubleFeature(BaseFeature):
    """
    Class providing the 'IFloat' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An DoubleFeature object
        """
        this = _neoapi.new_DoubleFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_DoubleFeature
    __del__ = lambda self: None

    def Get(self) -> "float":
        """
        Get the current value of the Feature object as floating-point number
        Return: The current value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_Get(self)

    def Set(self, value: 'float') -> "DoubleFeature":
        """
        This function writes a floating-point value to the Feature object
        Parameter:
            value A floating-point value to be written
        Return: The DoubleFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_Set(self, value)

    def GetMin(self) -> "float":
        """
        Get the smallest allowed value of the Feature object as a floating-point number
        Return: The smallest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetMin(self)

    def GetMax(self) -> "float":
        """
        Get the largest allowed value of the Feature object as a floating-point number
        Return: The largest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetMax(self)

    def GetInc(self) -> "float":
        """
        Get the allowed step size for the value of the Feature object as a floating-point number
        Return: The allowed step size for the value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetInc(self)

    def GetPrecision(self) -> "int":
        """
        Get the precision for the corresponding double
        Return: The non-negative number for the precision the double should be displayed
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetPrecision(self)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetString(self)

    def GetUnit(self) -> "str":
        """
        Get the physical unit of the Feature object
        Return: The physical unit of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetUnit(self)

    def GetRepresentation(self) -> "str":
        """
        Get a value, which recommends the representation type of the Feature object in a GUI
        Return: The recommended value for the representation of the Feature object in a GUI
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.DoubleFeature_GetRepresentation(self)

    value = property(Get, Set)

DoubleFeature_swigregister = _neoapi.DoubleFeature_swigregister
DoubleFeature_swigregister(DoubleFeature)

class IntegerFeature(BaseFeature):
    """
    Class providing the 'IInteger' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An IntegerFeature object
        """
        this = _neoapi.new_IntegerFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_IntegerFeature
    __del__ = lambda self: None

    def Get(self) -> "int":
        """
        Get the current value of the Feature object as integer
        Return: The current Feature value
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_Get(self)

    def Set(self, value: 'int') -> "IntegerFeature":
        """
        Writes an integer value to the Feature object
        Parameter:
            value An integer value to be written
        Return: The IntegerFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_Set(self, value)

    def GetMin(self) -> "int":
        """
        Get the smallest allowed value of the Feature object as integer
        Return: The smallest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetMin(self)

    def GetMax(self) -> "int":
        """
        Get the largest allowed value of the Feature object as integer
        Return: The largest allowed value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetMax(self)

    def GetInc(self) -> "int":
        """
        Get the allowed step size for the value of the Feature object as integer
        Return: The allowed step size for the value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetInc(self)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetString(self)

    def GetUnit(self) -> "str":
        """
        Get the physical unit of the Feature object
        Return: The physical unit of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetUnit(self)

    def GetRepresentation(self) -> "str":
        """
        Get a value, which recommends the representation type of the Feature object in a GUI
        Return: The recommended value for the representation of the Feature object in a GUI
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetRepresentation(self)

    def IsSelector(self) -> "bool":
        """
        Indicates whether the Feature object is a selector
        Return: True if the Feature object is a selector, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_IsSelector(self)

    def GetSelectedFeatureList(self) -> "FeatureList":
        """
        Get a list of features that depend on this selector Feature
        Return: The list of all features that depend on this selector Feature
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.IntegerFeature_GetSelectedFeatureList(self)

    value = property(Get, Set)

IntegerFeature_swigregister = _neoapi.IntegerFeature_swigregister
IntegerFeature_swigregister(IntegerFeature)

class StringFeature(BaseFeature):
    """
    Class providing the 'IString' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An StringFeature object
        """
        this = _neoapi.new_StringFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_StringFeature
    __del__ = lambda self: None

    def GetMaxStringLength(self) -> "int":
        """
        Get the maximum allowed string-length of the Feature object
        Return: The maximum length of the string
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.StringFeature_GetMaxStringLength(self)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.StringFeature_GetString(self)

    def SetString(self, value: 'str') -> "StringFeature":
        """
        Write the value of the Feature as a string
        Parameter:
            value A value to be written to the Feature
        Return: The StringFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.StringFeature_SetString(self, value)

    value = property(GetString, SetString)

StringFeature_swigregister = _neoapi.StringFeature_swigregister
StringFeature_swigregister(StringFeature)

class BoolFeature(BaseFeature):
    """
    Class providing the 'IBoolean' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An BoolFeature object
        """
        this = _neoapi.new_BoolFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_BoolFeature
    __del__ = lambda self: None

    def Get(self) -> "bool":
        """
        Get the current value of the Feature object as boolean value
        Return: The current value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BoolFeature_Get(self)

    def Set(self, value: 'bool') -> "BoolFeature":
        """
        Writes a boolean value to the Feature object
        Parameter:
            value A boolean value to be written
        Return: The BoolFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BoolFeature_Set(self, value)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.BoolFeature_GetString(self)

    value = property(Get, Set)

BoolFeature_swigregister = _neoapi.BoolFeature_swigregister
BoolFeature_swigregister(BoolFeature)

class CommandFeature(BaseFeature):
    """
    Class providing the 'ICommand' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommandFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An CommandFeature object
        """
        this = _neoapi.new_CommandFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CommandFeature
    __del__ = lambda self: None

    def Execute(self) -> "CommandFeature":
        """
        Executes the command of the Feature object
        Return: The CommandFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.CommandFeature_Execute(self)

    def IsDone(self) -> "bool":
        """
        Indicates whether the command of the Feature object is still executing
        Return: False if the command of the Feature object is still been executed, True if it finished executing
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.CommandFeature_IsDone(self)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.CommandFeature_GetString(self)
CommandFeature_swigregister = _neoapi.CommandFeature_swigregister
CommandFeature_swigregister(CommandFeature)

class EnumerationFeature(BaseFeature):
    """
    Base class providing the 'IEnumeration' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumerationFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnumerationFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An EnumerationFeature object
        """
        this = _neoapi.new_EnumerationFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_EnumerationFeature
    __del__ = lambda self: None

    def GetEnumValueList(self) -> "FeatureList":
        """
        Get a list of all possible values of the Feature object
        Return: The list of all possible values of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_GetEnumValueList(self)

    def GetInt(self) -> "int":
        """
        Get the current value of the Feature object as integer (enum ID)
        Return: The current Feature value
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_GetInt(self)

    def SetInt(self, value: 'int') -> "EnumerationFeature":
        """
        Writes an integer value to the Feature object (enum ID)
        Parameter:
            value An integer value to be written
        Return: The EnumerationFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_SetInt(self, value)

    def GetString(self) -> "str":
        """
        Get the value of the Feature as a string
        Return: The value of the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_GetString(self)

    def SetString(self, value: 'str') -> "EnumerationFeature":
        """
        Write the value of the Feature as a string
        Parameter:
            value A string value to be written
        Return: The EnumerationFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_SetString(self, value)

    def IsSelector(self) -> "bool":
        """
        Indicates whether the Feature object is a selector
        Return: True if the Feature object is a selector, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_IsSelector(self)

    def GetSelectedFeatureList(self) -> "FeatureList":
        """
        Get a list of features that depend on this selector Feature
        Return: The list of all features that depend on this selector Feature
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.EnumerationFeature_GetSelectedFeatureList(self)
EnumerationFeature_swigregister = _neoapi.EnumerationFeature_swigregister
EnumerationFeature_swigregister(EnumerationFeature)

class RegisterFeature(BaseFeature):
    """
    Base class providing the 'IRegister' interface
    """
    __swig_setmethods__ = {}
    for _s in [BaseFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisterFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegisterFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An RegisterFeature object
        """
        this = _neoapi.new_RegisterFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_RegisterFeature
    __del__ = lambda self: None

    def GetRegisterLength(self) -> "int":
        """
        Get the length in bytes of the memory pointed to by the Feature object
        Return: The length in bytes of the memory pointed to by the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.RegisterFeature_GetRegisterLength(self)

    def GetRegisterAddress(self) -> "int":
        """
        Get the address of the memory pointed to by the Feature object
        Return: The address of the memory pointed to by the Feature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.RegisterFeature_GetRegisterAddress(self)

    def GetRegister(self, buffer: 'bytes', length: 'int') -> "RegisterFeature":
        """
        Reads the memory pointed to by the Feature object and writes it into the provided buffer
        Parameter:
            buffer The destination buffer into which the read data is copied
            length The size of the destination buffer, GetRegisterLength provides the necessary size
        Return: The RegisterFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.RegisterFeature_GetRegister(self, buffer, length)

    def SetRegister(self, buffer: 'bytes', length: 'int') -> "RegisterFeature":
        """
        Writes the memory pointed to by the Feature object
        Parameter:
            buffer The buffer for the data to be written
            length The size of the destination buffer, GetRegisterLength provides the necessary size
        Return: The RegisterFeature object
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.RegisterFeature_SetRegister(self, buffer, length)
RegisterFeature_swigregister = _neoapi.RegisterFeature_swigregister
RegisterFeature_swigregister(RegisterFeature)

AcquisitionMode_Continuous = _neoapi.AcquisitionMode_Continuous
AcquisitionMode_MultiFrame = _neoapi.AcquisitionMode_MultiFrame
AcquisitionMode_SingleFrame = _neoapi.AcquisitionMode_SingleFrame
class CAcquisitionMode(EnumerationFeature):
    """
    Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAcquisitionMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAcquisitionMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CAcquisitionMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CAcquisitionMode
    __del__ = lambda self: None

    def Set(self, value: 'AcquisitionMode') -> "CAcquisitionMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CAcquisitionMode object with the value set.
        """
        return _neoapi.CAcquisitionMode_Set(self, value)

    def Get(self) -> "AcquisitionMode":
        """
        Get the current value.
        Return: The AcquisitionMode value.
        """
        return _neoapi.CAcquisitionMode_Get(self)

    value = property(Get, Set)

CAcquisitionMode_swigregister = _neoapi.CAcquisitionMode_swigregister
CAcquisitionMode_swigregister(CAcquisitionMode)

AcquisitionStatusSelector_AcquisitionActive = _neoapi.AcquisitionStatusSelector_AcquisitionActive
AcquisitionStatusSelector_AcquisitionTransfer = _neoapi.AcquisitionStatusSelector_AcquisitionTransfer
AcquisitionStatusSelector_AcquisitionTriggerWait = _neoapi.AcquisitionStatusSelector_AcquisitionTriggerWait
AcquisitionStatusSelector_ExposureActive = _neoapi.AcquisitionStatusSelector_ExposureActive
AcquisitionStatusSelector_FrameActive = _neoapi.AcquisitionStatusSelector_FrameActive
AcquisitionStatusSelector_FrameTriggerWait = _neoapi.AcquisitionStatusSelector_FrameTriggerWait
class CAcquisitionStatusSelector(EnumerationFeature):
    """
    Selects the internal acquisition signal to read using AcquisitionStatus.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAcquisitionStatusSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAcquisitionStatusSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CAcquisitionStatusSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CAcquisitionStatusSelector
    __del__ = lambda self: None

    def Set(self, value: 'AcquisitionStatusSelector') -> "CAcquisitionStatusSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CAcquisitionStatusSelector object with the value set.
        """
        return _neoapi.CAcquisitionStatusSelector_Set(self, value)

    def Get(self) -> "AcquisitionStatusSelector":
        """
        Get the current value.
        Return: The AcquisitionStatusSelector value.
        """
        return _neoapi.CAcquisitionStatusSelector_Get(self)

    value = property(Get, Set)

CAcquisitionStatusSelector_swigregister = _neoapi.CAcquisitionStatusSelector_swigregister
CAcquisitionStatusSelector_swigregister(CAcquisitionStatusSelector)

ApertureStatus_Busy = _neoapi.ApertureStatus_Busy
ApertureStatus_Error = _neoapi.ApertureStatus_Error
ApertureStatus_NotConnected = _neoapi.ApertureStatus_NotConnected
ApertureStatus_NotInitialized = _neoapi.ApertureStatus_NotInitialized
ApertureStatus_NotSupported = _neoapi.ApertureStatus_NotSupported
ApertureStatus_Ready = _neoapi.ApertureStatus_Ready
class CApertureStatus(EnumerationFeature):
    """
    Reads the status of the aperture.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CApertureStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CApertureStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CApertureStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CApertureStatus
    __del__ = lambda self: None

    def Set(self, value: 'ApertureStatus') -> "CApertureStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CApertureStatus object with the value set.
        """
        return _neoapi.CApertureStatus_Set(self, value)

    def Get(self) -> "ApertureStatus":
        """
        Get the current value.
        Return: The ApertureStatus value.
        """
        return _neoapi.CApertureStatus_Get(self)

    value = property(Get, Set)

CApertureStatus_swigregister = _neoapi.CApertureStatus_swigregister
CApertureStatus_swigregister(CApertureStatus)

AutoFeatureRegionMode_Off = _neoapi.AutoFeatureRegionMode_Off
AutoFeatureRegionMode_On = _neoapi.AutoFeatureRegionMode_On
class CAutoFeatureRegionMode(EnumerationFeature):
    """
    Controls the mode of the selected Auto Feature Region.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAutoFeatureRegionMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAutoFeatureRegionMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CAutoFeatureRegionMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CAutoFeatureRegionMode
    __del__ = lambda self: None

    def Set(self, value: 'AutoFeatureRegionMode') -> "CAutoFeatureRegionMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CAutoFeatureRegionMode object with the value set.
        """
        return _neoapi.CAutoFeatureRegionMode_Set(self, value)

    def Get(self) -> "AutoFeatureRegionMode":
        """
        Get the current value.
        Return: The AutoFeatureRegionMode value.
        """
        return _neoapi.CAutoFeatureRegionMode_Get(self)

    value = property(Get, Set)

CAutoFeatureRegionMode_swigregister = _neoapi.CAutoFeatureRegionMode_swigregister
CAutoFeatureRegionMode_swigregister(CAutoFeatureRegionMode)

AutoFeatureRegionReference_Region0 = _neoapi.AutoFeatureRegionReference_Region0
class CAutoFeatureRegionReference(EnumerationFeature):
    """
    Selects the Reference Region of interest. The Auto Feature Region is part of this region and all Auto Feature Region features refers to this Reference Region.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAutoFeatureRegionReference, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAutoFeatureRegionReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CAutoFeatureRegionReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CAutoFeatureRegionReference
    __del__ = lambda self: None

    def Set(self, value: 'AutoFeatureRegionReference') -> "CAutoFeatureRegionReference":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CAutoFeatureRegionReference object with the value set.
        """
        return _neoapi.CAutoFeatureRegionReference_Set(self, value)

    def Get(self) -> "AutoFeatureRegionReference":
        """
        Get the current value.
        Return: The AutoFeatureRegionReference value.
        """
        return _neoapi.CAutoFeatureRegionReference_Get(self)

    value = property(Get, Set)

CAutoFeatureRegionReference_swigregister = _neoapi.CAutoFeatureRegionReference_swigregister
CAutoFeatureRegionReference_swigregister(CAutoFeatureRegionReference)

AutoFeatureRegionSelector_BalanceWhiteAuto = _neoapi.AutoFeatureRegionSelector_BalanceWhiteAuto
AutoFeatureRegionSelector_BrightnessAuto = _neoapi.AutoFeatureRegionSelector_BrightnessAuto
class CAutoFeatureRegionSelector(EnumerationFeature):
    """
    Selects the region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAutoFeatureRegionSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAutoFeatureRegionSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CAutoFeatureRegionSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CAutoFeatureRegionSelector
    __del__ = lambda self: None

    def Set(self, value: 'AutoFeatureRegionSelector') -> "CAutoFeatureRegionSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CAutoFeatureRegionSelector object with the value set.
        """
        return _neoapi.CAutoFeatureRegionSelector_Set(self, value)

    def Get(self) -> "AutoFeatureRegionSelector":
        """
        Get the current value.
        Return: The AutoFeatureRegionSelector value.
        """
        return _neoapi.CAutoFeatureRegionSelector_Get(self)

    value = property(Get, Set)

CAutoFeatureRegionSelector_swigregister = _neoapi.CAutoFeatureRegionSelector_swigregister
CAutoFeatureRegionSelector_swigregister(CAutoFeatureRegionSelector)

BOPFShift_Bits0To7 = _neoapi.BOPFShift_Bits0To7
BOPFShift_Bits1To8 = _neoapi.BOPFShift_Bits1To8
BOPFShift_Bits2To9 = _neoapi.BOPFShift_Bits2To9
BOPFShift_Bits3To10 = _neoapi.BOPFShift_Bits3To10
BOPFShift_Bits4To11 = _neoapi.BOPFShift_Bits4To11
class CBOPFShift(EnumerationFeature):
    """
    Selects the shift factor for 8bit pixel format calculated from 12 bit mode.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBOPFShift, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBOPFShift, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBOPFShift(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBOPFShift
    __del__ = lambda self: None

    def Set(self, value: 'BOPFShift') -> "CBOPFShift":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBOPFShift object with the value set.
        """
        return _neoapi.CBOPFShift_Set(self, value)

    def Get(self) -> "BOPFShift":
        """
        Get the current value.
        Return: The BOPFShift value.
        """
        return _neoapi.CBOPFShift_Get(self)

    value = property(Get, Set)

CBOPFShift_swigregister = _neoapi.CBOPFShift_swigregister
CBOPFShift_swigregister(CBOPFShift)

BalanceWhiteAuto_Continuous = _neoapi.BalanceWhiteAuto_Continuous
BalanceWhiteAuto_Off = _neoapi.BalanceWhiteAuto_Off
BalanceWhiteAuto_Once = _neoapi.BalanceWhiteAuto_Once
class CBalanceWhiteAuto(EnumerationFeature):
    """
    Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBalanceWhiteAuto, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBalanceWhiteAuto, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBalanceWhiteAuto(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBalanceWhiteAuto
    __del__ = lambda self: None

    def Set(self, value: 'BalanceWhiteAuto') -> "CBalanceWhiteAuto":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBalanceWhiteAuto object with the value set.
        """
        return _neoapi.CBalanceWhiteAuto_Set(self, value)

    def Get(self) -> "BalanceWhiteAuto":
        """
        Get the current value.
        Return: The BalanceWhiteAuto value.
        """
        return _neoapi.CBalanceWhiteAuto_Get(self)

    value = property(Get, Set)

CBalanceWhiteAuto_swigregister = _neoapi.CBalanceWhiteAuto_swigregister
CBalanceWhiteAuto_swigregister(CBalanceWhiteAuto)

BalanceWhiteAutoStatus_ColorGainsTooHigh = _neoapi.BalanceWhiteAutoStatus_ColorGainsTooHigh
BalanceWhiteAutoStatus_Initial = _neoapi.BalanceWhiteAutoStatus_Initial
BalanceWhiteAutoStatus_Start = _neoapi.BalanceWhiteAutoStatus_Start
BalanceWhiteAutoStatus_Success = _neoapi.BalanceWhiteAutoStatus_Success
BalanceWhiteAutoStatus_Underrun = _neoapi.BalanceWhiteAutoStatus_Underrun
class CBalanceWhiteAutoStatus(EnumerationFeature):
    """
    Returns the status of BalanceWhiteAuto.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBalanceWhiteAutoStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBalanceWhiteAutoStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBalanceWhiteAutoStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBalanceWhiteAutoStatus
    __del__ = lambda self: None

    def Set(self, value: 'BalanceWhiteAutoStatus') -> "CBalanceWhiteAutoStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBalanceWhiteAutoStatus object with the value set.
        """
        return _neoapi.CBalanceWhiteAutoStatus_Set(self, value)

    def Get(self) -> "BalanceWhiteAutoStatus":
        """
        Get the current value.
        Return: The BalanceWhiteAutoStatus value.
        """
        return _neoapi.CBalanceWhiteAutoStatus_Get(self)

    value = property(Get, Set)

CBalanceWhiteAutoStatus_swigregister = _neoapi.CBalanceWhiteAutoStatus_swigregister
CBalanceWhiteAutoStatus_swigregister(CBalanceWhiteAutoStatus)

Baudrate_Baud115200 = _neoapi.Baudrate_Baud115200
Baudrate_Baud19200 = _neoapi.Baudrate_Baud19200
Baudrate_Baud230400 = _neoapi.Baudrate_Baud230400
Baudrate_Baud38400 = _neoapi.Baudrate_Baud38400
Baudrate_Baud460800 = _neoapi.Baudrate_Baud460800
Baudrate_Baud57600 = _neoapi.Baudrate_Baud57600
Baudrate_Baud9600 = _neoapi.Baudrate_Baud9600
Baudrate_RS232Off = _neoapi.Baudrate_RS232Off
class CBaudrate(EnumerationFeature):
    """
    Sets the baud rate of the RS232 interface.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBaudrate, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBaudrate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBaudrate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBaudrate
    __del__ = lambda self: None

    def Set(self, value: 'Baudrate') -> "CBaudrate":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBaudrate object with the value set.
        """
        return _neoapi.CBaudrate_Set(self, value)

    def Get(self) -> "Baudrate":
        """
        Get the current value.
        Return: The Baudrate value.
        """
        return _neoapi.CBaudrate_Get(self)

    value = property(Get, Set)

CBaudrate_swigregister = _neoapi.CBaudrate_swigregister
CBaudrate_swigregister(CBaudrate)

BinningHorizontalMode_Average = _neoapi.BinningHorizontalMode_Average
BinningHorizontalMode_Sum = _neoapi.BinningHorizontalMode_Sum
class CBinningHorizontalMode(EnumerationFeature):
    """
    Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBinningHorizontalMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBinningHorizontalMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBinningHorizontalMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBinningHorizontalMode
    __del__ = lambda self: None

    def Set(self, value: 'BinningHorizontalMode') -> "CBinningHorizontalMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBinningHorizontalMode object with the value set.
        """
        return _neoapi.CBinningHorizontalMode_Set(self, value)

    def Get(self) -> "BinningHorizontalMode":
        """
        Get the current value.
        Return: The BinningHorizontalMode value.
        """
        return _neoapi.CBinningHorizontalMode_Get(self)

    value = property(Get, Set)

CBinningHorizontalMode_swigregister = _neoapi.CBinningHorizontalMode_swigregister
CBinningHorizontalMode_swigregister(CBinningHorizontalMode)

BinningSelector_Region0 = _neoapi.BinningSelector_Region0
BinningSelector_Region1 = _neoapi.BinningSelector_Region1
BinningSelector_Region2 = _neoapi.BinningSelector_Region2
BinningSelector_Sensor = _neoapi.BinningSelector_Sensor
class CBinningSelector(EnumerationFeature):
    """
    Selects which binning engine is controlled by the BinningHorizontal and BinningVertical features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBinningSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBinningSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBinningSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBinningSelector
    __del__ = lambda self: None

    def Set(self, value: 'BinningSelector') -> "CBinningSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBinningSelector object with the value set.
        """
        return _neoapi.CBinningSelector_Set(self, value)

    def Get(self) -> "BinningSelector":
        """
        Get the current value.
        Return: The BinningSelector value.
        """
        return _neoapi.CBinningSelector_Get(self)

    value = property(Get, Set)

CBinningSelector_swigregister = _neoapi.CBinningSelector_swigregister
CBinningSelector_swigregister(CBinningSelector)

BinningVerticalMode_Average = _neoapi.BinningVerticalMode_Average
BinningVerticalMode_Sum = _neoapi.BinningVerticalMode_Sum
class CBinningVerticalMode(EnumerationFeature):
    """
    Sets the mode to use to combine vertical photo-sensitive cells together when BinningVertical is used.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBinningVerticalMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBinningVerticalMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBinningVerticalMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBinningVerticalMode
    __del__ = lambda self: None

    def Set(self, value: 'BinningVerticalMode') -> "CBinningVerticalMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBinningVerticalMode object with the value set.
        """
        return _neoapi.CBinningVerticalMode_Set(self, value)

    def Get(self) -> "BinningVerticalMode":
        """
        Get the current value.
        Return: The BinningVerticalMode value.
        """
        return _neoapi.CBinningVerticalMode_Get(self)

    value = property(Get, Set)

CBinningVerticalMode_swigregister = _neoapi.CBinningVerticalMode_swigregister
CBinningVerticalMode_swigregister(CBinningVerticalMode)

BlackLevelSelector_All = _neoapi.BlackLevelSelector_All
BlackLevelSelector_Blue = _neoapi.BlackLevelSelector_Blue
BlackLevelSelector_Green = _neoapi.BlackLevelSelector_Green
BlackLevelSelector_Red = _neoapi.BlackLevelSelector_Red
BlackLevelSelector_Tap1 = _neoapi.BlackLevelSelector_Tap1
BlackLevelSelector_Tap2 = _neoapi.BlackLevelSelector_Tap2
BlackLevelSelector_U = _neoapi.BlackLevelSelector_U
BlackLevelSelector_V = _neoapi.BlackLevelSelector_V
BlackLevelSelector_Y = _neoapi.BlackLevelSelector_Y
class CBlackLevelSelector(EnumerationFeature):
    """
    Selects which Black Level is controlled by the various Black Level features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBlackLevelSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBlackLevelSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBlackLevelSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBlackLevelSelector
    __del__ = lambda self: None

    def Set(self, value: 'BlackLevelSelector') -> "CBlackLevelSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBlackLevelSelector object with the value set.
        """
        return _neoapi.CBlackLevelSelector_Set(self, value)

    def Get(self) -> "BlackLevelSelector":
        """
        Get the current value.
        Return: The BlackLevelSelector value.
        """
        return _neoapi.CBlackLevelSelector_Get(self)

    value = property(Get, Set)

CBlackLevelSelector_swigregister = _neoapi.CBlackLevelSelector_swigregister
CBlackLevelSelector_swigregister(CBlackLevelSelector)

BlackSunSuppression_Default = _neoapi.BlackSunSuppression_Default
BlackSunSuppression_High = _neoapi.BlackSunSuppression_High
BlackSunSuppression_Low = _neoapi.BlackSunSuppression_Low
BlackSunSuppression_Max = _neoapi.BlackSunSuppression_Max
BlackSunSuppression_Off = _neoapi.BlackSunSuppression_Off
class CBlackSunSuppression(EnumerationFeature):
    """
    Controls the sensor internal feature for avoiding the black sun effect.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBlackSunSuppression, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBlackSunSuppression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBlackSunSuppression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBlackSunSuppression
    __del__ = lambda self: None

    def Set(self, value: 'BlackSunSuppression') -> "CBlackSunSuppression":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBlackSunSuppression object with the value set.
        """
        return _neoapi.CBlackSunSuppression_Set(self, value)

    def Get(self) -> "BlackSunSuppression":
        """
        Get the current value.
        Return: The BlackSunSuppression value.
        """
        return _neoapi.CBlackSunSuppression_Get(self)

    value = property(Get, Set)

CBlackSunSuppression_swigregister = _neoapi.CBlackSunSuppression_swigregister
CBlackSunSuppression_swigregister(CBlackSunSuppression)

BoSequencerEnable_Off = _neoapi.BoSequencerEnable_Off
BoSequencerEnable_On = _neoapi.BoSequencerEnable_On
class CBoSequencerEnable(EnumerationFeature):
    """
    Enables the sequencer for special multi-frame mode. Normal acquisition will be stopped.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBoSequencerEnable, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBoSequencerEnable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBoSequencerEnable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBoSequencerEnable
    __del__ = lambda self: None

    def Set(self, value: 'BoSequencerEnable') -> "CBoSequencerEnable":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBoSequencerEnable object with the value set.
        """
        return _neoapi.CBoSequencerEnable_Set(self, value)

    def Get(self) -> "BoSequencerEnable":
        """
        Get the current value.
        Return: The BoSequencerEnable value.
        """
        return _neoapi.CBoSequencerEnable_Get(self)

    value = property(Get, Set)

CBoSequencerEnable_swigregister = _neoapi.CBoSequencerEnable_swigregister
CBoSequencerEnable_swigregister(CBoSequencerEnable)

BoSequencerIOSelector_SequencerOutput0 = _neoapi.BoSequencerIOSelector_SequencerOutput0
BoSequencerIOSelector_SequencerOutput1 = _neoapi.BoSequencerIOSelector_SequencerOutput1
BoSequencerIOSelector_SequencerOutput2 = _neoapi.BoSequencerIOSelector_SequencerOutput2
class CBoSequencerIOSelector(EnumerationFeature):
    """
    Selects the Sequencers output lines.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBoSequencerIOSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBoSequencerIOSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBoSequencerIOSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBoSequencerIOSelector
    __del__ = lambda self: None

    def Set(self, value: 'BoSequencerIOSelector') -> "CBoSequencerIOSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBoSequencerIOSelector object with the value set.
        """
        return _neoapi.CBoSequencerIOSelector_Set(self, value)

    def Get(self) -> "BoSequencerIOSelector":
        """
        Get the current value.
        Return: The BoSequencerIOSelector value.
        """
        return _neoapi.CBoSequencerIOSelector_Get(self)

    value = property(Get, Set)

CBoSequencerIOSelector_swigregister = _neoapi.CBoSequencerIOSelector_swigregister
CBoSequencerIOSelector_swigregister(CBoSequencerIOSelector)

BoSequencerMode_FreeRunning = _neoapi.BoSequencerMode_FreeRunning
BoSequencerMode_FreeRunningInitTrigger = _neoapi.BoSequencerMode_FreeRunningInitTrigger
BoSequencerMode_FreeRunningInitTriggerOnce = _neoapi.BoSequencerMode_FreeRunningInitTriggerOnce
BoSequencerMode_FreeRunningOnce = _neoapi.BoSequencerMode_FreeRunningOnce
BoSequencerMode_SingleStepTrigger = _neoapi.BoSequencerMode_SingleStepTrigger
BoSequencerMode_SingleStepTriggerOnce = _neoapi.BoSequencerMode_SingleStepTriggerOnce
class CBoSequencerMode(EnumerationFeature):
    """
    Specifies the running mode of the sequencer.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBoSequencerMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBoSequencerMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBoSequencerMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBoSequencerMode
    __del__ = lambda self: None

    def Set(self, value: 'BoSequencerMode') -> "CBoSequencerMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBoSequencerMode object with the value set.
        """
        return _neoapi.CBoSequencerMode_Set(self, value)

    def Get(self) -> "BoSequencerMode":
        """
        Get the current value.
        Return: The BoSequencerMode value.
        """
        return _neoapi.CBoSequencerMode_Get(self)

    value = property(Get, Set)

CBoSequencerMode_swigregister = _neoapi.CBoSequencerMode_swigregister
CBoSequencerMode_swigregister(CBoSequencerMode)

BoSequencerSensorDigitizationTaps_Four = _neoapi.BoSequencerSensorDigitizationTaps_Four
BoSequencerSensorDigitizationTaps_One = _neoapi.BoSequencerSensorDigitizationTaps_One
BoSequencerSensorDigitizationTaps_OneAndThree = _neoapi.BoSequencerSensorDigitizationTaps_OneAndThree
BoSequencerSensorDigitizationTaps_OneAndTwo = _neoapi.BoSequencerSensorDigitizationTaps_OneAndTwo
class CBoSequencerSensorDigitizationTaps(EnumerationFeature):
    """
    Sets the number of digitized samples outputted simultaneously by the camera A/D conversion stage for the sequencer.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBoSequencerSensorDigitizationTaps, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBoSequencerSensorDigitizationTaps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBoSequencerSensorDigitizationTaps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBoSequencerSensorDigitizationTaps
    __del__ = lambda self: None

    def Set(self, value: 'BoSequencerSensorDigitizationTaps') -> "CBoSequencerSensorDigitizationTaps":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBoSequencerSensorDigitizationTaps object with the value set.
        """
        return _neoapi.CBoSequencerSensorDigitizationTaps_Set(self, value)

    def Get(self) -> "BoSequencerSensorDigitizationTaps":
        """
        Get the current value.
        Return: The BoSequencerSensorDigitizationTaps value.
        """
        return _neoapi.CBoSequencerSensorDigitizationTaps_Get(self)

    value = property(Get, Set)

CBoSequencerSensorDigitizationTaps_swigregister = _neoapi.CBoSequencerSensorDigitizationTaps_swigregister
CBoSequencerSensorDigitizationTaps_swigregister(CBoSequencerSensorDigitizationTaps)

BoSequencerStart_Off = _neoapi.BoSequencerStart_Off
BoSequencerStart_On = _neoapi.BoSequencerStart_On
class CBoSequencerStart(EnumerationFeature):
    """
    Starts or stopps the configured sequence.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBoSequencerStart, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBoSequencerStart, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBoSequencerStart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBoSequencerStart
    __del__ = lambda self: None

    def Set(self, value: 'BoSequencerStart') -> "CBoSequencerStart":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBoSequencerStart object with the value set.
        """
        return _neoapi.CBoSequencerStart_Set(self, value)

    def Get(self) -> "BoSequencerStart":
        """
        Get the current value.
        Return: The BoSequencerStart value.
        """
        return _neoapi.CBoSequencerStart_Get(self)

    value = property(Get, Set)

CBoSequencerStart_swigregister = _neoapi.CBoSequencerStart_swigregister
CBoSequencerStart_swigregister(CBoSequencerStart)

BrightnessAutoPriority_ExposureAuto = _neoapi.BrightnessAutoPriority_ExposureAuto
BrightnessAutoPriority_GainAuto = _neoapi.BrightnessAutoPriority_GainAuto
class CBrightnessAutoPriority(EnumerationFeature):
    """
    Sets the highest priority auto feature to adjust the brightness.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBrightnessAutoPriority, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBrightnessAutoPriority, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBrightnessAutoPriority(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBrightnessAutoPriority
    __del__ = lambda self: None

    def Set(self, value: 'BrightnessAutoPriority') -> "CBrightnessAutoPriority":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBrightnessAutoPriority object with the value set.
        """
        return _neoapi.CBrightnessAutoPriority_Set(self, value)

    def Get(self) -> "BrightnessAutoPriority":
        """
        Get the current value.
        Return: The BrightnessAutoPriority value.
        """
        return _neoapi.CBrightnessAutoPriority_Get(self)

    value = property(Get, Set)

CBrightnessAutoPriority_swigregister = _neoapi.CBrightnessAutoPriority_swigregister
CBrightnessAutoPriority_swigregister(CBrightnessAutoPriority)

BrightnessCorrection_Off = _neoapi.BrightnessCorrection_Off
BrightnessCorrection_On = _neoapi.BrightnessCorrection_On
class CBrightnessCorrection(EnumerationFeature):
    """
    Enables the Brightness Correction. Brightness Correction is available for binning only.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBrightnessCorrection, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBrightnessCorrection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CBrightnessCorrection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CBrightnessCorrection
    __del__ = lambda self: None

    def Set(self, value: 'BrightnessCorrection') -> "CBrightnessCorrection":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CBrightnessCorrection object with the value set.
        """
        return _neoapi.CBrightnessCorrection_Set(self, value)

    def Get(self) -> "BrightnessCorrection":
        """
        Get the current value.
        Return: The BrightnessCorrection value.
        """
        return _neoapi.CBrightnessCorrection_Get(self)

    value = property(Get, Set)

CBrightnessCorrection_swigregister = _neoapi.CBrightnessCorrection_swigregister
CBrightnessCorrection_swigregister(CBrightnessCorrection)

CalibrationMatrixValueSelector_Gain00 = _neoapi.CalibrationMatrixValueSelector_Gain00
CalibrationMatrixValueSelector_Gain01 = _neoapi.CalibrationMatrixValueSelector_Gain01
CalibrationMatrixValueSelector_Gain02 = _neoapi.CalibrationMatrixValueSelector_Gain02
CalibrationMatrixValueSelector_Gain03 = _neoapi.CalibrationMatrixValueSelector_Gain03
CalibrationMatrixValueSelector_Gain10 = _neoapi.CalibrationMatrixValueSelector_Gain10
CalibrationMatrixValueSelector_Gain11 = _neoapi.CalibrationMatrixValueSelector_Gain11
CalibrationMatrixValueSelector_Gain12 = _neoapi.CalibrationMatrixValueSelector_Gain12
CalibrationMatrixValueSelector_Gain13 = _neoapi.CalibrationMatrixValueSelector_Gain13
CalibrationMatrixValueSelector_Gain20 = _neoapi.CalibrationMatrixValueSelector_Gain20
CalibrationMatrixValueSelector_Gain21 = _neoapi.CalibrationMatrixValueSelector_Gain21
CalibrationMatrixValueSelector_Gain22 = _neoapi.CalibrationMatrixValueSelector_Gain22
CalibrationMatrixValueSelector_Gain23 = _neoapi.CalibrationMatrixValueSelector_Gain23
class CCalibrationMatrixValueSelector(EnumerationFeature):
    """
    Selects the gain factor of the selected calibration matrix.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCalibrationMatrixValueSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCalibrationMatrixValueSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCalibrationMatrixValueSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCalibrationMatrixValueSelector
    __del__ = lambda self: None

    def Set(self, value: 'CalibrationMatrixValueSelector') -> "CCalibrationMatrixValueSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCalibrationMatrixValueSelector object with the value set.
        """
        return _neoapi.CCalibrationMatrixValueSelector_Set(self, value)

    def Get(self) -> "CalibrationMatrixValueSelector":
        """
        Get the current value.
        Return: The CalibrationMatrixValueSelector value.
        """
        return _neoapi.CCalibrationMatrixValueSelector_Get(self)

    value = property(Get, Set)

CCalibrationMatrixValueSelector_swigregister = _neoapi.CCalibrationMatrixValueSelector_swigregister
CCalibrationMatrixValueSelector_swigregister(CCalibrationMatrixValueSelector)

ChunkSelector_Binning = _neoapi.ChunkSelector_Binning
ChunkSelector_BinningHorizontal = _neoapi.ChunkSelector_BinningHorizontal
ChunkSelector_BinningVertical = _neoapi.ChunkSelector_BinningVertical
ChunkSelector_BlackLevel = _neoapi.ChunkSelector_BlackLevel
ChunkSelector_BoSequencerEnable = _neoapi.ChunkSelector_BoSequencerEnable
ChunkSelector_ComponentID = _neoapi.ChunkSelector_ComponentID
ChunkSelector_ComponentIDValue = _neoapi.ChunkSelector_ComponentIDValue
ChunkSelector_CounterValue = _neoapi.ChunkSelector_CounterValue
ChunkSelector_DecimationHorizontal = _neoapi.ChunkSelector_DecimationHorizontal
ChunkSelector_DecimationVertical = _neoapi.ChunkSelector_DecimationVertical
ChunkSelector_DeviceTemperature = _neoapi.ChunkSelector_DeviceTemperature
ChunkSelector_EncoderStatusValue = _neoapi.ChunkSelector_EncoderStatusValue
ChunkSelector_EncoderValue = _neoapi.ChunkSelector_EncoderValue
ChunkSelector_ExposureTime = _neoapi.ChunkSelector_ExposureTime
ChunkSelector_FrameID = _neoapi.ChunkSelector_FrameID
ChunkSelector_Gain = _neoapi.ChunkSelector_Gain
ChunkSelector_GroupIDValue = _neoapi.ChunkSelector_GroupIDValue
ChunkSelector_Height = _neoapi.ChunkSelector_Height
ChunkSelector_Image = _neoapi.ChunkSelector_Image
ChunkSelector_ImageControl = _neoapi.ChunkSelector_ImageControl
ChunkSelector_LinePitch = _neoapi.ChunkSelector_LinePitch
ChunkSelector_LineStatusAll = _neoapi.ChunkSelector_LineStatusAll
ChunkSelector_OffsetX = _neoapi.ChunkSelector_OffsetX
ChunkSelector_OffsetY = _neoapi.ChunkSelector_OffsetY
ChunkSelector_PixelDynamicRangeMax = _neoapi.ChunkSelector_PixelDynamicRangeMax
ChunkSelector_PixelDynamicRangeMin = _neoapi.ChunkSelector_PixelDynamicRangeMin
ChunkSelector_PixelFormat = _neoapi.ChunkSelector_PixelFormat
ChunkSelector_RegionID = _neoapi.ChunkSelector_RegionID
ChunkSelector_RegionIDValue = _neoapi.ChunkSelector_RegionIDValue
ChunkSelector_ReverseX = _neoapi.ChunkSelector_ReverseX
ChunkSelector_ReverseY = _neoapi.ChunkSelector_ReverseY
ChunkSelector_Scan3dAxisMax = _neoapi.ChunkSelector_Scan3dAxisMax
ChunkSelector_Scan3dAxisMin = _neoapi.ChunkSelector_Scan3dAxisMin
ChunkSelector_Scan3dCoordinateOffset = _neoapi.ChunkSelector_Scan3dCoordinateOffset
ChunkSelector_Scan3dCoordinateReferenceValue = _neoapi.ChunkSelector_Scan3dCoordinateReferenceValue
ChunkSelector_Scan3dCoordinateScale = _neoapi.ChunkSelector_Scan3dCoordinateScale
ChunkSelector_Scan3dCoordinateSystem = _neoapi.ChunkSelector_Scan3dCoordinateSystem
ChunkSelector_Scan3dCoordinateSystemReference = _neoapi.ChunkSelector_Scan3dCoordinateSystemReference
ChunkSelector_Scan3dCoordinateTransformValue = _neoapi.ChunkSelector_Scan3dCoordinateTransformValue
ChunkSelector_Scan3dDistanceUnit = _neoapi.ChunkSelector_Scan3dDistanceUnit
ChunkSelector_Scan3dInvalidDataFlag = _neoapi.ChunkSelector_Scan3dInvalidDataFlag
ChunkSelector_Scan3dInvalidDataValue = _neoapi.ChunkSelector_Scan3dInvalidDataValue
ChunkSelector_Scan3dOutputMode = _neoapi.ChunkSelector_Scan3dOutputMode
ChunkSelector_SequencerSetActive = _neoapi.ChunkSelector_SequencerSetActive
ChunkSelector_SourceID = _neoapi.ChunkSelector_SourceID
ChunkSelector_SourceIDValue = _neoapi.ChunkSelector_SourceIDValue
ChunkSelector_StreamChannelID = _neoapi.ChunkSelector_StreamChannelID
ChunkSelector_TimerValue = _neoapi.ChunkSelector_TimerValue
ChunkSelector_Timestamp = _neoapi.ChunkSelector_Timestamp
ChunkSelector_TimestampLatchValue = _neoapi.ChunkSelector_TimestampLatchValue
ChunkSelector_TransferBlockID = _neoapi.ChunkSelector_TransferBlockID
ChunkSelector_TransferQueueCurrentBlockCount = _neoapi.ChunkSelector_TransferQueueCurrentBlockCount
ChunkSelector_TransferStreamID = _neoapi.ChunkSelector_TransferStreamID
ChunkSelector_TriggerControl = _neoapi.ChunkSelector_TriggerControl
ChunkSelector_TriggerID = _neoapi.ChunkSelector_TriggerID
ChunkSelector_Width = _neoapi.ChunkSelector_Width
class CChunkSelector(EnumerationFeature):
    """
    Selects which Chunk to enable or control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CChunkSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CChunkSelector
    __del__ = lambda self: None

    def Set(self, value: 'ChunkSelector') -> "CChunkSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CChunkSelector object with the value set.
        """
        return _neoapi.CChunkSelector_Set(self, value)

    def Get(self) -> "ChunkSelector":
        """
        Get the current value.
        Return: The ChunkSelector value.
        """
        return _neoapi.CChunkSelector_Get(self)

    value = property(Get, Set)

CChunkSelector_swigregister = _neoapi.CChunkSelector_swigregister
CChunkSelector_swigregister(CChunkSelector)

ClConfiguration_Base = _neoapi.ClConfiguration_Base
ClConfiguration_DualBase = _neoapi.ClConfiguration_DualBase
ClConfiguration_EightyBit = _neoapi.ClConfiguration_EightyBit
ClConfiguration_Full = _neoapi.ClConfiguration_Full
ClConfiguration_Medium = _neoapi.ClConfiguration_Medium
class CClConfiguration(EnumerationFeature):
    """
    This Camera Link specific feature describes the configuration used by the camera. It helps especially when a camera is capable of operation in a non-standard configuration, and when the features PixelSize, SensorDigitizationTaps, and DeviceTapGeometry do not provide enough information for interpretation of the image data provided by the camera.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CClConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CClConfiguration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CClConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CClConfiguration
    __del__ = lambda self: None

    def Set(self, value: 'ClConfiguration') -> "CClConfiguration":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CClConfiguration object with the value set.
        """
        return _neoapi.CClConfiguration_Set(self, value)

    def Get(self) -> "ClConfiguration":
        """
        Get the current value.
        Return: The ClConfiguration value.
        """
        return _neoapi.CClConfiguration_Get(self)

    value = property(Get, Set)

CClConfiguration_swigregister = _neoapi.CClConfiguration_swigregister
CClConfiguration_swigregister(CClConfiguration)

ClTimeSlotsCount_One = _neoapi.ClTimeSlotsCount_One
ClTimeSlotsCount_Three = _neoapi.ClTimeSlotsCount_Three
ClTimeSlotsCount_Two = _neoapi.ClTimeSlotsCount_Two
class CClTimeSlotsCount(EnumerationFeature):
    """
    This Camera Link specific feature describes the time multiplexing of the camera link connection to transfer more than the configuration allows, in one single clock.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CClTimeSlotsCount, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CClTimeSlotsCount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CClTimeSlotsCount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CClTimeSlotsCount
    __del__ = lambda self: None

    def Set(self, value: 'ClTimeSlotsCount') -> "CClTimeSlotsCount":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CClTimeSlotsCount object with the value set.
        """
        return _neoapi.CClTimeSlotsCount_Set(self, value)

    def Get(self) -> "ClTimeSlotsCount":
        """
        Get the current value.
        Return: The ClTimeSlotsCount value.
        """
        return _neoapi.CClTimeSlotsCount_Get(self)

    value = property(Get, Set)

CClTimeSlotsCount_swigregister = _neoapi.CClTimeSlotsCount_swigregister
CClTimeSlotsCount_swigregister(CClTimeSlotsCount)

ColorTransformationAuto_Continuous = _neoapi.ColorTransformationAuto_Continuous
ColorTransformationAuto_Off = _neoapi.ColorTransformationAuto_Off
ColorTransformationAuto_Once = _neoapi.ColorTransformationAuto_Once
class CColorTransformationAuto(EnumerationFeature):
    """
    Controls the mode for automatic adjusting the gains of the active transformation matrix.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CColorTransformationAuto, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CColorTransformationAuto, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CColorTransformationAuto(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CColorTransformationAuto
    __del__ = lambda self: None

    def Set(self, value: 'ColorTransformationAuto') -> "CColorTransformationAuto":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CColorTransformationAuto object with the value set.
        """
        return _neoapi.CColorTransformationAuto_Set(self, value)

    def Get(self) -> "ColorTransformationAuto":
        """
        Get the current value.
        Return: The ColorTransformationAuto value.
        """
        return _neoapi.CColorTransformationAuto_Get(self)

    value = property(Get, Set)

CColorTransformationAuto_swigregister = _neoapi.CColorTransformationAuto_swigregister
CColorTransformationAuto_swigregister(CColorTransformationAuto)

ColorTransformationFactoryListSelector_OptimizedMatrixFor3000K = _neoapi.ColorTransformationFactoryListSelector_OptimizedMatrixFor3000K
ColorTransformationFactoryListSelector_OptimizedMatrixFor3200K = _neoapi.ColorTransformationFactoryListSelector_OptimizedMatrixFor3200K
ColorTransformationFactoryListSelector_OptimizedMatrixFor5000K = _neoapi.ColorTransformationFactoryListSelector_OptimizedMatrixFor5000K
ColorTransformationFactoryListSelector_OptimizedMatrixFor5600K = _neoapi.ColorTransformationFactoryListSelector_OptimizedMatrixFor5600K
ColorTransformationFactoryListSelector_OptimizedMatrixFor6500K = _neoapi.ColorTransformationFactoryListSelector_OptimizedMatrixFor6500K
class CColorTransformationFactoryListSelector(EnumerationFeature):
    """
    Selects the color transformation factory list tuned to the given color temeperature.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CColorTransformationFactoryListSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CColorTransformationFactoryListSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CColorTransformationFactoryListSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CColorTransformationFactoryListSelector
    __del__ = lambda self: None

    def Set(self, value: 'ColorTransformationFactoryListSelector') -> "CColorTransformationFactoryListSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CColorTransformationFactoryListSelector object with the value set.
        """
        return _neoapi.CColorTransformationFactoryListSelector_Set(self, value)

    def Get(self) -> "ColorTransformationFactoryListSelector":
        """
        Get the current value.
        Return: The ColorTransformationFactoryListSelector value.
        """
        return _neoapi.CColorTransformationFactoryListSelector_Get(self)

    value = property(Get, Set)

CColorTransformationFactoryListSelector_swigregister = _neoapi.CColorTransformationFactoryListSelector_swigregister
CColorTransformationFactoryListSelector_swigregister(CColorTransformationFactoryListSelector)

ColorTransformationSelector_RGBtoRGB = _neoapi.ColorTransformationSelector_RGBtoRGB
ColorTransformationSelector_RGBtoYUV = _neoapi.ColorTransformationSelector_RGBtoYUV
class CColorTransformationSelector(EnumerationFeature):
    """
    Selects which Color Transformation module is controlled by the various Color Transformation features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CColorTransformationSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CColorTransformationSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CColorTransformationSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CColorTransformationSelector
    __del__ = lambda self: None

    def Set(self, value: 'ColorTransformationSelector') -> "CColorTransformationSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CColorTransformationSelector object with the value set.
        """
        return _neoapi.CColorTransformationSelector_Set(self, value)

    def Get(self) -> "ColorTransformationSelector":
        """
        Get the current value.
        Return: The ColorTransformationSelector value.
        """
        return _neoapi.CColorTransformationSelector_Get(self)

    value = property(Get, Set)

CColorTransformationSelector_swigregister = _neoapi.CColorTransformationSelector_swigregister
CColorTransformationSelector_swigregister(CColorTransformationSelector)

ColorTransformationValueSelector_Gain00 = _neoapi.ColorTransformationValueSelector_Gain00
ColorTransformationValueSelector_Gain01 = _neoapi.ColorTransformationValueSelector_Gain01
ColorTransformationValueSelector_Gain02 = _neoapi.ColorTransformationValueSelector_Gain02
ColorTransformationValueSelector_Gain10 = _neoapi.ColorTransformationValueSelector_Gain10
ColorTransformationValueSelector_Gain11 = _neoapi.ColorTransformationValueSelector_Gain11
ColorTransformationValueSelector_Gain12 = _neoapi.ColorTransformationValueSelector_Gain12
ColorTransformationValueSelector_Gain20 = _neoapi.ColorTransformationValueSelector_Gain20
ColorTransformationValueSelector_Gain21 = _neoapi.ColorTransformationValueSelector_Gain21
ColorTransformationValueSelector_Gain22 = _neoapi.ColorTransformationValueSelector_Gain22
ColorTransformationValueSelector_Offset0 = _neoapi.ColorTransformationValueSelector_Offset0
ColorTransformationValueSelector_Offset1 = _neoapi.ColorTransformationValueSelector_Offset1
ColorTransformationValueSelector_Offset2 = _neoapi.ColorTransformationValueSelector_Offset2
class CColorTransformationValueSelector(EnumerationFeature):
    """
    Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CColorTransformationValueSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CColorTransformationValueSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CColorTransformationValueSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CColorTransformationValueSelector
    __del__ = lambda self: None

    def Set(self, value: 'ColorTransformationValueSelector') -> "CColorTransformationValueSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CColorTransformationValueSelector object with the value set.
        """
        return _neoapi.CColorTransformationValueSelector_Set(self, value)

    def Get(self) -> "ColorTransformationValueSelector":
        """
        Get the current value.
        Return: The ColorTransformationValueSelector value.
        """
        return _neoapi.CColorTransformationValueSelector_Get(self)

    value = property(Get, Set)

CColorTransformationValueSelector_swigregister = _neoapi.CColorTransformationValueSelector_swigregister
CColorTransformationValueSelector_swigregister(CColorTransformationValueSelector)

ComponentSelector_Confidence = _neoapi.ComponentSelector_Confidence
ComponentSelector_Disparity = _neoapi.ComponentSelector_Disparity
ComponentSelector_Infrared = _neoapi.ComponentSelector_Infrared
ComponentSelector_Intensity = _neoapi.ComponentSelector_Intensity
ComponentSelector_Multispectral = _neoapi.ComponentSelector_Multispectral
ComponentSelector_PolarizedRaw = _neoapi.ComponentSelector_PolarizedRaw
ComponentSelector_Range = _neoapi.ComponentSelector_Range
ComponentSelector_Reflectance = _neoapi.ComponentSelector_Reflectance
ComponentSelector_Scatter = _neoapi.ComponentSelector_Scatter
ComponentSelector_Ultraviolet = _neoapi.ComponentSelector_Ultraviolet
class CComponentSelector(EnumerationFeature):
    """
    Selects a component to activate/deactivate its data streaming.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CComponentSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CComponentSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CComponentSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CComponentSelector
    __del__ = lambda self: None

    def Set(self, value: 'ComponentSelector') -> "CComponentSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CComponentSelector object with the value set.
        """
        return _neoapi.CComponentSelector_Set(self, value)

    def Get(self) -> "ComponentSelector":
        """
        Get the current value.
        Return: The ComponentSelector value.
        """
        return _neoapi.CComponentSelector_Get(self)

    value = property(Get, Set)

CComponentSelector_swigregister = _neoapi.CComponentSelector_swigregister
CComponentSelector_swigregister(CComponentSelector)

CounterEventActivation_AnyEdge = _neoapi.CounterEventActivation_AnyEdge
CounterEventActivation_FallingEdge = _neoapi.CounterEventActivation_FallingEdge
CounterEventActivation_RisingEdge = _neoapi.CounterEventActivation_RisingEdge
class CCounterEventActivation(EnumerationFeature):
    """
    Selects the Activation mode Event Source signal.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCounterEventActivation, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCounterEventActivation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCounterEventActivation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCounterEventActivation
    __del__ = lambda self: None

    def Set(self, value: 'CounterEventActivation') -> "CCounterEventActivation":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCounterEventActivation object with the value set.
        """
        return _neoapi.CCounterEventActivation_Set(self, value)

    def Get(self) -> "CounterEventActivation":
        """
        Get the current value.
        Return: The CounterEventActivation value.
        """
        return _neoapi.CCounterEventActivation_Get(self)

    value = property(Get, Set)

CCounterEventActivation_swigregister = _neoapi.CCounterEventActivation_swigregister
CCounterEventActivation_swigregister(CCounterEventActivation)

CounterEventSource_AcquisitionEnd = _neoapi.CounterEventSource_AcquisitionEnd
CounterEventSource_AcquisitionStart = _neoapi.CounterEventSource_AcquisitionStart
CounterEventSource_AcquisitionTrigger = _neoapi.CounterEventSource_AcquisitionTrigger
CounterEventSource_AcquisitionTriggerMissed = _neoapi.CounterEventSource_AcquisitionTriggerMissed
CounterEventSource_Action0 = _neoapi.CounterEventSource_Action0
CounterEventSource_Action1 = _neoapi.CounterEventSource_Action1
CounterEventSource_Action2 = _neoapi.CounterEventSource_Action2
CounterEventSource_Counter0End = _neoapi.CounterEventSource_Counter0End
CounterEventSource_Counter0Start = _neoapi.CounterEventSource_Counter0Start
CounterEventSource_Counter1End = _neoapi.CounterEventSource_Counter1End
CounterEventSource_Counter1Start = _neoapi.CounterEventSource_Counter1Start
CounterEventSource_Counter2End = _neoapi.CounterEventSource_Counter2End
CounterEventSource_Counter2Start = _neoapi.CounterEventSource_Counter2Start
CounterEventSource_Encoder0 = _neoapi.CounterEventSource_Encoder0
CounterEventSource_Encoder1 = _neoapi.CounterEventSource_Encoder1
CounterEventSource_Encoder2 = _neoapi.CounterEventSource_Encoder2
CounterEventSource_ExposureActive = _neoapi.CounterEventSource_ExposureActive
CounterEventSource_ExposureEnd = _neoapi.CounterEventSource_ExposureEnd
CounterEventSource_ExposureStart = _neoapi.CounterEventSource_ExposureStart
CounterEventSource_FrameBurstEnd = _neoapi.CounterEventSource_FrameBurstEnd
CounterEventSource_FrameBurstStart = _neoapi.CounterEventSource_FrameBurstStart
CounterEventSource_FrameEnd = _neoapi.CounterEventSource_FrameEnd
CounterEventSource_FrameStart = _neoapi.CounterEventSource_FrameStart
CounterEventSource_FrameTransferSkipped = _neoapi.CounterEventSource_FrameTransferSkipped
CounterEventSource_FrameTrigger = _neoapi.CounterEventSource_FrameTrigger
CounterEventSource_FrameTriggerMissed = _neoapi.CounterEventSource_FrameTriggerMissed
CounterEventSource_Line0 = _neoapi.CounterEventSource_Line0
CounterEventSource_Line1 = _neoapi.CounterEventSource_Line1
CounterEventSource_Line2 = _neoapi.CounterEventSource_Line2
CounterEventSource_LineEnd = _neoapi.CounterEventSource_LineEnd
CounterEventSource_LineStart = _neoapi.CounterEventSource_LineStart
CounterEventSource_LineTrigger = _neoapi.CounterEventSource_LineTrigger
CounterEventSource_LineTriggerMissed = _neoapi.CounterEventSource_LineTriggerMissed
CounterEventSource_LinkTrigger0 = _neoapi.CounterEventSource_LinkTrigger0
CounterEventSource_LinkTrigger1 = _neoapi.CounterEventSource_LinkTrigger1
CounterEventSource_LinkTrigger2 = _neoapi.CounterEventSource_LinkTrigger2
CounterEventSource_LinkTriggerMissed0 = _neoapi.CounterEventSource_LinkTriggerMissed0
CounterEventSource_LinkTriggerMissed1 = _neoapi.CounterEventSource_LinkTriggerMissed1
CounterEventSource_LinkTriggerMissed2 = _neoapi.CounterEventSource_LinkTriggerMissed2
CounterEventSource_LogicBlock0 = _neoapi.CounterEventSource_LogicBlock0
CounterEventSource_LogicBlock1 = _neoapi.CounterEventSource_LogicBlock1
CounterEventSource_LogicBlock2 = _neoapi.CounterEventSource_LogicBlock2
CounterEventSource_Off = _neoapi.CounterEventSource_Off
CounterEventSource_SoftwareSignal0 = _neoapi.CounterEventSource_SoftwareSignal0
CounterEventSource_SoftwareSignal1 = _neoapi.CounterEventSource_SoftwareSignal1
CounterEventSource_SoftwareSignal2 = _neoapi.CounterEventSource_SoftwareSignal2
CounterEventSource_Timer0End = _neoapi.CounterEventSource_Timer0End
CounterEventSource_Timer0Start = _neoapi.CounterEventSource_Timer0Start
CounterEventSource_Timer1End = _neoapi.CounterEventSource_Timer1End
CounterEventSource_Timer1Start = _neoapi.CounterEventSource_Timer1Start
CounterEventSource_Timer2End = _neoapi.CounterEventSource_Timer2End
CounterEventSource_Timer2Start = _neoapi.CounterEventSource_Timer2Start
CounterEventSource_TimestampTick = _neoapi.CounterEventSource_TimestampTick
CounterEventSource_TriggerSkipped = _neoapi.CounterEventSource_TriggerSkipped
class CCounterEventSource(EnumerationFeature):
    """
    Select the events that will be the source to increment the Counter.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCounterEventSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCounterEventSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCounterEventSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCounterEventSource
    __del__ = lambda self: None

    def Set(self, value: 'CounterEventSource') -> "CCounterEventSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCounterEventSource object with the value set.
        """
        return _neoapi.CCounterEventSource_Set(self, value)

    def Get(self) -> "CounterEventSource":
        """
        Get the current value.
        Return: The CounterEventSource value.
        """
        return _neoapi.CCounterEventSource_Get(self)

    value = property(Get, Set)

CCounterEventSource_swigregister = _neoapi.CCounterEventSource_swigregister
CCounterEventSource_swigregister(CCounterEventSource)

CounterResetActivation_AnyEdge = _neoapi.CounterResetActivation_AnyEdge
CounterResetActivation_FallingEdge = _neoapi.CounterResetActivation_FallingEdge
CounterResetActivation_LevelHigh = _neoapi.CounterResetActivation_LevelHigh
CounterResetActivation_LevelLow = _neoapi.CounterResetActivation_LevelLow
CounterResetActivation_RisingEdge = _neoapi.CounterResetActivation_RisingEdge
class CCounterResetActivation(EnumerationFeature):
    """
    Selects the Activation mode of the Counter Reset Source signal.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCounterResetActivation, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCounterResetActivation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCounterResetActivation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCounterResetActivation
    __del__ = lambda self: None

    def Set(self, value: 'CounterResetActivation') -> "CCounterResetActivation":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCounterResetActivation object with the value set.
        """
        return _neoapi.CCounterResetActivation_Set(self, value)

    def Get(self) -> "CounterResetActivation":
        """
        Get the current value.
        Return: The CounterResetActivation value.
        """
        return _neoapi.CCounterResetActivation_Get(self)

    value = property(Get, Set)

CCounterResetActivation_swigregister = _neoapi.CCounterResetActivation_swigregister
CCounterResetActivation_swigregister(CCounterResetActivation)

CounterResetSource_AcquisitionEnd = _neoapi.CounterResetSource_AcquisitionEnd
CounterResetSource_AcquisitionStart = _neoapi.CounterResetSource_AcquisitionStart
CounterResetSource_AcquisitionTrigger = _neoapi.CounterResetSource_AcquisitionTrigger
CounterResetSource_AcquisitionTriggerMissed = _neoapi.CounterResetSource_AcquisitionTriggerMissed
CounterResetSource_Action0 = _neoapi.CounterResetSource_Action0
CounterResetSource_Action1 = _neoapi.CounterResetSource_Action1
CounterResetSource_Action2 = _neoapi.CounterResetSource_Action2
CounterResetSource_Counter0End = _neoapi.CounterResetSource_Counter0End
CounterResetSource_Counter0Start = _neoapi.CounterResetSource_Counter0Start
CounterResetSource_Counter1End = _neoapi.CounterResetSource_Counter1End
CounterResetSource_Counter1Start = _neoapi.CounterResetSource_Counter1Start
CounterResetSource_Counter2End = _neoapi.CounterResetSource_Counter2End
CounterResetSource_Counter2Start = _neoapi.CounterResetSource_Counter2Start
CounterResetSource_CounterTrigger = _neoapi.CounterResetSource_CounterTrigger
CounterResetSource_Encoder0 = _neoapi.CounterResetSource_Encoder0
CounterResetSource_Encoder1 = _neoapi.CounterResetSource_Encoder1
CounterResetSource_Encoder2 = _neoapi.CounterResetSource_Encoder2
CounterResetSource_ExposureEnd = _neoapi.CounterResetSource_ExposureEnd
CounterResetSource_ExposureStart = _neoapi.CounterResetSource_ExposureStart
CounterResetSource_FrameEnd = _neoapi.CounterResetSource_FrameEnd
CounterResetSource_FrameStart = _neoapi.CounterResetSource_FrameStart
CounterResetSource_FrameTrigger = _neoapi.CounterResetSource_FrameTrigger
CounterResetSource_FrameTriggerMissed = _neoapi.CounterResetSource_FrameTriggerMissed
CounterResetSource_Line0 = _neoapi.CounterResetSource_Line0
CounterResetSource_Line1 = _neoapi.CounterResetSource_Line1
CounterResetSource_Line2 = _neoapi.CounterResetSource_Line2
CounterResetSource_LineEnd = _neoapi.CounterResetSource_LineEnd
CounterResetSource_LineStart = _neoapi.CounterResetSource_LineStart
CounterResetSource_LineTrigger = _neoapi.CounterResetSource_LineTrigger
CounterResetSource_LineTriggerMissed = _neoapi.CounterResetSource_LineTriggerMissed
CounterResetSource_LinkTrigger0 = _neoapi.CounterResetSource_LinkTrigger0
CounterResetSource_LinkTrigger1 = _neoapi.CounterResetSource_LinkTrigger1
CounterResetSource_LinkTrigger2 = _neoapi.CounterResetSource_LinkTrigger2
CounterResetSource_LogicBlock0 = _neoapi.CounterResetSource_LogicBlock0
CounterResetSource_LogicBlock1 = _neoapi.CounterResetSource_LogicBlock1
CounterResetSource_LogicBlock2 = _neoapi.CounterResetSource_LogicBlock2
CounterResetSource_Off = _neoapi.CounterResetSource_Off
CounterResetSource_SoftwareSignal0 = _neoapi.CounterResetSource_SoftwareSignal0
CounterResetSource_SoftwareSignal1 = _neoapi.CounterResetSource_SoftwareSignal1
CounterResetSource_SoftwareSignal2 = _neoapi.CounterResetSource_SoftwareSignal2
CounterResetSource_Timer0End = _neoapi.CounterResetSource_Timer0End
CounterResetSource_Timer0Start = _neoapi.CounterResetSource_Timer0Start
CounterResetSource_Timer1End = _neoapi.CounterResetSource_Timer1End
CounterResetSource_Timer1Start = _neoapi.CounterResetSource_Timer1Start
CounterResetSource_Timer2End = _neoapi.CounterResetSource_Timer2End
CounterResetSource_Timer2Start = _neoapi.CounterResetSource_Timer2Start
CounterResetSource_UserOutput0 = _neoapi.CounterResetSource_UserOutput0
CounterResetSource_UserOutput1 = _neoapi.CounterResetSource_UserOutput1
CounterResetSource_UserOutput2 = _neoapi.CounterResetSource_UserOutput2
class CCounterResetSource(EnumerationFeature):
    """
    Selects the signals that will be the source to reset the Counter.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCounterResetSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCounterResetSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCounterResetSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCounterResetSource
    __del__ = lambda self: None

    def Set(self, value: 'CounterResetSource') -> "CCounterResetSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCounterResetSource object with the value set.
        """
        return _neoapi.CCounterResetSource_Set(self, value)

    def Get(self) -> "CounterResetSource":
        """
        Get the current value.
        Return: The CounterResetSource value.
        """
        return _neoapi.CCounterResetSource_Get(self)

    value = property(Get, Set)

CCounterResetSource_swigregister = _neoapi.CCounterResetSource_swigregister
CCounterResetSource_swigregister(CCounterResetSource)

CounterSelector_Counter0 = _neoapi.CounterSelector_Counter0
CounterSelector_Counter1 = _neoapi.CounterSelector_Counter1
CounterSelector_Counter2 = _neoapi.CounterSelector_Counter2
class CCounterSelector(EnumerationFeature):
    """
    Selects which Counter to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCounterSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCounterSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCounterSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCounterSelector
    __del__ = lambda self: None

    def Set(self, value: 'CounterSelector') -> "CCounterSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCounterSelector object with the value set.
        """
        return _neoapi.CCounterSelector_Set(self, value)

    def Get(self) -> "CounterSelector":
        """
        Get the current value.
        Return: The CounterSelector value.
        """
        return _neoapi.CCounterSelector_Get(self)

    value = property(Get, Set)

CCounterSelector_swigregister = _neoapi.CCounterSelector_swigregister
CCounterSelector_swigregister(CCounterSelector)

CustomDataConfigurationMode_Off = _neoapi.CustomDataConfigurationMode_Off
CustomDataConfigurationMode_On = _neoapi.CustomDataConfigurationMode_On
class CCustomDataConfigurationMode(EnumerationFeature):
    """
    Controls if the custom data configuration mode is active.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCustomDataConfigurationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCustomDataConfigurationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CCustomDataConfigurationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CCustomDataConfigurationMode
    __del__ = lambda self: None

    def Set(self, value: 'CustomDataConfigurationMode') -> "CCustomDataConfigurationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CCustomDataConfigurationMode object with the value set.
        """
        return _neoapi.CCustomDataConfigurationMode_Set(self, value)

    def Get(self) -> "CustomDataConfigurationMode":
        """
        Get the current value.
        Return: The CustomDataConfigurationMode value.
        """
        return _neoapi.CCustomDataConfigurationMode_Get(self)

    value = property(Get, Set)

CCustomDataConfigurationMode_swigregister = _neoapi.CCustomDataConfigurationMode_swigregister
CCustomDataConfigurationMode_swigregister(CCustomDataConfigurationMode)

DecimationHorizontalMode_Average = _neoapi.DecimationHorizontalMode_Average
DecimationHorizontalMode_Discard = _neoapi.DecimationHorizontalMode_Discard
class CDecimationHorizontalMode(EnumerationFeature):
    """
    Sets the mode used to reduce the horizontal resolution when DecimationHorizontal is used.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDecimationHorizontalMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDecimationHorizontalMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDecimationHorizontalMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDecimationHorizontalMode
    __del__ = lambda self: None

    def Set(self, value: 'DecimationHorizontalMode') -> "CDecimationHorizontalMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDecimationHorizontalMode object with the value set.
        """
        return _neoapi.CDecimationHorizontalMode_Set(self, value)

    def Get(self) -> "DecimationHorizontalMode":
        """
        Get the current value.
        Return: The DecimationHorizontalMode value.
        """
        return _neoapi.CDecimationHorizontalMode_Get(self)

    value = property(Get, Set)

CDecimationHorizontalMode_swigregister = _neoapi.CDecimationHorizontalMode_swigregister
CDecimationHorizontalMode_swigregister(CDecimationHorizontalMode)

DecimationVerticalMode_Average = _neoapi.DecimationVerticalMode_Average
DecimationVerticalMode_Discard = _neoapi.DecimationVerticalMode_Discard
class CDecimationVerticalMode(EnumerationFeature):
    """
    Sets the mode used to reduce the Vertical resolution when DecimationVertical is used.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDecimationVerticalMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDecimationVerticalMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDecimationVerticalMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDecimationVerticalMode
    __del__ = lambda self: None

    def Set(self, value: 'DecimationVerticalMode') -> "CDecimationVerticalMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDecimationVerticalMode object with the value set.
        """
        return _neoapi.CDecimationVerticalMode_Set(self, value)

    def Get(self) -> "DecimationVerticalMode":
        """
        Get the current value.
        Return: The DecimationVerticalMode value.
        """
        return _neoapi.CDecimationVerticalMode_Get(self)

    value = property(Get, Set)

CDecimationVerticalMode_swigregister = _neoapi.CDecimationVerticalMode_swigregister
CDecimationVerticalMode_swigregister(CDecimationVerticalMode)

DefectPixelListSelector_Column = _neoapi.DefectPixelListSelector_Column
DefectPixelListSelector_Pixel = _neoapi.DefectPixelListSelector_Pixel
DefectPixelListSelector_Row = _neoapi.DefectPixelListSelector_Row
class CDefectPixelListSelector(EnumerationFeature):
    """
    Selects which Defect Pixel List to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDefectPixelListSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDefectPixelListSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDefectPixelListSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDefectPixelListSelector
    __del__ = lambda self: None

    def Set(self, value: 'DefectPixelListSelector') -> "CDefectPixelListSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDefectPixelListSelector object with the value set.
        """
        return _neoapi.CDefectPixelListSelector_Set(self, value)

    def Get(self) -> "DefectPixelListSelector":
        """
        Get the current value.
        Return: The DefectPixelListSelector value.
        """
        return _neoapi.CDefectPixelListSelector_Get(self)

    value = property(Get, Set)

CDefectPixelListSelector_swigregister = _neoapi.CDefectPixelListSelector_swigregister
CDefectPixelListSelector_swigregister(CDefectPixelListSelector)

DeviceCharacterSet_ASCII = _neoapi.DeviceCharacterSet_ASCII
DeviceCharacterSet_UTF16 = _neoapi.DeviceCharacterSet_UTF16
DeviceCharacterSet_UTF8 = _neoapi.DeviceCharacterSet_UTF8
class CDeviceCharacterSet(EnumerationFeature):
    """
    Character set used by the strings of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceCharacterSet, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceCharacterSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceCharacterSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceCharacterSet
    __del__ = lambda self: None

    def Set(self, value: 'DeviceCharacterSet') -> "CDeviceCharacterSet":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceCharacterSet object with the value set.
        """
        return _neoapi.CDeviceCharacterSet_Set(self, value)

    def Get(self) -> "DeviceCharacterSet":
        """
        Get the current value.
        Return: The DeviceCharacterSet value.
        """
        return _neoapi.CDeviceCharacterSet_Get(self)

    value = property(Get, Set)

CDeviceCharacterSet_swigregister = _neoapi.CDeviceCharacterSet_swigregister
CDeviceCharacterSet_swigregister(CDeviceCharacterSet)

DeviceClockSelector_CameraLink = _neoapi.DeviceClockSelector_CameraLink
DeviceClockSelector_Sensor = _neoapi.DeviceClockSelector_Sensor
DeviceClockSelector_SensorDigitization = _neoapi.DeviceClockSelector_SensorDigitization
class CDeviceClockSelector(EnumerationFeature):
    """
    Selects the clock frequency to access from the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceClockSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceClockSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceClockSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceClockSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceClockSelector') -> "CDeviceClockSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceClockSelector object with the value set.
        """
        return _neoapi.CDeviceClockSelector_Set(self, value)

    def Get(self) -> "DeviceClockSelector":
        """
        Get the current value.
        Return: The DeviceClockSelector value.
        """
        return _neoapi.CDeviceClockSelector_Get(self)

    value = property(Get, Set)

CDeviceClockSelector_swigregister = _neoapi.CDeviceClockSelector_swigregister
CDeviceClockSelector_swigregister(CDeviceClockSelector)

DeviceFrontUARTSource_OpticControl = _neoapi.DeviceFrontUARTSource_OpticControl
DeviceFrontUARTSource_RS232 = _neoapi.DeviceFrontUARTSource_RS232
class CDeviceFrontUARTSource(EnumerationFeature):
    """
    Source control for frontside UART interface.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceFrontUARTSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceFrontUARTSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceFrontUARTSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceFrontUARTSource
    __del__ = lambda self: None

    def Set(self, value: 'DeviceFrontUARTSource') -> "CDeviceFrontUARTSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceFrontUARTSource object with the value set.
        """
        return _neoapi.CDeviceFrontUARTSource_Set(self, value)

    def Get(self) -> "DeviceFrontUARTSource":
        """
        Get the current value.
        Return: The DeviceFrontUARTSource value.
        """
        return _neoapi.CDeviceFrontUARTSource_Get(self)

    value = property(Get, Set)

CDeviceFrontUARTSource_swigregister = _neoapi.CDeviceFrontUARTSource_swigregister
CDeviceFrontUARTSource_swigregister(CDeviceFrontUARTSource)

DeviceLicense_Invalid = _neoapi.DeviceLicense_Invalid
DeviceLicense_Valid = _neoapi.DeviceLicense_Valid
class CDeviceLicense(EnumerationFeature):
    """
    Returns if the license at the device is valid or not for the license type, selected by the DeviceLicenseTypeSelector feature.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceLicense, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceLicense, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceLicense(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceLicense
    __del__ = lambda self: None

    def Set(self, value: 'DeviceLicense') -> "CDeviceLicense":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceLicense object with the value set.
        """
        return _neoapi.CDeviceLicense_Set(self, value)

    def Get(self) -> "DeviceLicense":
        """
        Get the current value.
        Return: The DeviceLicense value.
        """
        return _neoapi.CDeviceLicense_Get(self)

    value = property(Get, Set)

CDeviceLicense_swigregister = _neoapi.CDeviceLicense_swigregister
CDeviceLicense_swigregister(CDeviceLicense)

DeviceLicenseTypeSelector_eVARuntime = _neoapi.DeviceLicenseTypeSelector_eVARuntime
class CDeviceLicenseTypeSelector(EnumerationFeature):
    """
    Selects the available License types.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceLicenseTypeSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceLicenseTypeSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceLicenseTypeSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceLicenseTypeSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceLicenseTypeSelector') -> "CDeviceLicenseTypeSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceLicenseTypeSelector object with the value set.
        """
        return _neoapi.CDeviceLicenseTypeSelector_Set(self, value)

    def Get(self) -> "DeviceLicenseTypeSelector":
        """
        Get the current value.
        Return: The DeviceLicenseTypeSelector value.
        """
        return _neoapi.CDeviceLicenseTypeSelector_Get(self)

    value = property(Get, Set)

CDeviceLicenseTypeSelector_swigregister = _neoapi.CDeviceLicenseTypeSelector_swigregister
CDeviceLicenseTypeSelector_swigregister(CDeviceLicenseTypeSelector)

DeviceLinkHeartbeatMode_Off = _neoapi.DeviceLinkHeartbeatMode_Off
DeviceLinkHeartbeatMode_On = _neoapi.DeviceLinkHeartbeatMode_On
class CDeviceLinkHeartbeatMode(EnumerationFeature):
    """
    Activate or deactivate the Link's heartbeat.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceLinkHeartbeatMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceLinkHeartbeatMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceLinkHeartbeatMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceLinkHeartbeatMode
    __del__ = lambda self: None

    def Set(self, value: 'DeviceLinkHeartbeatMode') -> "CDeviceLinkHeartbeatMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceLinkHeartbeatMode object with the value set.
        """
        return _neoapi.CDeviceLinkHeartbeatMode_Set(self, value)

    def Get(self) -> "DeviceLinkHeartbeatMode":
        """
        Get the current value.
        Return: The DeviceLinkHeartbeatMode value.
        """
        return _neoapi.CDeviceLinkHeartbeatMode_Get(self)

    value = property(Get, Set)

CDeviceLinkHeartbeatMode_swigregister = _neoapi.CDeviceLinkHeartbeatMode_swigregister
CDeviceLinkHeartbeatMode_swigregister(CDeviceLinkHeartbeatMode)

DeviceLinkSelector_USB0 = _neoapi.DeviceLinkSelector_USB0
class CDeviceLinkSelector(EnumerationFeature):
    """
    Selects which Link of the device to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceLinkSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceLinkSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceLinkSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceLinkSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceLinkSelector') -> "CDeviceLinkSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceLinkSelector object with the value set.
        """
        return _neoapi.CDeviceLinkSelector_Set(self, value)

    def Get(self) -> "DeviceLinkSelector":
        """
        Get the current value.
        Return: The DeviceLinkSelector value.
        """
        return _neoapi.CDeviceLinkSelector_Get(self)

    value = property(Get, Set)

CDeviceLinkSelector_swigregister = _neoapi.CDeviceLinkSelector_swigregister
CDeviceLinkSelector_swigregister(CDeviceLinkSelector)

DeviceRegistersEndianness_Big = _neoapi.DeviceRegistersEndianness_Big
DeviceRegistersEndianness_Little = _neoapi.DeviceRegistersEndianness_Little
class CDeviceRegistersEndianness(EnumerationFeature):
    """
    Endianness of the registers of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceRegistersEndianness, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceRegistersEndianness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceRegistersEndianness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceRegistersEndianness
    __del__ = lambda self: None

    def Set(self, value: 'DeviceRegistersEndianness') -> "CDeviceRegistersEndianness":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceRegistersEndianness object with the value set.
        """
        return _neoapi.CDeviceRegistersEndianness_Set(self, value)

    def Get(self) -> "DeviceRegistersEndianness":
        """
        Get the current value.
        Return: The DeviceRegistersEndianness value.
        """
        return _neoapi.CDeviceRegistersEndianness_Get(self)

    value = property(Get, Set)

CDeviceRegistersEndianness_swigregister = _neoapi.CDeviceRegistersEndianness_swigregister
CDeviceRegistersEndianness_swigregister(CDeviceRegistersEndianness)

DeviceScanType_Areascan = _neoapi.DeviceScanType_Areascan
DeviceScanType_Areascan3D = _neoapi.DeviceScanType_Areascan3D
DeviceScanType_Linescan = _neoapi.DeviceScanType_Linescan
DeviceScanType_Linescan3D = _neoapi.DeviceScanType_Linescan3D
class CDeviceScanType(EnumerationFeature):
    """
    Scan type of the sensor of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceScanType, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceScanType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceScanType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceScanType
    __del__ = lambda self: None

    def Set(self, value: 'DeviceScanType') -> "CDeviceScanType":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceScanType object with the value set.
        """
        return _neoapi.CDeviceScanType_Set(self, value)

    def Get(self) -> "DeviceScanType":
        """
        Get the current value.
        Return: The DeviceScanType value.
        """
        return _neoapi.CDeviceScanType_Get(self)

    value = property(Get, Set)

CDeviceScanType_swigregister = _neoapi.CDeviceScanType_swigregister
CDeviceScanType_swigregister(CDeviceScanType)

DeviceSensorSelector_All = _neoapi.DeviceSensorSelector_All
DeviceSensorSelector_Left = _neoapi.DeviceSensorSelector_Left
DeviceSensorSelector_Right = _neoapi.DeviceSensorSelector_Right
class CDeviceSensorSelector(EnumerationFeature):
    """
    Selects which sensor is controlled by the various sensor specific features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceSensorSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceSensorSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceSensorSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceSensorSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceSensorSelector') -> "CDeviceSensorSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceSensorSelector object with the value set.
        """
        return _neoapi.CDeviceSensorSelector_Set(self, value)

    def Get(self) -> "DeviceSensorSelector":
        """
        Get the current value.
        Return: The DeviceSensorSelector value.
        """
        return _neoapi.CDeviceSensorSelector_Get(self)

    value = property(Get, Set)

CDeviceSensorSelector_swigregister = _neoapi.CDeviceSensorSelector_swigregister
CDeviceSensorSelector_swigregister(CDeviceSensorSelector)

DeviceSensorType_CCD = _neoapi.DeviceSensorType_CCD
DeviceSensorType_CMOS = _neoapi.DeviceSensorType_CMOS
class CDeviceSensorType(EnumerationFeature):
    """
    Specifies the type of the sensor.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceSensorType, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceSensorType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceSensorType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceSensorType
    __del__ = lambda self: None

    def Set(self, value: 'DeviceSensorType') -> "CDeviceSensorType":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceSensorType object with the value set.
        """
        return _neoapi.CDeviceSensorType_Set(self, value)

    def Get(self) -> "DeviceSensorType":
        """
        Get the current value.
        Return: The DeviceSensorType value.
        """
        return _neoapi.CDeviceSensorType_Get(self)

    value = property(Get, Set)

CDeviceSensorType_swigregister = _neoapi.CDeviceSensorType_swigregister
CDeviceSensorType_swigregister(CDeviceSensorType)

DeviceSensorVersion_CMOSIS_CMV2000_V2 = _neoapi.DeviceSensorVersion_CMOSIS_CMV2000_V2
DeviceSensorVersion_CMOSIS_CMV2000_V3 = _neoapi.DeviceSensorVersion_CMOSIS_CMV2000_V3
DeviceSensorVersion_CMOSIS_CMV4000_V2 = _neoapi.DeviceSensorVersion_CMOSIS_CMV4000_V2
DeviceSensorVersion_CMOSIS_CMV4000_V3 = _neoapi.DeviceSensorVersion_CMOSIS_CMV4000_V3
class CDeviceSensorVersion(EnumerationFeature):
    """
    Specifies the version of the CMOSIS sensor.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceSensorVersion, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceSensorVersion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceSensorVersion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceSensorVersion
    __del__ = lambda self: None

    def Set(self, value: 'DeviceSensorVersion') -> "CDeviceSensorVersion":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceSensorVersion object with the value set.
        """
        return _neoapi.CDeviceSensorVersion_Set(self, value)

    def Get(self) -> "DeviceSensorVersion":
        """
        Get the current value.
        Return: The DeviceSensorVersion value.
        """
        return _neoapi.CDeviceSensorVersion_Get(self)

    value = property(Get, Set)

CDeviceSensorVersion_swigregister = _neoapi.CDeviceSensorVersion_swigregister
CDeviceSensorVersion_swigregister(CDeviceSensorVersion)

DeviceSerialPortBaudRate_Baud115200 = _neoapi.DeviceSerialPortBaudRate_Baud115200
DeviceSerialPortBaudRate_Baud19200 = _neoapi.DeviceSerialPortBaudRate_Baud19200
DeviceSerialPortBaudRate_Baud230400 = _neoapi.DeviceSerialPortBaudRate_Baud230400
DeviceSerialPortBaudRate_Baud38400 = _neoapi.DeviceSerialPortBaudRate_Baud38400
DeviceSerialPortBaudRate_Baud460800 = _neoapi.DeviceSerialPortBaudRate_Baud460800
DeviceSerialPortBaudRate_Baud57600 = _neoapi.DeviceSerialPortBaudRate_Baud57600
DeviceSerialPortBaudRate_Baud921600 = _neoapi.DeviceSerialPortBaudRate_Baud921600
DeviceSerialPortBaudRate_Baud9600 = _neoapi.DeviceSerialPortBaudRate_Baud9600
class CDeviceSerialPortBaudRate(EnumerationFeature):
    """
    This feature controls the baud rate used by the selected serial port.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceSerialPortBaudRate, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceSerialPortBaudRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceSerialPortBaudRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceSerialPortBaudRate
    __del__ = lambda self: None

    def Set(self, value: 'DeviceSerialPortBaudRate') -> "CDeviceSerialPortBaudRate":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceSerialPortBaudRate object with the value set.
        """
        return _neoapi.CDeviceSerialPortBaudRate_Set(self, value)

    def Get(self) -> "DeviceSerialPortBaudRate":
        """
        Get the current value.
        Return: The DeviceSerialPortBaudRate value.
        """
        return _neoapi.CDeviceSerialPortBaudRate_Get(self)

    value = property(Get, Set)

CDeviceSerialPortBaudRate_swigregister = _neoapi.CDeviceSerialPortBaudRate_swigregister
CDeviceSerialPortBaudRate_swigregister(CDeviceSerialPortBaudRate)

DeviceSerialPortSelector_CameraLink = _neoapi.DeviceSerialPortSelector_CameraLink
class CDeviceSerialPortSelector(EnumerationFeature):
    """
    Selects which serial port of the device to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceSerialPortSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceSerialPortSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceSerialPortSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceSerialPortSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceSerialPortSelector') -> "CDeviceSerialPortSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceSerialPortSelector object with the value set.
        """
        return _neoapi.CDeviceSerialPortSelector_Set(self, value)

    def Get(self) -> "DeviceSerialPortSelector":
        """
        Get the current value.
        Return: The DeviceSerialPortSelector value.
        """
        return _neoapi.CDeviceSerialPortSelector_Get(self)

    value = property(Get, Set)

CDeviceSerialPortSelector_swigregister = _neoapi.CDeviceSerialPortSelector_swigregister
CDeviceSerialPortSelector_swigregister(CDeviceSerialPortSelector)

DeviceStreamChannelEndianness_Big = _neoapi.DeviceStreamChannelEndianness_Big
DeviceStreamChannelEndianness_Little = _neoapi.DeviceStreamChannelEndianness_Little
class CDeviceStreamChannelEndianness(EnumerationFeature):
    """
    Endianness of multi-byte pixel data for this stream.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceStreamChannelEndianness, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceStreamChannelEndianness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceStreamChannelEndianness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceStreamChannelEndianness
    __del__ = lambda self: None

    def Set(self, value: 'DeviceStreamChannelEndianness') -> "CDeviceStreamChannelEndianness":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceStreamChannelEndianness object with the value set.
        """
        return _neoapi.CDeviceStreamChannelEndianness_Set(self, value)

    def Get(self) -> "DeviceStreamChannelEndianness":
        """
        Get the current value.
        Return: The DeviceStreamChannelEndianness value.
        """
        return _neoapi.CDeviceStreamChannelEndianness_Get(self)

    value = property(Get, Set)

CDeviceStreamChannelEndianness_swigregister = _neoapi.CDeviceStreamChannelEndianness_swigregister
CDeviceStreamChannelEndianness_swigregister(CDeviceStreamChannelEndianness)

DeviceStreamChannelType_Receiver = _neoapi.DeviceStreamChannelType_Receiver
DeviceStreamChannelType_Transmitter = _neoapi.DeviceStreamChannelType_Transmitter
class CDeviceStreamChannelType(EnumerationFeature):
    """
    Reports the type of the stream channel.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceStreamChannelType, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceStreamChannelType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceStreamChannelType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceStreamChannelType
    __del__ = lambda self: None

    def Set(self, value: 'DeviceStreamChannelType') -> "CDeviceStreamChannelType":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceStreamChannelType object with the value set.
        """
        return _neoapi.CDeviceStreamChannelType_Set(self, value)

    def Get(self) -> "DeviceStreamChannelType":
        """
        Get the current value.
        Return: The DeviceStreamChannelType value.
        """
        return _neoapi.CDeviceStreamChannelType_Get(self)

    value = property(Get, Set)

CDeviceStreamChannelType_swigregister = _neoapi.CDeviceStreamChannelType_swigregister
CDeviceStreamChannelType_swigregister(CDeviceStreamChannelType)

DeviceTLType_CameraLink = _neoapi.DeviceTLType_CameraLink
DeviceTLType_CameraLinkHS = _neoapi.DeviceTLType_CameraLinkHS
DeviceTLType_CoaXPress = _neoapi.DeviceTLType_CoaXPress
DeviceTLType_Custom = _neoapi.DeviceTLType_Custom
DeviceTLType_GigEVision = _neoapi.DeviceTLType_GigEVision
DeviceTLType_USB3Vision = _neoapi.DeviceTLType_USB3Vision
class CDeviceTLType(EnumerationFeature):
    """
    Transport Layer type of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceTLType, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceTLType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceTLType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceTLType
    __del__ = lambda self: None

    def Set(self, value: 'DeviceTLType') -> "CDeviceTLType":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceTLType object with the value set.
        """
        return _neoapi.CDeviceTLType_Set(self, value)

    def Get(self) -> "DeviceTLType":
        """
        Get the current value.
        Return: The DeviceTLType value.
        """
        return _neoapi.CDeviceTLType_Get(self)

    value = property(Get, Set)

CDeviceTLType_swigregister = _neoapi.CDeviceTLType_swigregister
CDeviceTLType_swigregister(CDeviceTLType)

DeviceTapGeometry_Geometry_10X = _neoapi.DeviceTapGeometry_Geometry_10X
DeviceTapGeometry_Geometry_10X_1Y = _neoapi.DeviceTapGeometry_Geometry_10X_1Y
DeviceTapGeometry_Geometry_1X = _neoapi.DeviceTapGeometry_Geometry_1X
DeviceTapGeometry_Geometry_1X10 = _neoapi.DeviceTapGeometry_Geometry_1X10
DeviceTapGeometry_Geometry_1X10_1Y = _neoapi.DeviceTapGeometry_Geometry_1X10_1Y
DeviceTapGeometry_Geometry_1X2 = _neoapi.DeviceTapGeometry_Geometry_1X2
DeviceTapGeometry_Geometry_1X2_1Y = _neoapi.DeviceTapGeometry_Geometry_1X2_1Y
DeviceTapGeometry_Geometry_1X2_1Y2 = _neoapi.DeviceTapGeometry_Geometry_1X2_1Y2
DeviceTapGeometry_Geometry_1X2_2YE = _neoapi.DeviceTapGeometry_Geometry_1X2_2YE
DeviceTapGeometry_Geometry_1X3 = _neoapi.DeviceTapGeometry_Geometry_1X3
DeviceTapGeometry_Geometry_1X3_1Y = _neoapi.DeviceTapGeometry_Geometry_1X3_1Y
DeviceTapGeometry_Geometry_1X4 = _neoapi.DeviceTapGeometry_Geometry_1X4
DeviceTapGeometry_Geometry_1X4_1Y = _neoapi.DeviceTapGeometry_Geometry_1X4_1Y
DeviceTapGeometry_Geometry_1X8 = _neoapi.DeviceTapGeometry_Geometry_1X8
DeviceTapGeometry_Geometry_1X8_1Y = _neoapi.DeviceTapGeometry_Geometry_1X8_1Y
DeviceTapGeometry_Geometry_1X_1Y = _neoapi.DeviceTapGeometry_Geometry_1X_1Y
DeviceTapGeometry_Geometry_1X_1Y2 = _neoapi.DeviceTapGeometry_Geometry_1X_1Y2
DeviceTapGeometry_Geometry_1X_2YE = _neoapi.DeviceTapGeometry_Geometry_1X_2YE
DeviceTapGeometry_Geometry_2X = _neoapi.DeviceTapGeometry_Geometry_2X
DeviceTapGeometry_Geometry_2X2 = _neoapi.DeviceTapGeometry_Geometry_2X2
DeviceTapGeometry_Geometry_2X2E = _neoapi.DeviceTapGeometry_Geometry_2X2E
DeviceTapGeometry_Geometry_2X2E_1Y = _neoapi.DeviceTapGeometry_Geometry_2X2E_1Y
DeviceTapGeometry_Geometry_2X2E_2YE = _neoapi.DeviceTapGeometry_Geometry_2X2E_2YE
DeviceTapGeometry_Geometry_2X2M = _neoapi.DeviceTapGeometry_Geometry_2X2M
DeviceTapGeometry_Geometry_2X2M_1Y = _neoapi.DeviceTapGeometry_Geometry_2X2M_1Y
DeviceTapGeometry_Geometry_2X2_1Y = _neoapi.DeviceTapGeometry_Geometry_2X2_1Y
DeviceTapGeometry_Geometry_2XE = _neoapi.DeviceTapGeometry_Geometry_2XE
DeviceTapGeometry_Geometry_2XE_1Y = _neoapi.DeviceTapGeometry_Geometry_2XE_1Y
DeviceTapGeometry_Geometry_2XE_1Y2 = _neoapi.DeviceTapGeometry_Geometry_2XE_1Y2
DeviceTapGeometry_Geometry_2XE_2YE = _neoapi.DeviceTapGeometry_Geometry_2XE_2YE
DeviceTapGeometry_Geometry_2XM = _neoapi.DeviceTapGeometry_Geometry_2XM
DeviceTapGeometry_Geometry_2XM_1Y = _neoapi.DeviceTapGeometry_Geometry_2XM_1Y
DeviceTapGeometry_Geometry_2XM_1Y2 = _neoapi.DeviceTapGeometry_Geometry_2XM_1Y2
DeviceTapGeometry_Geometry_2XM_2YE = _neoapi.DeviceTapGeometry_Geometry_2XM_2YE
DeviceTapGeometry_Geometry_2X_1Y = _neoapi.DeviceTapGeometry_Geometry_2X_1Y
DeviceTapGeometry_Geometry_2X_1Y2 = _neoapi.DeviceTapGeometry_Geometry_2X_1Y2
DeviceTapGeometry_Geometry_2X_2YE = _neoapi.DeviceTapGeometry_Geometry_2X_2YE
DeviceTapGeometry_Geometry_3X = _neoapi.DeviceTapGeometry_Geometry_3X
DeviceTapGeometry_Geometry_3X_1Y = _neoapi.DeviceTapGeometry_Geometry_3X_1Y
DeviceTapGeometry_Geometry_4X = _neoapi.DeviceTapGeometry_Geometry_4X
DeviceTapGeometry_Geometry_4X2 = _neoapi.DeviceTapGeometry_Geometry_4X2
DeviceTapGeometry_Geometry_4X2E = _neoapi.DeviceTapGeometry_Geometry_4X2E
DeviceTapGeometry_Geometry_4X2E_1Y = _neoapi.DeviceTapGeometry_Geometry_4X2E_1Y
DeviceTapGeometry_Geometry_4X2_1Y = _neoapi.DeviceTapGeometry_Geometry_4X2_1Y
DeviceTapGeometry_Geometry_4X_1Y = _neoapi.DeviceTapGeometry_Geometry_4X_1Y
DeviceTapGeometry_Geometry_8X = _neoapi.DeviceTapGeometry_Geometry_8X
DeviceTapGeometry_Geometry_8X_1Y = _neoapi.DeviceTapGeometry_Geometry_8X_1Y
class CDeviceTapGeometry(EnumerationFeature):
    """
    This device tap geometry feature describes the geometrical properties characterizing the taps of a camera as presented at the output of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceTapGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceTapGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceTapGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceTapGeometry
    __del__ = lambda self: None

    def Set(self, value: 'DeviceTapGeometry') -> "CDeviceTapGeometry":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceTapGeometry object with the value set.
        """
        return _neoapi.CDeviceTapGeometry_Set(self, value)

    def Get(self) -> "DeviceTapGeometry":
        """
        Get the current value.
        Return: The DeviceTapGeometry value.
        """
        return _neoapi.CDeviceTapGeometry_Get(self)

    value = property(Get, Set)

CDeviceTapGeometry_swigregister = _neoapi.CDeviceTapGeometry_swigregister
CDeviceTapGeometry_swigregister(CDeviceTapGeometry)

DeviceTemperatureSelector_InHouse = _neoapi.DeviceTemperatureSelector_InHouse
DeviceTemperatureSelector_Mainboard = _neoapi.DeviceTemperatureSelector_Mainboard
DeviceTemperatureSelector_Sensor = _neoapi.DeviceTemperatureSelector_Sensor
class CDeviceTemperatureSelector(EnumerationFeature):
    """
    Selects the location within the device, where the temperature will be measured.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceTemperatureSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceTemperatureSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceTemperatureSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceTemperatureSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceTemperatureSelector') -> "CDeviceTemperatureSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceTemperatureSelector object with the value set.
        """
        return _neoapi.CDeviceTemperatureSelector_Set(self, value)

    def Get(self) -> "DeviceTemperatureSelector":
        """
        Get the current value.
        Return: The DeviceTemperatureSelector value.
        """
        return _neoapi.CDeviceTemperatureSelector_Get(self)

    value = property(Get, Set)

CDeviceTemperatureSelector_swigregister = _neoapi.CDeviceTemperatureSelector_swigregister
CDeviceTemperatureSelector_swigregister(CDeviceTemperatureSelector)

DeviceTemperatureStatus_Exceeded = _neoapi.DeviceTemperatureStatus_Exceeded
DeviceTemperatureStatus_High = _neoapi.DeviceTemperatureStatus_High
DeviceTemperatureStatus_Normal = _neoapi.DeviceTemperatureStatus_Normal
class CDeviceTemperatureStatus(EnumerationFeature):
    """
    Returns the current temperature status of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceTemperatureStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceTemperatureStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceTemperatureStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceTemperatureStatus
    __del__ = lambda self: None

    def Set(self, value: 'DeviceTemperatureStatus') -> "CDeviceTemperatureStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceTemperatureStatus object with the value set.
        """
        return _neoapi.CDeviceTemperatureStatus_Set(self, value)

    def Get(self) -> "DeviceTemperatureStatus":
        """
        Get the current value.
        Return: The DeviceTemperatureStatus value.
        """
        return _neoapi.CDeviceTemperatureStatus_Get(self)

    value = property(Get, Set)

CDeviceTemperatureStatus_swigregister = _neoapi.CDeviceTemperatureStatus_swigregister
CDeviceTemperatureStatus_swigregister(CDeviceTemperatureStatus)

DeviceTemperatureStatusTransitionSelector_ExceededToNormal = _neoapi.DeviceTemperatureStatusTransitionSelector_ExceededToNormal
DeviceTemperatureStatusTransitionSelector_HighToExceeded = _neoapi.DeviceTemperatureStatusTransitionSelector_HighToExceeded
DeviceTemperatureStatusTransitionSelector_NormalToHigh = _neoapi.DeviceTemperatureStatusTransitionSelector_NormalToHigh
class CDeviceTemperatureStatusTransitionSelector(EnumerationFeature):
    """
    Selects which temperature transition is controlled by the feature DeviceTemperatureStatusTransition.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceTemperatureStatusTransitionSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceTemperatureStatusTransitionSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceTemperatureStatusTransitionSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceTemperatureStatusTransitionSelector
    __del__ = lambda self: None

    def Set(self, value: 'DeviceTemperatureStatusTransitionSelector') -> "CDeviceTemperatureStatusTransitionSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceTemperatureStatusTransitionSelector object with the value set.
        """
        return _neoapi.CDeviceTemperatureStatusTransitionSelector_Set(self, value)

    def Get(self) -> "DeviceTemperatureStatusTransitionSelector":
        """
        Get the current value.
        Return: The DeviceTemperatureStatusTransitionSelector value.
        """
        return _neoapi.CDeviceTemperatureStatusTransitionSelector_Get(self)

    value = property(Get, Set)

CDeviceTemperatureStatusTransitionSelector_swigregister = _neoapi.CDeviceTemperatureStatusTransitionSelector_swigregister
CDeviceTemperatureStatusTransitionSelector_swigregister(CDeviceTemperatureStatusTransitionSelector)

DeviceType_Peripheral = _neoapi.DeviceType_Peripheral
DeviceType_Receiver = _neoapi.DeviceType_Receiver
DeviceType_Transceiver = _neoapi.DeviceType_Transceiver
DeviceType_Transmitter = _neoapi.DeviceType_Transmitter
class CDeviceType(EnumerationFeature):
    """
    Returns the device type.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDeviceType, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDeviceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CDeviceType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CDeviceType
    __del__ = lambda self: None

    def Set(self, value: 'DeviceType') -> "CDeviceType":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CDeviceType object with the value set.
        """
        return _neoapi.CDeviceType_Set(self, value)

    def Get(self) -> "DeviceType":
        """
        Get the current value.
        Return: The DeviceType value.
        """
        return _neoapi.CDeviceType_Get(self)

    value = property(Get, Set)

CDeviceType_swigregister = _neoapi.CDeviceType_swigregister
CDeviceType_swigregister(CDeviceType)

EventNotification_Off = _neoapi.EventNotification_Off
EventNotification_On = _neoapi.EventNotification_On
EventNotification_Once = _neoapi.EventNotification_Once
class CEventNotification(EnumerationFeature):
    """
    Activate or deactivate the notification to the host application of the occurrence of the selected Event.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventNotification, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventNotification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CEventNotification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CEventNotification
    __del__ = lambda self: None

    def Set(self, value: 'EventNotification') -> "CEventNotification":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CEventNotification object with the value set.
        """
        return _neoapi.CEventNotification_Set(self, value)

    def Get(self) -> "EventNotification":
        """
        Get the current value.
        Return: The EventNotification value.
        """
        return _neoapi.CEventNotification_Get(self)

    value = property(Get, Set)

CEventNotification_swigregister = _neoapi.CEventNotification_swigregister
CEventNotification_swigregister(CEventNotification)

EventSelector_AcquisitionEnd = _neoapi.EventSelector_AcquisitionEnd
EventSelector_AcquisitionError = _neoapi.EventSelector_AcquisitionError
EventSelector_AcquisitionStart = _neoapi.EventSelector_AcquisitionStart
EventSelector_AcquisitionTransferEnd = _neoapi.EventSelector_AcquisitionTransferEnd
EventSelector_AcquisitionTransferStart = _neoapi.EventSelector_AcquisitionTransferStart
EventSelector_AcquisitionTrigger = _neoapi.EventSelector_AcquisitionTrigger
EventSelector_AcquisitionTriggerMissed = _neoapi.EventSelector_AcquisitionTriggerMissed
EventSelector_Action1 = _neoapi.EventSelector_Action1
EventSelector_ActionLate = _neoapi.EventSelector_ActionLate
EventSelector_Counter0End = _neoapi.EventSelector_Counter0End
EventSelector_Counter0Start = _neoapi.EventSelector_Counter0Start
EventSelector_Counter1End = _neoapi.EventSelector_Counter1End
EventSelector_Counter1Start = _neoapi.EventSelector_Counter1Start
EventSelector_DeviceTemperatureStatusChanged = _neoapi.EventSelector_DeviceTemperatureStatusChanged
EventSelector_Encoder0Restarted = _neoapi.EventSelector_Encoder0Restarted
EventSelector_Encoder0Stopped = _neoapi.EventSelector_Encoder0Stopped
EventSelector_Encoder1Restarted = _neoapi.EventSelector_Encoder1Restarted
EventSelector_Encoder1Stopped = _neoapi.EventSelector_Encoder1Stopped
EventSelector_Error = _neoapi.EventSelector_Error
EventSelector_EventDiscarded = _neoapi.EventSelector_EventDiscarded
EventSelector_EventLost = _neoapi.EventSelector_EventLost
EventSelector_ExposureEnd = _neoapi.EventSelector_ExposureEnd
EventSelector_ExposureStart = _neoapi.EventSelector_ExposureStart
EventSelector_FrameBurstEnd = _neoapi.EventSelector_FrameBurstEnd
EventSelector_FrameBurstStart = _neoapi.EventSelector_FrameBurstStart
EventSelector_FrameEnd = _neoapi.EventSelector_FrameEnd
EventSelector_FrameStart = _neoapi.EventSelector_FrameStart
EventSelector_FrameTransferEnd = _neoapi.EventSelector_FrameTransferEnd
EventSelector_FrameTransferSkipped = _neoapi.EventSelector_FrameTransferSkipped
EventSelector_FrameTransferStart = _neoapi.EventSelector_FrameTransferStart
EventSelector_FrameTrigger = _neoapi.EventSelector_FrameTrigger
EventSelector_FrameTriggerMissed = _neoapi.EventSelector_FrameTriggerMissed
EventSelector_GigEVisionError = _neoapi.EventSelector_GigEVisionError
EventSelector_GigEVisionHeartbeatTimeOut = _neoapi.EventSelector_GigEVisionHeartbeatTimeOut
EventSelector_Line0AnyEdge = _neoapi.EventSelector_Line0AnyEdge
EventSelector_Line0FallingEdge = _neoapi.EventSelector_Line0FallingEdge
EventSelector_Line0RisingEdge = _neoapi.EventSelector_Line0RisingEdge
EventSelector_Line1AnyEdge = _neoapi.EventSelector_Line1AnyEdge
EventSelector_Line1FallingEdge = _neoapi.EventSelector_Line1FallingEdge
EventSelector_Line1RisingEdge = _neoapi.EventSelector_Line1RisingEdge
EventSelector_Line2FallingEdge = _neoapi.EventSelector_Line2FallingEdge
EventSelector_Line2RisingEdge = _neoapi.EventSelector_Line2RisingEdge
EventSelector_Line3FallingEdge = _neoapi.EventSelector_Line3FallingEdge
EventSelector_Line3RisingEdge = _neoapi.EventSelector_Line3RisingEdge
EventSelector_Line4FallingEdge = _neoapi.EventSelector_Line4FallingEdge
EventSelector_Line4RisingEdge = _neoapi.EventSelector_Line4RisingEdge
EventSelector_Line5FallingEdge = _neoapi.EventSelector_Line5FallingEdge
EventSelector_Line5RisingEdge = _neoapi.EventSelector_Line5RisingEdge
EventSelector_Line6FallingEdge = _neoapi.EventSelector_Line6FallingEdge
EventSelector_Line6RisingEdge = _neoapi.EventSelector_Line6RisingEdge
EventSelector_Line7FallingEdge = _neoapi.EventSelector_Line7FallingEdge
EventSelector_Line7RisingEdge = _neoapi.EventSelector_Line7RisingEdge
EventSelector_LineEnd = _neoapi.EventSelector_LineEnd
EventSelector_LineStart = _neoapi.EventSelector_LineStart
EventSelector_LineTrigger = _neoapi.EventSelector_LineTrigger
EventSelector_LineTriggerMissed = _neoapi.EventSelector_LineTriggerMissed
EventSelector_LinkSpeedChange = _neoapi.EventSelector_LinkSpeedChange
EventSelector_LinkTrigger0 = _neoapi.EventSelector_LinkTrigger0
EventSelector_LinkTrigger1 = _neoapi.EventSelector_LinkTrigger1
EventSelector_PhysicalConnection0Down = _neoapi.EventSelector_PhysicalConnection0Down
EventSelector_PhysicalConnection0Up = _neoapi.EventSelector_PhysicalConnection0Up
EventSelector_PhysicalConnection1Down = _neoapi.EventSelector_PhysicalConnection1Down
EventSelector_PhysicalConnection1Up = _neoapi.EventSelector_PhysicalConnection1Up
EventSelector_PrimaryApplicationSwitch = _neoapi.EventSelector_PrimaryApplicationSwitch
EventSelector_PtpServoStatusChanged = _neoapi.EventSelector_PtpServoStatusChanged
EventSelector_PtpStatusChanged = _neoapi.EventSelector_PtpStatusChanged
EventSelector_SequencerSetChange = _neoapi.EventSelector_SequencerSetChange
EventSelector_Stream0TransferBlockEnd = _neoapi.EventSelector_Stream0TransferBlockEnd
EventSelector_Stream0TransferBlockStart = _neoapi.EventSelector_Stream0TransferBlockStart
EventSelector_Stream0TransferBlockTrigger = _neoapi.EventSelector_Stream0TransferBlockTrigger
EventSelector_Stream0TransferBurstEnd = _neoapi.EventSelector_Stream0TransferBurstEnd
EventSelector_Stream0TransferBurstStart = _neoapi.EventSelector_Stream0TransferBurstStart
EventSelector_Stream0TransferEnd = _neoapi.EventSelector_Stream0TransferEnd
EventSelector_Stream0TransferOverflow = _neoapi.EventSelector_Stream0TransferOverflow
EventSelector_Stream0TransferPause = _neoapi.EventSelector_Stream0TransferPause
EventSelector_Stream0TransferResume = _neoapi.EventSelector_Stream0TransferResume
EventSelector_Stream0TransferStart = _neoapi.EventSelector_Stream0TransferStart
EventSelector_Test = _neoapi.EventSelector_Test
EventSelector_Timer0End = _neoapi.EventSelector_Timer0End
EventSelector_Timer0Start = _neoapi.EventSelector_Timer0Start
EventSelector_Timer1End = _neoapi.EventSelector_Timer1End
EventSelector_Timer1Start = _neoapi.EventSelector_Timer1Start
EventSelector_Timer2End = _neoapi.EventSelector_Timer2End
EventSelector_Timer3End = _neoapi.EventSelector_Timer3End
EventSelector_TransferBufferFull = _neoapi.EventSelector_TransferBufferFull
EventSelector_TransferBufferReady = _neoapi.EventSelector_TransferBufferReady
EventSelector_TriggerOverlapped = _neoapi.EventSelector_TriggerOverlapped
EventSelector_TriggerReady = _neoapi.EventSelector_TriggerReady
EventSelector_TriggerSkipped = _neoapi.EventSelector_TriggerSkipped
class CEventSelector(EnumerationFeature):
    """
    Selects which Event to signal to the host application.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEventSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEventSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CEventSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CEventSelector
    __del__ = lambda self: None

    def Set(self, value: 'EventSelector') -> "CEventSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CEventSelector object with the value set.
        """
        return _neoapi.CEventSelector_Set(self, value)

    def Get(self) -> "EventSelector":
        """
        Get the current value.
        Return: The EventSelector value.
        """
        return _neoapi.CEventSelector_Get(self)

    value = property(Get, Set)

CEventSelector_swigregister = _neoapi.CEventSelector_swigregister
CEventSelector_swigregister(CEventSelector)

ExposureAuto_Continuous = _neoapi.ExposureAuto_Continuous
ExposureAuto_Off = _neoapi.ExposureAuto_Off
ExposureAuto_Once = _neoapi.ExposureAuto_Once
class CExposureAuto(EnumerationFeature):
    """
    Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExposureAuto, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExposureAuto, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CExposureAuto(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CExposureAuto
    __del__ = lambda self: None

    def Set(self, value: 'ExposureAuto') -> "CExposureAuto":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CExposureAuto object with the value set.
        """
        return _neoapi.CExposureAuto_Set(self, value)

    def Get(self) -> "ExposureAuto":
        """
        Get the current value.
        Return: The ExposureAuto value.
        """
        return _neoapi.CExposureAuto_Get(self)

    value = property(Get, Set)

CExposureAuto_swigregister = _neoapi.CExposureAuto_swigregister
CExposureAuto_swigregister(CExposureAuto)

ExposureMode_Off = _neoapi.ExposureMode_Off
ExposureMode_Timed = _neoapi.ExposureMode_Timed
ExposureMode_TriggerControlled = _neoapi.ExposureMode_TriggerControlled
ExposureMode_TriggerWidth = _neoapi.ExposureMode_TriggerWidth
class CExposureMode(EnumerationFeature):
    """
    Sets the operation mode of the Exposure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExposureMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExposureMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CExposureMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CExposureMode
    __del__ = lambda self: None

    def Set(self, value: 'ExposureMode') -> "CExposureMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CExposureMode object with the value set.
        """
        return _neoapi.CExposureMode_Set(self, value)

    def Get(self) -> "ExposureMode":
        """
        Get the current value.
        Return: The ExposureMode value.
        """
        return _neoapi.CExposureMode_Get(self)

    value = property(Get, Set)

CExposureMode_swigregister = _neoapi.CExposureMode_swigregister
CExposureMode_swigregister(CExposureMode)

FocalLengthStatus_Busy = _neoapi.FocalLengthStatus_Busy
FocalLengthStatus_Error = _neoapi.FocalLengthStatus_Error
FocalLengthStatus_NotConnected = _neoapi.FocalLengthStatus_NotConnected
FocalLengthStatus_NotInitialized = _neoapi.FocalLengthStatus_NotInitialized
FocalLengthStatus_NotSupported = _neoapi.FocalLengthStatus_NotSupported
FocalLengthStatus_Ready = _neoapi.FocalLengthStatus_Ready
class CFocalLengthStatus(EnumerationFeature):
    """
    Reads the status of the focal length.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFocalLengthStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFocalLengthStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CFocalLengthStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CFocalLengthStatus
    __del__ = lambda self: None

    def Set(self, value: 'FocalLengthStatus') -> "CFocalLengthStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CFocalLengthStatus object with the value set.
        """
        return _neoapi.CFocalLengthStatus_Set(self, value)

    def Get(self) -> "FocalLengthStatus":
        """
        Get the current value.
        Return: The FocalLengthStatus value.
        """
        return _neoapi.CFocalLengthStatus_Get(self)

    value = property(Get, Set)

CFocalLengthStatus_swigregister = _neoapi.CFocalLengthStatus_swigregister
CFocalLengthStatus_swigregister(CFocalLengthStatus)

FocusStatus_Busy = _neoapi.FocusStatus_Busy
FocusStatus_Error = _neoapi.FocusStatus_Error
FocusStatus_NotConnected = _neoapi.FocusStatus_NotConnected
FocusStatus_NotInitialized = _neoapi.FocusStatus_NotInitialized
FocusStatus_NotSupported = _neoapi.FocusStatus_NotSupported
FocusStatus_Ready = _neoapi.FocusStatus_Ready
class CFocusStatus(EnumerationFeature):
    """
    Reads the status of the focus.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFocusStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFocusStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CFocusStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CFocusStatus
    __del__ = lambda self: None

    def Set(self, value: 'FocusStatus') -> "CFocusStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CFocusStatus object with the value set.
        """
        return _neoapi.CFocusStatus_Set(self, value)

    def Get(self) -> "FocusStatus":
        """
        Get the current value.
        Return: The FocusStatus value.
        """
        return _neoapi.CFocusStatus_Get(self)

    value = property(Get, Set)

CFocusStatus_swigregister = _neoapi.CFocusStatus_swigregister
CFocusStatus_swigregister(CFocusStatus)

GainAuto_Continuous = _neoapi.GainAuto_Continuous
GainAuto_Off = _neoapi.GainAuto_Off
GainAuto_Once = _neoapi.GainAuto_Once
class CGainAuto(EnumerationFeature):
    """
    Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGainAuto, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGainAuto, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGainAuto(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGainAuto
    __del__ = lambda self: None

    def Set(self, value: 'GainAuto') -> "CGainAuto":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGainAuto object with the value set.
        """
        return _neoapi.CGainAuto_Set(self, value)

    def Get(self) -> "GainAuto":
        """
        Get the current value.
        Return: The GainAuto value.
        """
        return _neoapi.CGainAuto_Get(self)

    value = property(Get, Set)

CGainAuto_swigregister = _neoapi.CGainAuto_swigregister
CGainAuto_swigregister(CGainAuto)

GainSelector_All = _neoapi.GainSelector_All
GainSelector_AnalogAll = _neoapi.GainSelector_AnalogAll
GainSelector_AnalogBlue = _neoapi.GainSelector_AnalogBlue
GainSelector_AnalogGreen = _neoapi.GainSelector_AnalogGreen
GainSelector_AnalogRed = _neoapi.GainSelector_AnalogRed
GainSelector_AnalogTap1 = _neoapi.GainSelector_AnalogTap1
GainSelector_AnalogTap2 = _neoapi.GainSelector_AnalogTap2
GainSelector_AnalogU = _neoapi.GainSelector_AnalogU
GainSelector_AnalogV = _neoapi.GainSelector_AnalogV
GainSelector_AnalogY = _neoapi.GainSelector_AnalogY
GainSelector_Blue = _neoapi.GainSelector_Blue
GainSelector_DigitalAll = _neoapi.GainSelector_DigitalAll
GainSelector_DigitalBlue = _neoapi.GainSelector_DigitalBlue
GainSelector_DigitalGreen = _neoapi.GainSelector_DigitalGreen
GainSelector_DigitalRed = _neoapi.GainSelector_DigitalRed
GainSelector_DigitalTap1 = _neoapi.GainSelector_DigitalTap1
GainSelector_DigitalTap2 = _neoapi.GainSelector_DigitalTap2
GainSelector_DigitalU = _neoapi.GainSelector_DigitalU
GainSelector_DigitalV = _neoapi.GainSelector_DigitalV
GainSelector_DigitalY = _neoapi.GainSelector_DigitalY
GainSelector_Green = _neoapi.GainSelector_Green
GainSelector_GreenBlue = _neoapi.GainSelector_GreenBlue
GainSelector_GreenRed = _neoapi.GainSelector_GreenRed
GainSelector_Red = _neoapi.GainSelector_Red
GainSelector_Tap1 = _neoapi.GainSelector_Tap1
GainSelector_Tap2 = _neoapi.GainSelector_Tap2
GainSelector_U = _neoapi.GainSelector_U
GainSelector_V = _neoapi.GainSelector_V
GainSelector_Y = _neoapi.GainSelector_Y
class CGainSelector(EnumerationFeature):
    """
    Selects which Gain is controlled by the various Gain features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGainSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGainSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGainSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGainSelector
    __del__ = lambda self: None

    def Set(self, value: 'GainSelector') -> "CGainSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGainSelector object with the value set.
        """
        return _neoapi.CGainSelector_Set(self, value)

    def Get(self) -> "GainSelector":
        """
        Get the current value.
        Return: The GainSelector value.
        """
        return _neoapi.CGainSelector_Get(self)

    value = property(Get, Set)

CGainSelector_swigregister = _neoapi.CGainSelector_swigregister
CGainSelector_swigregister(CGainSelector)

GevCCP_ControlAccess = _neoapi.GevCCP_ControlAccess
GevCCP_ControlAccessSwitchoverActive = _neoapi.GevCCP_ControlAccessSwitchoverActive
GevCCP_ExclusiveAccess = _neoapi.GevCCP_ExclusiveAccess
GevCCP_OpenAccess = _neoapi.GevCCP_OpenAccess
class CGevCCP(EnumerationFeature):
    """
    Controls the device access privilege of an application.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGevCCP, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGevCCP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGevCCP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGevCCP
    __del__ = lambda self: None

    def Set(self, value: 'GevCCP') -> "CGevCCP":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGevCCP object with the value set.
        """
        return _neoapi.CGevCCP_Set(self, value)

    def Get(self) -> "GevCCP":
        """
        Get the current value.
        Return: The GevCCP value.
        """
        return _neoapi.CGevCCP_Get(self)

    value = property(Get, Set)

CGevCCP_swigregister = _neoapi.CGevCCP_swigregister
CGevCCP_swigregister(CGevCCP)

GevGVCPExtendedStatusCodesSelector_Version1_1 = _neoapi.GevGVCPExtendedStatusCodesSelector_Version1_1
GevGVCPExtendedStatusCodesSelector_Version2_0 = _neoapi.GevGVCPExtendedStatusCodesSelector_Version2_0
class CGevGVCPExtendedStatusCodesSelector(EnumerationFeature):
    """
    Selects the GigE Vision version to control extended status codes for.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGevGVCPExtendedStatusCodesSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGevGVCPExtendedStatusCodesSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGevGVCPExtendedStatusCodesSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGevGVCPExtendedStatusCodesSelector
    __del__ = lambda self: None

    def Set(self, value: 'GevGVCPExtendedStatusCodesSelector') -> "CGevGVCPExtendedStatusCodesSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGevGVCPExtendedStatusCodesSelector object with the value set.
        """
        return _neoapi.CGevGVCPExtendedStatusCodesSelector_Set(self, value)

    def Get(self) -> "GevGVCPExtendedStatusCodesSelector":
        """
        Get the current value.
        Return: The GevGVCPExtendedStatusCodesSelector value.
        """
        return _neoapi.CGevGVCPExtendedStatusCodesSelector_Get(self)

    value = property(Get, Set)

CGevGVCPExtendedStatusCodesSelector_swigregister = _neoapi.CGevGVCPExtendedStatusCodesSelector_swigregister
CGevGVCPExtendedStatusCodesSelector_swigregister(CGevGVCPExtendedStatusCodesSelector)

GevIPConfigurationStatus_DHCP = _neoapi.GevIPConfigurationStatus_DHCP
GevIPConfigurationStatus_ForceIP = _neoapi.GevIPConfigurationStatus_ForceIP
GevIPConfigurationStatus_LLA = _neoapi.GevIPConfigurationStatus_LLA
GevIPConfigurationStatus_none = _neoapi.GevIPConfigurationStatus_none
GevIPConfigurationStatus_PersistentIP = _neoapi.GevIPConfigurationStatus_PersistentIP
class CGevIPConfigurationStatus(EnumerationFeature):
    """
    Reports the current IP configuration status.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGevIPConfigurationStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGevIPConfigurationStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGevIPConfigurationStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGevIPConfigurationStatus
    __del__ = lambda self: None

    def Set(self, value: 'GevIPConfigurationStatus') -> "CGevIPConfigurationStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGevIPConfigurationStatus object with the value set.
        """
        return _neoapi.CGevIPConfigurationStatus_Set(self, value)

    def Get(self) -> "GevIPConfigurationStatus":
        """
        Get the current value.
        Return: The GevIPConfigurationStatus value.
        """
        return _neoapi.CGevIPConfigurationStatus_Get(self)

    value = property(Get, Set)

CGevIPConfigurationStatus_swigregister = _neoapi.CGevIPConfigurationStatus_swigregister
CGevIPConfigurationStatus_swigregister(CGevIPConfigurationStatus)

GevSupportedOptionSelector_Action = _neoapi.GevSupportedOptionSelector_Action
GevSupportedOptionSelector_CCPApplicationSocket = _neoapi.GevSupportedOptionSelector_CCPApplicationSocket
GevSupportedOptionSelector_CommandsConcatenation = _neoapi.GevSupportedOptionSelector_CommandsConcatenation
GevSupportedOptionSelector_DiscoveryAckDelay = _neoapi.GevSupportedOptionSelector_DiscoveryAckDelay
GevSupportedOptionSelector_DiscoveryAckDelayWritable = _neoapi.GevSupportedOptionSelector_DiscoveryAckDelayWritable
GevSupportedOptionSelector_DynamicLAG = _neoapi.GevSupportedOptionSelector_DynamicLAG
GevSupportedOptionSelector_Event = _neoapi.GevSupportedOptionSelector_Event
GevSupportedOptionSelector_EventData = _neoapi.GevSupportedOptionSelector_EventData
GevSupportedOptionSelector_ExtendedStatusCodes = _neoapi.GevSupportedOptionSelector_ExtendedStatusCodes
GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0 = _neoapi.GevSupportedOptionSelector_ExtendedStatusCodesVersion2_0
GevSupportedOptionSelector_HeartbeatDisable = _neoapi.GevSupportedOptionSelector_HeartbeatDisable
GevSupportedOptionSelector_IEEE1588 = _neoapi.GevSupportedOptionSelector_IEEE1588
GevSupportedOptionSelector_IPConfigurationDHCP = _neoapi.GevSupportedOptionSelector_IPConfigurationDHCP
GevSupportedOptionSelector_IPConfigurationLLA = _neoapi.GevSupportedOptionSelector_IPConfigurationLLA
GevSupportedOptionSelector_IPConfigurationPersistentIP = _neoapi.GevSupportedOptionSelector_IPConfigurationPersistentIP
GevSupportedOptionSelector_LinkSpeed = _neoapi.GevSupportedOptionSelector_LinkSpeed
GevSupportedOptionSelector_ManifestTable = _neoapi.GevSupportedOptionSelector_ManifestTable
GevSupportedOptionSelector_MessageChannelSourceSocket = _neoapi.GevSupportedOptionSelector_MessageChannelSourceSocket
GevSupportedOptionSelector_MultiLink = _neoapi.GevSupportedOptionSelector_MultiLink
GevSupportedOptionSelector_PAUSEFrameGeneration = _neoapi.GevSupportedOptionSelector_PAUSEFrameGeneration
GevSupportedOptionSelector_PAUSEFrameReception = _neoapi.GevSupportedOptionSelector_PAUSEFrameReception
GevSupportedOptionSelector_PacketResend = _neoapi.GevSupportedOptionSelector_PacketResend
GevSupportedOptionSelector_PendingAck = _neoapi.GevSupportedOptionSelector_PendingAck
GevSupportedOptionSelector_PrimaryApplicationSwitchover = _neoapi.GevSupportedOptionSelector_PrimaryApplicationSwitchover
GevSupportedOptionSelector_Ptp = _neoapi.GevSupportedOptionSelector_Ptp
GevSupportedOptionSelector_ScheduledAction = _neoapi.GevSupportedOptionSelector_ScheduledAction
GevSupportedOptionSelector_SerialNumber = _neoapi.GevSupportedOptionSelector_SerialNumber
GevSupportedOptionSelector_SingleLink = _neoapi.GevSupportedOptionSelector_SingleLink
GevSupportedOptionSelector_StandardIDMode = _neoapi.GevSupportedOptionSelector_StandardIDMode
GevSupportedOptionSelector_StaticLAG = _neoapi.GevSupportedOptionSelector_StaticLAG
GevSupportedOptionSelector_StreamChannel0AllInTransmission = _neoapi.GevSupportedOptionSelector_StreamChannel0AllInTransmission
GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian = _neoapi.GevSupportedOptionSelector_StreamChannel0BigAndLittleEndian
GevSupportedOptionSelector_StreamChannel0ExtendedChunkData = _neoapi.GevSupportedOptionSelector_StreamChannel0ExtendedChunkData
GevSupportedOptionSelector_StreamChannel0IPReassembly = _neoapi.GevSupportedOptionSelector_StreamChannel0IPReassembly
GevSupportedOptionSelector_StreamChannel0MultiZone = _neoapi.GevSupportedOptionSelector_StreamChannel0MultiZone
GevSupportedOptionSelector_StreamChannel0PacketResendDestination = _neoapi.GevSupportedOptionSelector_StreamChannel0PacketResendDestination
GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming = _neoapi.GevSupportedOptionSelector_StreamChannel0UnconditionalStreaming
GevSupportedOptionSelector_StreamChannel1AllInTransmission = _neoapi.GevSupportedOptionSelector_StreamChannel1AllInTransmission
GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian = _neoapi.GevSupportedOptionSelector_StreamChannel1BigAndLittleEndian
GevSupportedOptionSelector_StreamChannel1ExtendedChunkData = _neoapi.GevSupportedOptionSelector_StreamChannel1ExtendedChunkData
GevSupportedOptionSelector_StreamChannel1IPReassembly = _neoapi.GevSupportedOptionSelector_StreamChannel1IPReassembly
GevSupportedOptionSelector_StreamChannel1MultiZone = _neoapi.GevSupportedOptionSelector_StreamChannel1MultiZone
GevSupportedOptionSelector_StreamChannel1PacketResendDestination = _neoapi.GevSupportedOptionSelector_StreamChannel1PacketResendDestination
GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming = _neoapi.GevSupportedOptionSelector_StreamChannel1UnconditionalStreaming
GevSupportedOptionSelector_StreamChannel2AllInTransmission = _neoapi.GevSupportedOptionSelector_StreamChannel2AllInTransmission
GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian = _neoapi.GevSupportedOptionSelector_StreamChannel2BigAndLittleEndian
GevSupportedOptionSelector_StreamChannel2ExtendedChunkData = _neoapi.GevSupportedOptionSelector_StreamChannel2ExtendedChunkData
GevSupportedOptionSelector_StreamChannel2IPReassembly = _neoapi.GevSupportedOptionSelector_StreamChannel2IPReassembly
GevSupportedOptionSelector_StreamChannel2MultiZone = _neoapi.GevSupportedOptionSelector_StreamChannel2MultiZone
GevSupportedOptionSelector_StreamChannel2PacketResendDestination = _neoapi.GevSupportedOptionSelector_StreamChannel2PacketResendDestination
GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming = _neoapi.GevSupportedOptionSelector_StreamChannel2UnconditionalStreaming
GevSupportedOptionSelector_StreamChannelSourceSocket = _neoapi.GevSupportedOptionSelector_StreamChannelSourceSocket
GevSupportedOptionSelector_TestData = _neoapi.GevSupportedOptionSelector_TestData
GevSupportedOptionSelector_UnconditionalAction = _neoapi.GevSupportedOptionSelector_UnconditionalAction
GevSupportedOptionSelector_UserDefinedName = _neoapi.GevSupportedOptionSelector_UserDefinedName
GevSupportedOptionSelector_WriteMem = _neoapi.GevSupportedOptionSelector_WriteMem
class CGevSupportedOptionSelector(EnumerationFeature):
    """
    Selects the GEV option to interrogate for existing support.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGevSupportedOptionSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGevSupportedOptionSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CGevSupportedOptionSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CGevSupportedOptionSelector
    __del__ = lambda self: None

    def Set(self, value: 'GevSupportedOptionSelector') -> "CGevSupportedOptionSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CGevSupportedOptionSelector object with the value set.
        """
        return _neoapi.CGevSupportedOptionSelector_Set(self, value)

    def Get(self) -> "GevSupportedOptionSelector":
        """
        Get the current value.
        Return: The GevSupportedOptionSelector value.
        """
        return _neoapi.CGevSupportedOptionSelector_Get(self)

    value = property(Get, Set)

CGevSupportedOptionSelector_swigregister = _neoapi.CGevSupportedOptionSelector_swigregister
CGevSupportedOptionSelector_swigregister(CGevSupportedOptionSelector)

HDRGainRatioSelector_Gain12_0dB = _neoapi.HDRGainRatioSelector_Gain12_0dB
HDRGainRatioSelector_Gain2_5dB = _neoapi.HDRGainRatioSelector_Gain2_5dB
HDRGainRatioSelector_Gain3_5dB = _neoapi.HDRGainRatioSelector_Gain3_5dB
HDRGainRatioSelector_Gain6_0dB = _neoapi.HDRGainRatioSelector_Gain6_0dB
HDRGainRatioSelector_Gain9_5dB = _neoapi.HDRGainRatioSelector_Gain9_5dB
HDRGainRatioSelector_Off = _neoapi.HDRGainRatioSelector_Off
class CHDRGainRatioSelector(EnumerationFeature):
    """
    Selects the gain ratio for HDR mode.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRGainRatioSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRGainRatioSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CHDRGainRatioSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CHDRGainRatioSelector
    __del__ = lambda self: None

    def Set(self, value: 'HDRGainRatioSelector') -> "CHDRGainRatioSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CHDRGainRatioSelector object with the value set.
        """
        return _neoapi.CHDRGainRatioSelector_Set(self, value)

    def Get(self) -> "HDRGainRatioSelector":
        """
        Get the current value.
        Return: The HDRGainRatioSelector value.
        """
        return _neoapi.CHDRGainRatioSelector_Get(self)

    value = property(Get, Set)

CHDRGainRatioSelector_swigregister = _neoapi.CHDRGainRatioSelector_swigregister
CHDRGainRatioSelector_swigregister(CHDRGainRatioSelector)

HDRTonemappingCurvePresetSelector_Preset1 = _neoapi.HDRTonemappingCurvePresetSelector_Preset1
HDRTonemappingCurvePresetSelector_Preset2 = _neoapi.HDRTonemappingCurvePresetSelector_Preset2
HDRTonemappingCurvePresetSelector_Preset3 = _neoapi.HDRTonemappingCurvePresetSelector_Preset3
class CHDRTonemappingCurvePresetSelector(EnumerationFeature):
    """
    Selects the predefined transfer curve for global tone-mapping of the calculated HDR image.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRTonemappingCurvePresetSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRTonemappingCurvePresetSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CHDRTonemappingCurvePresetSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CHDRTonemappingCurvePresetSelector
    __del__ = lambda self: None

    def Set(self, value: 'HDRTonemappingCurvePresetSelector') -> "CHDRTonemappingCurvePresetSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CHDRTonemappingCurvePresetSelector object with the value set.
        """
        return _neoapi.CHDRTonemappingCurvePresetSelector_Set(self, value)

    def Get(self) -> "HDRTonemappingCurvePresetSelector":
        """
        Get the current value.
        Return: The HDRTonemappingCurvePresetSelector value.
        """
        return _neoapi.CHDRTonemappingCurvePresetSelector_Get(self)

    value = property(Get, Set)

CHDRTonemappingCurvePresetSelector_swigregister = _neoapi.CHDRTonemappingCurvePresetSelector_swigregister
CHDRTonemappingCurvePresetSelector_swigregister(CHDRTonemappingCurvePresetSelector)

ImageCompressionJPEGFormatOption_BaselineOptimized = _neoapi.ImageCompressionJPEGFormatOption_BaselineOptimized
ImageCompressionJPEGFormatOption_BaselineStandard = _neoapi.ImageCompressionJPEGFormatOption_BaselineStandard
ImageCompressionJPEGFormatOption_Lossless = _neoapi.ImageCompressionJPEGFormatOption_Lossless
ImageCompressionJPEGFormatOption_Progressive = _neoapi.ImageCompressionJPEGFormatOption_Progressive
class CImageCompressionJPEGFormatOption(EnumerationFeature):
    """
    When JPEG is selected as the compression format, a device might optionally offer better control over JPEG-specific options through this feature.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImageCompressionJPEGFormatOption, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImageCompressionJPEGFormatOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CImageCompressionJPEGFormatOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CImageCompressionJPEGFormatOption
    __del__ = lambda self: None

    def Set(self, value: 'ImageCompressionJPEGFormatOption') -> "CImageCompressionJPEGFormatOption":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CImageCompressionJPEGFormatOption object with the value set.
        """
        return _neoapi.CImageCompressionJPEGFormatOption_Set(self, value)

    def Get(self) -> "ImageCompressionJPEGFormatOption":
        """
        Get the current value.
        Return: The ImageCompressionJPEGFormatOption value.
        """
        return _neoapi.CImageCompressionJPEGFormatOption_Get(self)

    value = property(Get, Set)

CImageCompressionJPEGFormatOption_swigregister = _neoapi.CImageCompressionJPEGFormatOption_swigregister
CImageCompressionJPEGFormatOption_swigregister(CImageCompressionJPEGFormatOption)

ImageCompressionMode_H264 = _neoapi.ImageCompressionMode_H264
ImageCompressionMode_JPEG = _neoapi.ImageCompressionMode_JPEG
ImageCompressionMode_JPEG2000 = _neoapi.ImageCompressionMode_JPEG2000
ImageCompressionMode_Off = _neoapi.ImageCompressionMode_Off
class CImageCompressionMode(EnumerationFeature):
    """
    Enable a specific image compression mode as the base mode for image transfer. Optionally, chunk data can be appended to the compressed image.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImageCompressionMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImageCompressionMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CImageCompressionMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CImageCompressionMode
    __del__ = lambda self: None

    def Set(self, value: 'ImageCompressionMode') -> "CImageCompressionMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CImageCompressionMode object with the value set.
        """
        return _neoapi.CImageCompressionMode_Set(self, value)

    def Get(self) -> "ImageCompressionMode":
        """
        Get the current value.
        Return: The ImageCompressionMode value.
        """
        return _neoapi.CImageCompressionMode_Get(self)

    value = property(Get, Set)

CImageCompressionMode_swigregister = _neoapi.CImageCompressionMode_swigregister
CImageCompressionMode_swigregister(CImageCompressionMode)

ImageCompressionRateOption_FixBitrate = _neoapi.ImageCompressionRateOption_FixBitrate
ImageCompressionRateOption_FixQuality = _neoapi.ImageCompressionRateOption_FixQuality
class CImageCompressionRateOption(EnumerationFeature):
    """
    Two rate controlling options are offered: fixed bit rate or fixed quality. The exact implementation to achieve one or the other is vendor-specific.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImageCompressionRateOption, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImageCompressionRateOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CImageCompressionRateOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CImageCompressionRateOption
    __del__ = lambda self: None

    def Set(self, value: 'ImageCompressionRateOption') -> "CImageCompressionRateOption":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CImageCompressionRateOption object with the value set.
        """
        return _neoapi.CImageCompressionRateOption_Set(self, value)

    def Get(self) -> "ImageCompressionRateOption":
        """
        Get the current value.
        Return: The ImageCompressionRateOption value.
        """
        return _neoapi.CImageCompressionRateOption_Get(self)

    value = property(Get, Set)

CImageCompressionRateOption_swigregister = _neoapi.CImageCompressionRateOption_swigregister
CImageCompressionRateOption_swigregister(CImageCompressionRateOption)

InterfaceSpeedMode_Ethernet100Mbps = _neoapi.InterfaceSpeedMode_Ethernet100Mbps
InterfaceSpeedMode_Ethernet10Gbps = _neoapi.InterfaceSpeedMode_Ethernet10Gbps
InterfaceSpeedMode_Ethernet1Gbps = _neoapi.InterfaceSpeedMode_Ethernet1Gbps
InterfaceSpeedMode_Ethernet2_5Gbps = _neoapi.InterfaceSpeedMode_Ethernet2_5Gbps
InterfaceSpeedMode_Ethernet5Gbps = _neoapi.InterfaceSpeedMode_Ethernet5Gbps
InterfaceSpeedMode_FullSpeed = _neoapi.InterfaceSpeedMode_FullSpeed
InterfaceSpeedMode_HighSpeed = _neoapi.InterfaceSpeedMode_HighSpeed
InterfaceSpeedMode_LowSpeed = _neoapi.InterfaceSpeedMode_LowSpeed
InterfaceSpeedMode_SuperSpeed = _neoapi.InterfaceSpeedMode_SuperSpeed
class CInterfaceSpeedMode(EnumerationFeature):
    """
    Returns the interface speed mode as string.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CInterfaceSpeedMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CInterfaceSpeedMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CInterfaceSpeedMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CInterfaceSpeedMode
    __del__ = lambda self: None

    def Set(self, value: 'InterfaceSpeedMode') -> "CInterfaceSpeedMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CInterfaceSpeedMode object with the value set.
        """
        return _neoapi.CInterfaceSpeedMode_Set(self, value)

    def Get(self) -> "InterfaceSpeedMode":
        """
        Get the current value.
        Return: The InterfaceSpeedMode value.
        """
        return _neoapi.CInterfaceSpeedMode_Get(self)

    value = property(Get, Set)

CInterfaceSpeedMode_swigregister = _neoapi.CInterfaceSpeedMode_swigregister
CInterfaceSpeedMode_swigregister(CInterfaceSpeedMode)

LUTContent_Gamma = _neoapi.LUTContent_Gamma
LUTContent_UserdefinedLUT = _neoapi.LUTContent_UserdefinedLUT
class CLUTContent(EnumerationFeature):
    """
    Specifies the content of the selected LUT.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLUTContent, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLUTContent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLUTContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLUTContent
    __del__ = lambda self: None

    def Set(self, value: 'LUTContent') -> "CLUTContent":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLUTContent object with the value set.
        """
        return _neoapi.CLUTContent_Set(self, value)

    def Get(self) -> "LUTContent":
        """
        Get the current value.
        Return: The LUTContent value.
        """
        return _neoapi.CLUTContent_Get(self)

    value = property(Get, Set)

CLUTContent_swigregister = _neoapi.CLUTContent_swigregister
CLUTContent_swigregister(CLUTContent)

LUTSelector_Blue = _neoapi.LUTSelector_Blue
LUTSelector_Green = _neoapi.LUTSelector_Green
LUTSelector_Luminance = _neoapi.LUTSelector_Luminance
LUTSelector_Red = _neoapi.LUTSelector_Red
class CLUTSelector(EnumerationFeature):
    """
    Selects which LUT to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLUTSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLUTSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLUTSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLUTSelector
    __del__ = lambda self: None

    def Set(self, value: 'LUTSelector') -> "CLUTSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLUTSelector object with the value set.
        """
        return _neoapi.CLUTSelector_Set(self, value)

    def Get(self) -> "LUTSelector":
        """
        Get the current value.
        Return: The LUTSelector value.
        """
        return _neoapi.CLUTSelector_Get(self)

    value = property(Get, Set)

CLUTSelector_swigregister = _neoapi.CLUTSelector_swigregister
CLUTSelector_swigregister(CLUTSelector)

LineFormat_LVDS = _neoapi.LineFormat_LVDS
LineFormat_NoConnect = _neoapi.LineFormat_NoConnect
LineFormat_OpenDrain = _neoapi.LineFormat_OpenDrain
LineFormat_OpenSource = _neoapi.LineFormat_OpenSource
LineFormat_OptoCoupled = _neoapi.LineFormat_OptoCoupled
LineFormat_PushPull = _neoapi.LineFormat_PushPull
LineFormat_RS422 = _neoapi.LineFormat_RS422
LineFormat_TTL = _neoapi.LineFormat_TTL
LineFormat_TriState = _neoapi.LineFormat_TriState
class CLineFormat(EnumerationFeature):
    """
    Controls the current electrical format of the selected physical input or output Line.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLineFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLineFormat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLineFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLineFormat
    __del__ = lambda self: None

    def Set(self, value: 'LineFormat') -> "CLineFormat":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLineFormat object with the value set.
        """
        return _neoapi.CLineFormat_Set(self, value)

    def Get(self) -> "LineFormat":
        """
        Get the current value.
        Return: The LineFormat value.
        """
        return _neoapi.CLineFormat_Get(self)

    value = property(Get, Set)

CLineFormat_swigregister = _neoapi.CLineFormat_swigregister
CLineFormat_swigregister(CLineFormat)

LineMode_Input = _neoapi.LineMode_Input
LineMode_Output = _neoapi.LineMode_Output
class CLineMode(EnumerationFeature):
    """
    Controls if the physical Line is used to Input or Output a signal.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLineMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLineMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLineMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLineMode
    __del__ = lambda self: None

    def Set(self, value: 'LineMode') -> "CLineMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLineMode object with the value set.
        """
        return _neoapi.CLineMode_Set(self, value)

    def Get(self) -> "LineMode":
        """
        Get the current value.
        Return: The LineMode value.
        """
        return _neoapi.CLineMode_Get(self)

    value = property(Get, Set)

CLineMode_swigregister = _neoapi.CLineMode_swigregister
CLineMode_swigregister(CLineMode)

LinePWMConfigurationMode_Off = _neoapi.LinePWMConfigurationMode_Off
LinePWMConfigurationMode_On = _neoapi.LinePWMConfigurationMode_On
class CLinePWMConfigurationMode(EnumerationFeature):
    """
    Enables the line PWM configuration mode.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinePWMConfigurationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLinePWMConfigurationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLinePWMConfigurationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLinePWMConfigurationMode
    __del__ = lambda self: None

    def Set(self, value: 'LinePWMConfigurationMode') -> "CLinePWMConfigurationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLinePWMConfigurationMode object with the value set.
        """
        return _neoapi.CLinePWMConfigurationMode_Set(self, value)

    def Get(self) -> "LinePWMConfigurationMode":
        """
        Get the current value.
        Return: The LinePWMConfigurationMode value.
        """
        return _neoapi.CLinePWMConfigurationMode_Get(self)

    value = property(Get, Set)

CLinePWMConfigurationMode_swigregister = _neoapi.CLinePWMConfigurationMode_swigregister
CLinePWMConfigurationMode_swigregister(CLinePWMConfigurationMode)

LinePWMMode_FixedFrequency = _neoapi.LinePWMMode_FixedFrequency
LinePWMMode_Off = _neoapi.LinePWMMode_Off
LinePWMMode_OnePulse = _neoapi.LinePWMMode_OnePulse
class CLinePWMMode(EnumerationFeature):
    """
    Enables the line PWM configuration mode.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinePWMMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLinePWMMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLinePWMMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLinePWMMode
    __del__ = lambda self: None

    def Set(self, value: 'LinePWMMode') -> "CLinePWMMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLinePWMMode object with the value set.
        """
        return _neoapi.CLinePWMMode_Set(self, value)

    def Get(self) -> "LinePWMMode":
        """
        Get the current value.
        Return: The LinePWMMode value.
        """
        return _neoapi.CLinePWMMode_Get(self)

    value = property(Get, Set)

CLinePWMMode_swigregister = _neoapi.CLinePWMMode_swigregister
CLinePWMMode_swigregister(CLinePWMMode)

LineSelector_CC1 = _neoapi.LineSelector_CC1
LineSelector_CC2 = _neoapi.LineSelector_CC2
LineSelector_CC3 = _neoapi.LineSelector_CC3
LineSelector_CC4 = _neoapi.LineSelector_CC4
LineSelector_Line0 = _neoapi.LineSelector_Line0
LineSelector_Line1 = _neoapi.LineSelector_Line1
LineSelector_Line2 = _neoapi.LineSelector_Line2
LineSelector_Line3 = _neoapi.LineSelector_Line3
LineSelector_Line4 = _neoapi.LineSelector_Line4
LineSelector_Line5 = _neoapi.LineSelector_Line5
LineSelector_Line6 = _neoapi.LineSelector_Line6
LineSelector_Line7 = _neoapi.LineSelector_Line7
LineSelector_LinkTrigger0 = _neoapi.LineSelector_LinkTrigger0
LineSelector_LinkTrigger1 = _neoapi.LineSelector_LinkTrigger1
LineSelector_LinkTrigger2 = _neoapi.LineSelector_LinkTrigger2
class CLineSelector(EnumerationFeature):
    """
    Selects the physical line (or pin) of the external device connector or the virtual line of the Transport Layer to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLineSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLineSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLineSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLineSelector
    __del__ = lambda self: None

    def Set(self, value: 'LineSelector') -> "CLineSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLineSelector object with the value set.
        """
        return _neoapi.CLineSelector_Set(self, value)

    def Get(self) -> "LineSelector":
        """
        Get the current value.
        Return: The LineSelector value.
        """
        return _neoapi.CLineSelector_Get(self)

    value = property(Get, Set)

CLineSelector_swigregister = _neoapi.CLineSelector_swigregister
CLineSelector_swigregister(CLineSelector)

LineSource_AcquisitionActive = _neoapi.LineSource_AcquisitionActive
LineSource_AcquisitionTrigger = _neoapi.LineSource_AcquisitionTrigger
LineSource_AcquisitionTriggerMissed = _neoapi.LineSource_AcquisitionTriggerMissed
LineSource_AcquisitionTriggerWait = _neoapi.LineSource_AcquisitionTriggerWait
LineSource_Counter0Active = _neoapi.LineSource_Counter0Active
LineSource_Counter1Active = _neoapi.LineSource_Counter1Active
LineSource_Counter2Active = _neoapi.LineSource_Counter2Active
LineSource_Encoder0 = _neoapi.LineSource_Encoder0
LineSource_Encoder1 = _neoapi.LineSource_Encoder1
LineSource_Encoder2 = _neoapi.LineSource_Encoder2
LineSource_ExposureActive = _neoapi.LineSource_ExposureActive
LineSource_FrameActive = _neoapi.LineSource_FrameActive
LineSource_FrameTrigger = _neoapi.LineSource_FrameTrigger
LineSource_FrameTriggerMissed = _neoapi.LineSource_FrameTriggerMissed
LineSource_FrameTriggerWait = _neoapi.LineSource_FrameTriggerWait
LineSource_Line0 = _neoapi.LineSource_Line0
LineSource_Line1 = _neoapi.LineSource_Line1
LineSource_LineActive = _neoapi.LineSource_LineActive
LineSource_LineTrigger = _neoapi.LineSource_LineTrigger
LineSource_LineTriggerMissed = _neoapi.LineSource_LineTriggerMissed
LineSource_LineTriggerWait = _neoapi.LineSource_LineTriggerWait
LineSource_LogicBlock0 = _neoapi.LineSource_LogicBlock0
LineSource_LogicBlock1 = _neoapi.LineSource_LogicBlock1
LineSource_LogicBlock2 = _neoapi.LineSource_LogicBlock2
LineSource_Off = _neoapi.LineSource_Off
LineSource_ReadoutActive = _neoapi.LineSource_ReadoutActive
LineSource_SequencerOutput0 = _neoapi.LineSource_SequencerOutput0
LineSource_SequencerOutput1 = _neoapi.LineSource_SequencerOutput1
LineSource_SequencerOutput2 = _neoapi.LineSource_SequencerOutput2
LineSource_SoftwareSignal0 = _neoapi.LineSource_SoftwareSignal0
LineSource_SoftwareSignal1 = _neoapi.LineSource_SoftwareSignal1
LineSource_SoftwareSignal2 = _neoapi.LineSource_SoftwareSignal2
LineSource_Stream0TransferActive = _neoapi.LineSource_Stream0TransferActive
LineSource_Stream0TransferOverflow = _neoapi.LineSource_Stream0TransferOverflow
LineSource_Stream0TransferPaused = _neoapi.LineSource_Stream0TransferPaused
LineSource_Stream0TransferStopped = _neoapi.LineSource_Stream0TransferStopped
LineSource_Stream0TransferStopping = _neoapi.LineSource_Stream0TransferStopping
LineSource_Stream1TransferActive = _neoapi.LineSource_Stream1TransferActive
LineSource_Stream1TransferOverflow = _neoapi.LineSource_Stream1TransferOverflow
LineSource_Stream1TransferPaused = _neoapi.LineSource_Stream1TransferPaused
LineSource_Stream1TransferStopped = _neoapi.LineSource_Stream1TransferStopped
LineSource_Stream1TransferStopping = _neoapi.LineSource_Stream1TransferStopping
LineSource_Timer0Active = _neoapi.LineSource_Timer0Active
LineSource_Timer1Active = _neoapi.LineSource_Timer1Active
LineSource_Timer2Active = _neoapi.LineSource_Timer2Active
LineSource_Timer3Active = _neoapi.LineSource_Timer3Active
LineSource_TriggerOverlapped = _neoapi.LineSource_TriggerOverlapped
LineSource_TriggerReady = _neoapi.LineSource_TriggerReady
LineSource_TriggerSkipped = _neoapi.LineSource_TriggerSkipped
LineSource_UserOutput0 = _neoapi.LineSource_UserOutput0
LineSource_UserOutput1 = _neoapi.LineSource_UserOutput1
LineSource_UserOutput2 = _neoapi.LineSource_UserOutput2
LineSource_UserOutput3 = _neoapi.LineSource_UserOutput3
LineSource_UserOutput4 = _neoapi.LineSource_UserOutput4
class CLineSource(EnumerationFeature):
    """
    Selects which internal acquisition or I/O source signal to output on the selected Line. LineMode must be Output.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLineSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLineSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CLineSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CLineSource
    __del__ = lambda self: None

    def Set(self, value: 'LineSource') -> "CLineSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CLineSource object with the value set.
        """
        return _neoapi.CLineSource_Set(self, value)

    def Get(self) -> "LineSource":
        """
        Get the current value.
        Return: The LineSource value.
        """
        return _neoapi.CLineSource_Get(self)

    value = property(Get, Set)

CLineSource_swigregister = _neoapi.CLineSource_swigregister
CLineSource_swigregister(CLineSource)

MemoryActivePart_Part_1 = _neoapi.MemoryActivePart_Part_1
MemoryActivePart_Part_2 = _neoapi.MemoryActivePart_Part_2
MemoryActivePart_Part_3 = _neoapi.MemoryActivePart_Part_3
MemoryActivePart_Part_4 = _neoapi.MemoryActivePart_Part_4
class CMemoryActivePart(EnumerationFeature):
    """
    Returns the active memory part to write the images in.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMemoryActivePart, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMemoryActivePart, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CMemoryActivePart(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CMemoryActivePart
    __del__ = lambda self: None

    def Set(self, value: 'MemoryActivePart') -> "CMemoryActivePart":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CMemoryActivePart object with the value set.
        """
        return _neoapi.CMemoryActivePart_Set(self, value)

    def Get(self) -> "MemoryActivePart":
        """
        Get the current value.
        Return: The MemoryActivePart value.
        """
        return _neoapi.CMemoryActivePart_Get(self)

    value = property(Get, Set)

CMemoryActivePart_swigregister = _neoapi.CMemoryActivePart_swigregister
CMemoryActivePart_swigregister(CMemoryActivePart)

MemoryMode_Active = _neoapi.MemoryMode_Active
MemoryMode_Burst = _neoapi.MemoryMode_Burst
MemoryMode_Config = _neoapi.MemoryMode_Config
MemoryMode_Off = _neoapi.MemoryMode_Off
class CMemoryMode(EnumerationFeature):
    """
    Controls the mode to use the memory.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMemoryMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMemoryMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CMemoryMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CMemoryMode
    __del__ = lambda self: None

    def Set(self, value: 'MemoryMode') -> "CMemoryMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CMemoryMode object with the value set.
        """
        return _neoapi.CMemoryMode_Set(self, value)

    def Get(self) -> "MemoryMode":
        """
        Get the current value.
        Return: The MemoryMode value.
        """
        return _neoapi.CMemoryMode_Get(self)

    value = property(Get, Set)

CMemoryMode_swigregister = _neoapi.CMemoryMode_swigregister
CMemoryMode_swigregister(CMemoryMode)

MemoryPartIncrementSource_Line1 = _neoapi.MemoryPartIncrementSource_Line1
MemoryPartIncrementSource_Software = _neoapi.MemoryPartIncrementSource_Software
class CMemoryPartIncrementSource(EnumerationFeature):
    """
    Selects the source to switch the active memory part.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMemoryPartIncrementSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMemoryPartIncrementSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CMemoryPartIncrementSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CMemoryPartIncrementSource
    __del__ = lambda self: None

    def Set(self, value: 'MemoryPartIncrementSource') -> "CMemoryPartIncrementSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CMemoryPartIncrementSource object with the value set.
        """
        return _neoapi.CMemoryPartIncrementSource_Set(self, value)

    def Get(self) -> "MemoryPartIncrementSource":
        """
        Get the current value.
        Return: The MemoryPartIncrementSource value.
        """
        return _neoapi.CMemoryPartIncrementSource_Get(self)

    value = property(Get, Set)

CMemoryPartIncrementSource_swigregister = _neoapi.CMemoryPartIncrementSource_swigregister
CMemoryPartIncrementSource_swigregister(CMemoryPartIncrementSource)

MemoryPartMode_Cyclic = _neoapi.MemoryPartMode_Cyclic
MemoryPartMode_Once = _neoapi.MemoryPartMode_Once
class CMemoryPartMode(EnumerationFeature):
    """
    Selects the mode to use for the selected memory part.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMemoryPartMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMemoryPartMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CMemoryPartMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CMemoryPartMode
    __del__ = lambda self: None

    def Set(self, value: 'MemoryPartMode') -> "CMemoryPartMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CMemoryPartMode object with the value set.
        """
        return _neoapi.CMemoryPartMode_Set(self, value)

    def Get(self) -> "MemoryPartMode":
        """
        Get the current value.
        Return: The MemoryPartMode value.
        """
        return _neoapi.CMemoryPartMode_Get(self)

    value = property(Get, Set)

CMemoryPartMode_swigregister = _neoapi.CMemoryPartMode_swigregister
CMemoryPartMode_swigregister(CMemoryPartMode)

MemoryPartSelector_Part_1 = _neoapi.MemoryPartSelector_Part_1
MemoryPartSelector_Part_2 = _neoapi.MemoryPartSelector_Part_2
MemoryPartSelector_Part_3 = _neoapi.MemoryPartSelector_Part_3
MemoryPartSelector_Part_4 = _neoapi.MemoryPartSelector_Part_4
class CMemoryPartSelector(EnumerationFeature):
    """
    Selects on of the available memory parts.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMemoryPartSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMemoryPartSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CMemoryPartSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CMemoryPartSelector
    __del__ = lambda self: None

    def Set(self, value: 'MemoryPartSelector') -> "CMemoryPartSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CMemoryPartSelector object with the value set.
        """
        return _neoapi.CMemoryPartSelector_Set(self, value)

    def Get(self) -> "MemoryPartSelector":
        """
        Get the current value.
        Return: The MemoryPartSelector value.
        """
        return _neoapi.CMemoryPartSelector_Get(self)

    value = property(Get, Set)

CMemoryPartSelector_swigregister = _neoapi.CMemoryPartSelector_swigregister
CMemoryPartSelector_swigregister(CMemoryPartSelector)

OpticControllerSelector_OpticController0 = _neoapi.OpticControllerSelector_OpticController0
OpticControllerSelector_OpticController1 = _neoapi.OpticControllerSelector_OpticController1
class COpticControllerSelector(EnumerationFeature):
    """
    Selects which optic controller to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COpticControllerSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COpticControllerSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_COpticControllerSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_COpticControllerSelector
    __del__ = lambda self: None

    def Set(self, value: 'OpticControllerSelector') -> "COpticControllerSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The COpticControllerSelector object with the value set.
        """
        return _neoapi.COpticControllerSelector_Set(self, value)

    def Get(self) -> "OpticControllerSelector":
        """
        Get the current value.
        Return: The OpticControllerSelector value.
        """
        return _neoapi.COpticControllerSelector_Get(self)

    value = property(Get, Set)

COpticControllerSelector_swigregister = _neoapi.COpticControllerSelector_swigregister
COpticControllerSelector_swigregister(COpticControllerSelector)

OpticControllerStatus_Busy = _neoapi.OpticControllerStatus_Busy
OpticControllerStatus_Error = _neoapi.OpticControllerStatus_Error
OpticControllerStatus_NotConnected = _neoapi.OpticControllerStatus_NotConnected
OpticControllerStatus_NotInitialized = _neoapi.OpticControllerStatus_NotInitialized
OpticControllerStatus_NotSupported = _neoapi.OpticControllerStatus_NotSupported
OpticControllerStatus_Ready = _neoapi.OpticControllerStatus_Ready
class COpticControllerStatus(EnumerationFeature):
    """
    Reads the status of the optic controller.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COpticControllerStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COpticControllerStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_COpticControllerStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_COpticControllerStatus
    __del__ = lambda self: None

    def Set(self, value: 'OpticControllerStatus') -> "COpticControllerStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The COpticControllerStatus object with the value set.
        """
        return _neoapi.COpticControllerStatus_Set(self, value)

    def Get(self) -> "OpticControllerStatus":
        """
        Get the current value.
        Return: The OpticControllerStatus value.
        """
        return _neoapi.COpticControllerStatus_Get(self)

    value = property(Get, Set)

COpticControllerStatus_swigregister = _neoapi.COpticControllerStatus_swigregister
COpticControllerStatus_swigregister(COpticControllerStatus)

PartialScanEnabled_Off = _neoapi.PartialScanEnabled_Off
PartialScanEnabled_On = _neoapi.PartialScanEnabled_On
class CPartialScanEnabled(EnumerationFeature):
    """
    Enables the partial scan readout.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPartialScanEnabled, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPartialScanEnabled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPartialScanEnabled(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPartialScanEnabled
    __del__ = lambda self: None

    def Set(self, value: 'PartialScanEnabled') -> "CPartialScanEnabled":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPartialScanEnabled object with the value set.
        """
        return _neoapi.CPartialScanEnabled_Set(self, value)

    def Get(self) -> "PartialScanEnabled":
        """
        Get the current value.
        Return: The PartialScanEnabled value.
        """
        return _neoapi.CPartialScanEnabled_Get(self)

    value = property(Get, Set)

CPartialScanEnabled_swigregister = _neoapi.CPartialScanEnabled_swigregister
CPartialScanEnabled_swigregister(CPartialScanEnabled)

PixelFormat_B10 = _neoapi.PixelFormat_B10
PixelFormat_B12 = _neoapi.PixelFormat_B12
PixelFormat_B16 = _neoapi.PixelFormat_B16
PixelFormat_B8 = _neoapi.PixelFormat_B8
PixelFormat_BGR10 = _neoapi.PixelFormat_BGR10
PixelFormat_BGR10p = _neoapi.PixelFormat_BGR10p
PixelFormat_BGR12 = _neoapi.PixelFormat_BGR12
PixelFormat_BGR12p = _neoapi.PixelFormat_BGR12p
PixelFormat_BGR14 = _neoapi.PixelFormat_BGR14
PixelFormat_BGR16 = _neoapi.PixelFormat_BGR16
PixelFormat_BGR565p = _neoapi.PixelFormat_BGR565p
PixelFormat_BGR8 = _neoapi.PixelFormat_BGR8
PixelFormat_BGRa10 = _neoapi.PixelFormat_BGRa10
PixelFormat_BGRa10p = _neoapi.PixelFormat_BGRa10p
PixelFormat_BGRa12 = _neoapi.PixelFormat_BGRa12
PixelFormat_BGRa12p = _neoapi.PixelFormat_BGRa12p
PixelFormat_BGRa14 = _neoapi.PixelFormat_BGRa14
PixelFormat_BGRa16 = _neoapi.PixelFormat_BGRa16
PixelFormat_BGRa8 = _neoapi.PixelFormat_BGRa8
PixelFormat_BayerBG10 = _neoapi.PixelFormat_BayerBG10
PixelFormat_BayerBG10p = _neoapi.PixelFormat_BayerBG10p
PixelFormat_BayerBG12 = _neoapi.PixelFormat_BayerBG12
PixelFormat_BayerBG12p = _neoapi.PixelFormat_BayerBG12p
PixelFormat_BayerBG14 = _neoapi.PixelFormat_BayerBG14
PixelFormat_BayerBG14p = _neoapi.PixelFormat_BayerBG14p
PixelFormat_BayerBG16 = _neoapi.PixelFormat_BayerBG16
PixelFormat_BayerBG4p = _neoapi.PixelFormat_BayerBG4p
PixelFormat_BayerBG8 = _neoapi.PixelFormat_BayerBG8
PixelFormat_BayerGB10 = _neoapi.PixelFormat_BayerGB10
PixelFormat_BayerGB10Packed = _neoapi.PixelFormat_BayerGB10Packed
PixelFormat_BayerGB10p = _neoapi.PixelFormat_BayerGB10p
PixelFormat_BayerGB12 = _neoapi.PixelFormat_BayerGB12
PixelFormat_BayerGB12Packed = _neoapi.PixelFormat_BayerGB12Packed
PixelFormat_BayerGB12p = _neoapi.PixelFormat_BayerGB12p
PixelFormat_BayerGB14 = _neoapi.PixelFormat_BayerGB14
PixelFormat_BayerGB14p = _neoapi.PixelFormat_BayerGB14p
PixelFormat_BayerGB16 = _neoapi.PixelFormat_BayerGB16
PixelFormat_BayerGB4p = _neoapi.PixelFormat_BayerGB4p
PixelFormat_BayerGB8 = _neoapi.PixelFormat_BayerGB8
PixelFormat_BayerGR10 = _neoapi.PixelFormat_BayerGR10
PixelFormat_BayerGR10p = _neoapi.PixelFormat_BayerGR10p
PixelFormat_BayerGR12 = _neoapi.PixelFormat_BayerGR12
PixelFormat_BayerGR12p = _neoapi.PixelFormat_BayerGR12p
PixelFormat_BayerGR14 = _neoapi.PixelFormat_BayerGR14
PixelFormat_BayerGR14p = _neoapi.PixelFormat_BayerGR14p
PixelFormat_BayerGR16 = _neoapi.PixelFormat_BayerGR16
PixelFormat_BayerGR4p = _neoapi.PixelFormat_BayerGR4p
PixelFormat_BayerGR8 = _neoapi.PixelFormat_BayerGR8
PixelFormat_BayerRG10 = _neoapi.PixelFormat_BayerRG10
PixelFormat_BayerRG10Packed = _neoapi.PixelFormat_BayerRG10Packed
PixelFormat_BayerRG10p = _neoapi.PixelFormat_BayerRG10p
PixelFormat_BayerRG12 = _neoapi.PixelFormat_BayerRG12
PixelFormat_BayerRG12Packed = _neoapi.PixelFormat_BayerRG12Packed
PixelFormat_BayerRG12p = _neoapi.PixelFormat_BayerRG12p
PixelFormat_BayerRG14 = _neoapi.PixelFormat_BayerRG14
PixelFormat_BayerRG14p = _neoapi.PixelFormat_BayerRG14p
PixelFormat_BayerRG16 = _neoapi.PixelFormat_BayerRG16
PixelFormat_BayerRG4p = _neoapi.PixelFormat_BayerRG4p
PixelFormat_BayerRG8 = _neoapi.PixelFormat_BayerRG8
PixelFormat_BiColorBGRG10 = _neoapi.PixelFormat_BiColorBGRG10
PixelFormat_BiColorBGRG10p = _neoapi.PixelFormat_BiColorBGRG10p
PixelFormat_BiColorBGRG12 = _neoapi.PixelFormat_BiColorBGRG12
PixelFormat_BiColorBGRG12p = _neoapi.PixelFormat_BiColorBGRG12p
PixelFormat_BiColorBGRG8 = _neoapi.PixelFormat_BiColorBGRG8
PixelFormat_BiColorRGBG10 = _neoapi.PixelFormat_BiColorRGBG10
PixelFormat_BiColorRGBG10p = _neoapi.PixelFormat_BiColorRGBG10p
PixelFormat_BiColorRGBG12 = _neoapi.PixelFormat_BiColorRGBG12
PixelFormat_BiColorRGBG12p = _neoapi.PixelFormat_BiColorRGBG12p
PixelFormat_BiColorRGBG8 = _neoapi.PixelFormat_BiColorRGBG8
PixelFormat_Confidence1 = _neoapi.PixelFormat_Confidence1
PixelFormat_Confidence16 = _neoapi.PixelFormat_Confidence16
PixelFormat_Confidence1p = _neoapi.PixelFormat_Confidence1p
PixelFormat_Confidence32f = _neoapi.PixelFormat_Confidence32f
PixelFormat_Confidence8 = _neoapi.PixelFormat_Confidence8
PixelFormat_Coord3D_A10p = _neoapi.PixelFormat_Coord3D_A10p
PixelFormat_Coord3D_A12p = _neoapi.PixelFormat_Coord3D_A12p
PixelFormat_Coord3D_A16 = _neoapi.PixelFormat_Coord3D_A16
PixelFormat_Coord3D_A32f = _neoapi.PixelFormat_Coord3D_A32f
PixelFormat_Coord3D_A8 = _neoapi.PixelFormat_Coord3D_A8
PixelFormat_Coord3D_ABC10p = _neoapi.PixelFormat_Coord3D_ABC10p
PixelFormat_Coord3D_ABC10p_Planar = _neoapi.PixelFormat_Coord3D_ABC10p_Planar
PixelFormat_Coord3D_ABC12p = _neoapi.PixelFormat_Coord3D_ABC12p
PixelFormat_Coord3D_ABC12p_Planar = _neoapi.PixelFormat_Coord3D_ABC12p_Planar
PixelFormat_Coord3D_ABC16 = _neoapi.PixelFormat_Coord3D_ABC16
PixelFormat_Coord3D_ABC16_Planar = _neoapi.PixelFormat_Coord3D_ABC16_Planar
PixelFormat_Coord3D_ABC32f = _neoapi.PixelFormat_Coord3D_ABC32f
PixelFormat_Coord3D_ABC32f_Planar = _neoapi.PixelFormat_Coord3D_ABC32f_Planar
PixelFormat_Coord3D_ABC8 = _neoapi.PixelFormat_Coord3D_ABC8
PixelFormat_Coord3D_ABC8_Planar = _neoapi.PixelFormat_Coord3D_ABC8_Planar
PixelFormat_Coord3D_AC10p = _neoapi.PixelFormat_Coord3D_AC10p
PixelFormat_Coord3D_AC10p_Planar = _neoapi.PixelFormat_Coord3D_AC10p_Planar
PixelFormat_Coord3D_AC12p = _neoapi.PixelFormat_Coord3D_AC12p
PixelFormat_Coord3D_AC12p_Planar = _neoapi.PixelFormat_Coord3D_AC12p_Planar
PixelFormat_Coord3D_AC16 = _neoapi.PixelFormat_Coord3D_AC16
PixelFormat_Coord3D_AC16_Planar = _neoapi.PixelFormat_Coord3D_AC16_Planar
PixelFormat_Coord3D_AC32f = _neoapi.PixelFormat_Coord3D_AC32f
PixelFormat_Coord3D_AC32f_Planar = _neoapi.PixelFormat_Coord3D_AC32f_Planar
PixelFormat_Coord3D_AC8 = _neoapi.PixelFormat_Coord3D_AC8
PixelFormat_Coord3D_AC8_Planar = _neoapi.PixelFormat_Coord3D_AC8_Planar
PixelFormat_Coord3D_B10p = _neoapi.PixelFormat_Coord3D_B10p
PixelFormat_Coord3D_B12p = _neoapi.PixelFormat_Coord3D_B12p
PixelFormat_Coord3D_B16 = _neoapi.PixelFormat_Coord3D_B16
PixelFormat_Coord3D_B32f = _neoapi.PixelFormat_Coord3D_B32f
PixelFormat_Coord3D_B8 = _neoapi.PixelFormat_Coord3D_B8
PixelFormat_Coord3D_C10p = _neoapi.PixelFormat_Coord3D_C10p
PixelFormat_Coord3D_C12p = _neoapi.PixelFormat_Coord3D_C12p
PixelFormat_Coord3D_C16 = _neoapi.PixelFormat_Coord3D_C16
PixelFormat_Coord3D_C32f = _neoapi.PixelFormat_Coord3D_C32f
PixelFormat_Coord3D_C8 = _neoapi.PixelFormat_Coord3D_C8
PixelFormat_Data16 = _neoapi.PixelFormat_Data16
PixelFormat_Data16s = _neoapi.PixelFormat_Data16s
PixelFormat_Data32 = _neoapi.PixelFormat_Data32
PixelFormat_Data32f = _neoapi.PixelFormat_Data32f
PixelFormat_Data32s = _neoapi.PixelFormat_Data32s
PixelFormat_Data64 = _neoapi.PixelFormat_Data64
PixelFormat_Data64f = _neoapi.PixelFormat_Data64f
PixelFormat_Data64s = _neoapi.PixelFormat_Data64s
PixelFormat_Data8 = _neoapi.PixelFormat_Data8
PixelFormat_Data8s = _neoapi.PixelFormat_Data8s
PixelFormat_G10 = _neoapi.PixelFormat_G10
PixelFormat_G12 = _neoapi.PixelFormat_G12
PixelFormat_G16 = _neoapi.PixelFormat_G16
PixelFormat_G8 = _neoapi.PixelFormat_G8
PixelFormat_Mono10 = _neoapi.PixelFormat_Mono10
PixelFormat_Mono10Packed = _neoapi.PixelFormat_Mono10Packed
PixelFormat_Mono10p = _neoapi.PixelFormat_Mono10p
PixelFormat_Mono12 = _neoapi.PixelFormat_Mono12
PixelFormat_Mono12Packed = _neoapi.PixelFormat_Mono12Packed
PixelFormat_Mono12p = _neoapi.PixelFormat_Mono12p
PixelFormat_Mono14 = _neoapi.PixelFormat_Mono14
PixelFormat_Mono14p = _neoapi.PixelFormat_Mono14p
PixelFormat_Mono16 = _neoapi.PixelFormat_Mono16
PixelFormat_Mono1p = _neoapi.PixelFormat_Mono1p
PixelFormat_Mono2p = _neoapi.PixelFormat_Mono2p
PixelFormat_Mono32 = _neoapi.PixelFormat_Mono32
PixelFormat_Mono4p = _neoapi.PixelFormat_Mono4p
PixelFormat_Mono8 = _neoapi.PixelFormat_Mono8
PixelFormat_Mono8s = _neoapi.PixelFormat_Mono8s
PixelFormat_R10 = _neoapi.PixelFormat_R10
PixelFormat_R12 = _neoapi.PixelFormat_R12
PixelFormat_R16 = _neoapi.PixelFormat_R16
PixelFormat_R8 = _neoapi.PixelFormat_R8
PixelFormat_RGB10 = _neoapi.PixelFormat_RGB10
PixelFormat_RGB10_Planar = _neoapi.PixelFormat_RGB10_Planar
PixelFormat_RGB10p = _neoapi.PixelFormat_RGB10p
PixelFormat_RGB10p32 = _neoapi.PixelFormat_RGB10p32
PixelFormat_RGB12 = _neoapi.PixelFormat_RGB12
PixelFormat_RGB12_Planar = _neoapi.PixelFormat_RGB12_Planar
PixelFormat_RGB12p = _neoapi.PixelFormat_RGB12p
PixelFormat_RGB14 = _neoapi.PixelFormat_RGB14
PixelFormat_RGB16 = _neoapi.PixelFormat_RGB16
PixelFormat_RGB16_Planar = _neoapi.PixelFormat_RGB16_Planar
PixelFormat_RGB565p = _neoapi.PixelFormat_RGB565p
PixelFormat_RGB8 = _neoapi.PixelFormat_RGB8
PixelFormat_RGB8_Planar = _neoapi.PixelFormat_RGB8_Planar
PixelFormat_RGBa10 = _neoapi.PixelFormat_RGBa10
PixelFormat_RGBa10p = _neoapi.PixelFormat_RGBa10p
PixelFormat_RGBa12 = _neoapi.PixelFormat_RGBa12
PixelFormat_RGBa12p = _neoapi.PixelFormat_RGBa12p
PixelFormat_RGBa14 = _neoapi.PixelFormat_RGBa14
PixelFormat_RGBa16 = _neoapi.PixelFormat_RGBa16
PixelFormat_RGBa8 = _neoapi.PixelFormat_RGBa8
PixelFormat_SCF1WBWG10 = _neoapi.PixelFormat_SCF1WBWG10
PixelFormat_SCF1WBWG10p = _neoapi.PixelFormat_SCF1WBWG10p
PixelFormat_SCF1WBWG12 = _neoapi.PixelFormat_SCF1WBWG12
PixelFormat_SCF1WBWG12p = _neoapi.PixelFormat_SCF1WBWG12p
PixelFormat_SCF1WBWG14 = _neoapi.PixelFormat_SCF1WBWG14
PixelFormat_SCF1WBWG16 = _neoapi.PixelFormat_SCF1WBWG16
PixelFormat_SCF1WBWG8 = _neoapi.PixelFormat_SCF1WBWG8
PixelFormat_SCF1WGWB10 = _neoapi.PixelFormat_SCF1WGWB10
PixelFormat_SCF1WGWB10p = _neoapi.PixelFormat_SCF1WGWB10p
PixelFormat_SCF1WGWB12 = _neoapi.PixelFormat_SCF1WGWB12
PixelFormat_SCF1WGWB12p = _neoapi.PixelFormat_SCF1WGWB12p
PixelFormat_SCF1WGWB14 = _neoapi.PixelFormat_SCF1WGWB14
PixelFormat_SCF1WGWB16 = _neoapi.PixelFormat_SCF1WGWB16
PixelFormat_SCF1WGWB8 = _neoapi.PixelFormat_SCF1WGWB8
PixelFormat_SCF1WGWR10 = _neoapi.PixelFormat_SCF1WGWR10
PixelFormat_SCF1WGWR10p = _neoapi.PixelFormat_SCF1WGWR10p
PixelFormat_SCF1WGWR12 = _neoapi.PixelFormat_SCF1WGWR12
PixelFormat_SCF1WGWR12p = _neoapi.PixelFormat_SCF1WGWR12p
PixelFormat_SCF1WGWR14 = _neoapi.PixelFormat_SCF1WGWR14
PixelFormat_SCF1WGWR16 = _neoapi.PixelFormat_SCF1WGWR16
PixelFormat_SCF1WGWR8 = _neoapi.PixelFormat_SCF1WGWR8
PixelFormat_SCF1WRWG10 = _neoapi.PixelFormat_SCF1WRWG10
PixelFormat_SCF1WRWG10p = _neoapi.PixelFormat_SCF1WRWG10p
PixelFormat_SCF1WRWG12 = _neoapi.PixelFormat_SCF1WRWG12
PixelFormat_SCF1WRWG12p = _neoapi.PixelFormat_SCF1WRWG12p
PixelFormat_SCF1WRWG14 = _neoapi.PixelFormat_SCF1WRWG14
PixelFormat_SCF1WRWG16 = _neoapi.PixelFormat_SCF1WRWG16
PixelFormat_SCF1WRWG8 = _neoapi.PixelFormat_SCF1WRWG8
PixelFormat_YCbCr10_CbYCr = _neoapi.PixelFormat_YCbCr10_CbYCr
PixelFormat_YCbCr10p_CbYCr = _neoapi.PixelFormat_YCbCr10p_CbYCr
PixelFormat_YCbCr12_CbYCr = _neoapi.PixelFormat_YCbCr12_CbYCr
PixelFormat_YCbCr12p_CbYCr = _neoapi.PixelFormat_YCbCr12p_CbYCr
PixelFormat_YCbCr2020_10_CbYCr = _neoapi.PixelFormat_YCbCr2020_10_CbYCr
PixelFormat_YCbCr2020_10p_CbYCr = _neoapi.PixelFormat_YCbCr2020_10p_CbYCr
PixelFormat_YCbCr2020_12_CbYCr = _neoapi.PixelFormat_YCbCr2020_12_CbYCr
PixelFormat_YCbCr2020_12p_CbYCr = _neoapi.PixelFormat_YCbCr2020_12p_CbYCr
PixelFormat_YCbCr2020_411_8_CbYYCrYY = _neoapi.PixelFormat_YCbCr2020_411_8_CbYYCrYY
PixelFormat_YCbCr2020_422_10 = _neoapi.PixelFormat_YCbCr2020_422_10
PixelFormat_YCbCr2020_422_10_CbYCrY = _neoapi.PixelFormat_YCbCr2020_422_10_CbYCrY
PixelFormat_YCbCr2020_422_10p = _neoapi.PixelFormat_YCbCr2020_422_10p
PixelFormat_YCbCr2020_422_10p_CbYCrY = _neoapi.PixelFormat_YCbCr2020_422_10p_CbYCrY
PixelFormat_YCbCr2020_422_12 = _neoapi.PixelFormat_YCbCr2020_422_12
PixelFormat_YCbCr2020_422_12_CbYCrY = _neoapi.PixelFormat_YCbCr2020_422_12_CbYCrY
PixelFormat_YCbCr2020_422_12p = _neoapi.PixelFormat_YCbCr2020_422_12p
PixelFormat_YCbCr2020_422_12p_CbYCrY = _neoapi.PixelFormat_YCbCr2020_422_12p_CbYCrY
PixelFormat_YCbCr2020_422_8 = _neoapi.PixelFormat_YCbCr2020_422_8
PixelFormat_YCbCr2020_422_8_CbYCrY = _neoapi.PixelFormat_YCbCr2020_422_8_CbYCrY
PixelFormat_YCbCr2020_8_CbYCr = _neoapi.PixelFormat_YCbCr2020_8_CbYCr
PixelFormat_YCbCr411_8 = _neoapi.PixelFormat_YCbCr411_8
PixelFormat_YCbCr411_8_CbYYCrYY = _neoapi.PixelFormat_YCbCr411_8_CbYYCrYY
PixelFormat_YCbCr420_8_YY_CbCr_Semiplanar = _neoapi.PixelFormat_YCbCr420_8_YY_CbCr_Semiplanar
PixelFormat_YCbCr420_8_YY_CrCb_Semiplanar = _neoapi.PixelFormat_YCbCr420_8_YY_CrCb_Semiplanar
PixelFormat_YCbCr422_10 = _neoapi.PixelFormat_YCbCr422_10
PixelFormat_YCbCr422_10_CbYCrY = _neoapi.PixelFormat_YCbCr422_10_CbYCrY
PixelFormat_YCbCr422_10p = _neoapi.PixelFormat_YCbCr422_10p
PixelFormat_YCbCr422_10p_CbYCrY = _neoapi.PixelFormat_YCbCr422_10p_CbYCrY
PixelFormat_YCbCr422_12 = _neoapi.PixelFormat_YCbCr422_12
PixelFormat_YCbCr422_12_CbYCrY = _neoapi.PixelFormat_YCbCr422_12_CbYCrY
PixelFormat_YCbCr422_12p = _neoapi.PixelFormat_YCbCr422_12p
PixelFormat_YCbCr422_12p_CbYCrY = _neoapi.PixelFormat_YCbCr422_12p_CbYCrY
PixelFormat_YCbCr422_8 = _neoapi.PixelFormat_YCbCr422_8
PixelFormat_YCbCr422_8_CbYCrY = _neoapi.PixelFormat_YCbCr422_8_CbYCrY
PixelFormat_YCbCr422_8_YY_CbCr_Semiplanar = _neoapi.PixelFormat_YCbCr422_8_YY_CbCr_Semiplanar
PixelFormat_YCbCr422_8_YY_CrCb_Semiplanar = _neoapi.PixelFormat_YCbCr422_8_YY_CrCb_Semiplanar
PixelFormat_YCbCr601_10_CbYCr = _neoapi.PixelFormat_YCbCr601_10_CbYCr
PixelFormat_YCbCr601_10p_CbYCr = _neoapi.PixelFormat_YCbCr601_10p_CbYCr
PixelFormat_YCbCr601_12_CbYCr = _neoapi.PixelFormat_YCbCr601_12_CbYCr
PixelFormat_YCbCr601_12p_CbYCr = _neoapi.PixelFormat_YCbCr601_12p_CbYCr
PixelFormat_YCbCr601_411_8_CbYYCrYY = _neoapi.PixelFormat_YCbCr601_411_8_CbYYCrYY
PixelFormat_YCbCr601_422_10 = _neoapi.PixelFormat_YCbCr601_422_10
PixelFormat_YCbCr601_422_10_CbYCrY = _neoapi.PixelFormat_YCbCr601_422_10_CbYCrY
PixelFormat_YCbCr601_422_10p = _neoapi.PixelFormat_YCbCr601_422_10p
PixelFormat_YCbCr601_422_10p_CbYCrY = _neoapi.PixelFormat_YCbCr601_422_10p_CbYCrY
PixelFormat_YCbCr601_422_12 = _neoapi.PixelFormat_YCbCr601_422_12
PixelFormat_YCbCr601_422_12_CbYCrY = _neoapi.PixelFormat_YCbCr601_422_12_CbYCrY
PixelFormat_YCbCr601_422_12p = _neoapi.PixelFormat_YCbCr601_422_12p
PixelFormat_YCbCr601_422_12p_CbYCrY = _neoapi.PixelFormat_YCbCr601_422_12p_CbYCrY
PixelFormat_YCbCr601_422_8 = _neoapi.PixelFormat_YCbCr601_422_8
PixelFormat_YCbCr601_422_8_CbYCrY = _neoapi.PixelFormat_YCbCr601_422_8_CbYCrY
PixelFormat_YCbCr601_8_CbYCr = _neoapi.PixelFormat_YCbCr601_8_CbYCr
PixelFormat_YCbCr709_10_CbYCr = _neoapi.PixelFormat_YCbCr709_10_CbYCr
PixelFormat_YCbCr709_10p_CbYCr = _neoapi.PixelFormat_YCbCr709_10p_CbYCr
PixelFormat_YCbCr709_12_CbYCr = _neoapi.PixelFormat_YCbCr709_12_CbYCr
PixelFormat_YCbCr709_12p_CbYCr = _neoapi.PixelFormat_YCbCr709_12p_CbYCr
PixelFormat_YCbCr709_411_8_CbYYCrYY = _neoapi.PixelFormat_YCbCr709_411_8_CbYYCrYY
PixelFormat_YCbCr709_422_10 = _neoapi.PixelFormat_YCbCr709_422_10
PixelFormat_YCbCr709_422_10_CbYCrY = _neoapi.PixelFormat_YCbCr709_422_10_CbYCrY
PixelFormat_YCbCr709_422_10p = _neoapi.PixelFormat_YCbCr709_422_10p
PixelFormat_YCbCr709_422_10p_CbYCrY = _neoapi.PixelFormat_YCbCr709_422_10p_CbYCrY
PixelFormat_YCbCr709_422_12 = _neoapi.PixelFormat_YCbCr709_422_12
PixelFormat_YCbCr709_422_12_CbYCrY = _neoapi.PixelFormat_YCbCr709_422_12_CbYCrY
PixelFormat_YCbCr709_422_12p = _neoapi.PixelFormat_YCbCr709_422_12p
PixelFormat_YCbCr709_422_12p_CbYCrY = _neoapi.PixelFormat_YCbCr709_422_12p_CbYCrY
PixelFormat_YCbCr709_422_8 = _neoapi.PixelFormat_YCbCr709_422_8
PixelFormat_YCbCr709_422_8_CbYCrY = _neoapi.PixelFormat_YCbCr709_422_8_CbYCrY
PixelFormat_YCbCr709_8_CbYCr = _neoapi.PixelFormat_YCbCr709_8_CbYCr
PixelFormat_YCbCr8 = _neoapi.PixelFormat_YCbCr8
PixelFormat_YCbCr8_CbYCr = _neoapi.PixelFormat_YCbCr8_CbYCr
PixelFormat_YUV411Packed = _neoapi.PixelFormat_YUV411Packed
PixelFormat_YUV411_8 = _neoapi.PixelFormat_YUV411_8
PixelFormat_YUV411_8_UYYVYY = _neoapi.PixelFormat_YUV411_8_UYYVYY
PixelFormat_YUV422Packed = _neoapi.PixelFormat_YUV422Packed
PixelFormat_YUV422_8 = _neoapi.PixelFormat_YUV422_8
PixelFormat_YUV422_8_UYVY = _neoapi.PixelFormat_YUV422_8_UYVY
PixelFormat_YUV444Packed = _neoapi.PixelFormat_YUV444Packed
PixelFormat_YUV8 = _neoapi.PixelFormat_YUV8
PixelFormat_YUV8_UYV = _neoapi.PixelFormat_YUV8_UYV
class CPixelFormat(EnumerationFeature):
    """
    Format of the pixels provided by the device. It represents all the information provided by PixelSize, PixelColorFilter combined in a single feature.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPixelFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPixelFormat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPixelFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPixelFormat
    __del__ = lambda self: None

    def Set(self, value: 'PixelFormat') -> "CPixelFormat":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPixelFormat object with the value set.
        """
        return _neoapi.CPixelFormat_Set(self, value)

    def Get(self) -> "PixelFormat":
        """
        Get the current value.
        Return: The PixelFormat value.
        """
        return _neoapi.CPixelFormat_Get(self)

    value = property(Get, Set)

CPixelFormat_swigregister = _neoapi.CPixelFormat_swigregister
CPixelFormat_swigregister(CPixelFormat)

PtpClockAccuracy_AlternatePTPProfile = _neoapi.PtpClockAccuracy_AlternatePTPProfile
PtpClockAccuracy_GreaterThan10s = _neoapi.PtpClockAccuracy_GreaterThan10s
PtpClockAccuracy_Reserved = _neoapi.PtpClockAccuracy_Reserved
PtpClockAccuracy_Unknown = _neoapi.PtpClockAccuracy_Unknown
PtpClockAccuracy_Within100ms = _neoapi.PtpClockAccuracy_Within100ms
PtpClockAccuracy_Within100ns = _neoapi.PtpClockAccuracy_Within100ns
PtpClockAccuracy_Within100us = _neoapi.PtpClockAccuracy_Within100us
PtpClockAccuracy_Within10ms = _neoapi.PtpClockAccuracy_Within10ms
PtpClockAccuracy_Within10s = _neoapi.PtpClockAccuracy_Within10s
PtpClockAccuracy_Within10us = _neoapi.PtpClockAccuracy_Within10us
PtpClockAccuracy_Within1ms = _neoapi.PtpClockAccuracy_Within1ms
PtpClockAccuracy_Within1s = _neoapi.PtpClockAccuracy_Within1s
PtpClockAccuracy_Within1us = _neoapi.PtpClockAccuracy_Within1us
PtpClockAccuracy_Within250ms = _neoapi.PtpClockAccuracy_Within250ms
PtpClockAccuracy_Within250ns = _neoapi.PtpClockAccuracy_Within250ns
PtpClockAccuracy_Within250us = _neoapi.PtpClockAccuracy_Within250us
PtpClockAccuracy_Within25ms = _neoapi.PtpClockAccuracy_Within25ms
PtpClockAccuracy_Within25ns = _neoapi.PtpClockAccuracy_Within25ns
PtpClockAccuracy_Within25us = _neoapi.PtpClockAccuracy_Within25us
PtpClockAccuracy_Within2p5ms = _neoapi.PtpClockAccuracy_Within2p5ms
PtpClockAccuracy_Within2p5us = _neoapi.PtpClockAccuracy_Within2p5us
class CPtpClockAccuracy(EnumerationFeature):
    """
    Indicates the expected accuracy of the device PTP clock when it is the grandmaster, or in the event it becomes the grandmaster.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpClockAccuracy, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpClockAccuracy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpClockAccuracy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpClockAccuracy
    __del__ = lambda self: None

    def Set(self, value: 'PtpClockAccuracy') -> "CPtpClockAccuracy":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpClockAccuracy object with the value set.
        """
        return _neoapi.CPtpClockAccuracy_Set(self, value)

    def Get(self) -> "PtpClockAccuracy":
        """
        Get the current value.
        Return: The PtpClockAccuracy value.
        """
        return _neoapi.CPtpClockAccuracy_Get(self)

    value = property(Get, Set)

CPtpClockAccuracy_swigregister = _neoapi.CPtpClockAccuracy_swigregister
CPtpClockAccuracy_swigregister(CPtpClockAccuracy)

PtpClockOffsetMode_Add = _neoapi.PtpClockOffsetMode_Add
PtpClockOffsetMode_Sub = _neoapi.PtpClockOffsetMode_Sub
class CPtpClockOffsetMode(EnumerationFeature):
    """
    Sets the mode to handle PtpClockOffset for command PtpClockOffsetSet.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpClockOffsetMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpClockOffsetMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpClockOffsetMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpClockOffsetMode
    __del__ = lambda self: None

    def Set(self, value: 'PtpClockOffsetMode') -> "CPtpClockOffsetMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpClockOffsetMode object with the value set.
        """
        return _neoapi.CPtpClockOffsetMode_Set(self, value)

    def Get(self) -> "PtpClockOffsetMode":
        """
        Get the current value.
        Return: The PtpClockOffsetMode value.
        """
        return _neoapi.CPtpClockOffsetMode_Get(self)

    value = property(Get, Set)

CPtpClockOffsetMode_swigregister = _neoapi.CPtpClockOffsetMode_swigregister
CPtpClockOffsetMode_swigregister(CPtpClockOffsetMode)

PtpDriftOffsetMode_Add = _neoapi.PtpDriftOffsetMode_Add
PtpDriftOffsetMode_Sub = _neoapi.PtpDriftOffsetMode_Sub
class CPtpDriftOffsetMode(EnumerationFeature):
    """
    Sets the mode to handle PtpDriftOffset for command PtpDriftOffsetSet.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpDriftOffsetMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpDriftOffsetMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpDriftOffsetMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpDriftOffsetMode
    __del__ = lambda self: None

    def Set(self, value: 'PtpDriftOffsetMode') -> "CPtpDriftOffsetMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpDriftOffsetMode object with the value set.
        """
        return _neoapi.CPtpDriftOffsetMode_Set(self, value)

    def Get(self) -> "PtpDriftOffsetMode":
        """
        Get the current value.
        Return: The PtpDriftOffsetMode value.
        """
        return _neoapi.CPtpDriftOffsetMode_Get(self)

    value = property(Get, Set)

CPtpDriftOffsetMode_swigregister = _neoapi.CPtpDriftOffsetMode_swigregister
CPtpDriftOffsetMode_swigregister(CPtpDriftOffsetMode)

PtpMode_Auto = _neoapi.PtpMode_Auto
PtpMode_Slave = _neoapi.PtpMode_Slave
class CPtpMode(EnumerationFeature):
    """
    Selects the PTP clock type the device will act as.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpMode
    __del__ = lambda self: None

    def Set(self, value: 'PtpMode') -> "CPtpMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpMode object with the value set.
        """
        return _neoapi.CPtpMode_Set(self, value)

    def Get(self) -> "PtpMode":
        """
        Get the current value.
        Return: The PtpMode value.
        """
        return _neoapi.CPtpMode_Get(self)

    value = property(Get, Set)

CPtpMode_swigregister = _neoapi.CPtpMode_swigregister
CPtpMode_swigregister(CPtpMode)

PtpServoStatus_DeviceSpecific = _neoapi.PtpServoStatus_DeviceSpecific
PtpServoStatus_Locked = _neoapi.PtpServoStatus_Locked
PtpServoStatus_Unknown = _neoapi.PtpServoStatus_Unknown
class CPtpServoStatus(EnumerationFeature):
    """
    Returns the latched state of the clock servo. When the servo is in a locked state, the value returned is 'Locked'. When the servo is in a non-locked state, a device-specific value can be returned to give specific information. If no device-specific value is available to describe the current state of the clock servo, the value should be 'Unknown'.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpServoStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpServoStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpServoStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpServoStatus
    __del__ = lambda self: None

    def Set(self, value: 'PtpServoStatus') -> "CPtpServoStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpServoStatus object with the value set.
        """
        return _neoapi.CPtpServoStatus_Set(self, value)

    def Get(self) -> "PtpServoStatus":
        """
        Get the current value.
        Return: The PtpServoStatus value.
        """
        return _neoapi.CPtpServoStatus_Get(self)

    value = property(Get, Set)

CPtpServoStatus_swigregister = _neoapi.CPtpServoStatus_swigregister
CPtpServoStatus_swigregister(CPtpServoStatus)

PtpStatus_Disabled = _neoapi.PtpStatus_Disabled
PtpStatus_Faulty = _neoapi.PtpStatus_Faulty
PtpStatus_Initializing = _neoapi.PtpStatus_Initializing
PtpStatus_Listening = _neoapi.PtpStatus_Listening
PtpStatus_Master = _neoapi.PtpStatus_Master
PtpStatus_Passive = _neoapi.PtpStatus_Passive
PtpStatus_PreMaster = _neoapi.PtpStatus_PreMaster
PtpStatus_Slave = _neoapi.PtpStatus_Slave
PtpStatus_Uncalibrated = _neoapi.PtpStatus_Uncalibrated
class CPtpStatus(EnumerationFeature):
    """
    Returns the latched state of the PTP clock.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpStatus
    __del__ = lambda self: None

    def Set(self, value: 'PtpStatus') -> "CPtpStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpStatus object with the value set.
        """
        return _neoapi.CPtpStatus_Set(self, value)

    def Get(self) -> "PtpStatus":
        """
        Get the current value.
        Return: The PtpStatus value.
        """
        return _neoapi.CPtpStatus_Get(self)

    value = property(Get, Set)

CPtpStatus_swigregister = _neoapi.CPtpStatus_swigregister
CPtpStatus_swigregister(CPtpStatus)

PtpSyncMessageIntervalStatus_Invalid = _neoapi.PtpSyncMessageIntervalStatus_Invalid
PtpSyncMessageIntervalStatus_Valid = _neoapi.PtpSyncMessageIntervalStatus_Valid
class CPtpSyncMessageIntervalStatus(EnumerationFeature):
    """
    Returns if the latched sync message interval from the PTP master clock is supported by the device. An unsupported sync message interval may result in PtpServoStatus instability.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpSyncMessageIntervalStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpSyncMessageIntervalStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpSyncMessageIntervalStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpSyncMessageIntervalStatus
    __del__ = lambda self: None

    def Set(self, value: 'PtpSyncMessageIntervalStatus') -> "CPtpSyncMessageIntervalStatus":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpSyncMessageIntervalStatus object with the value set.
        """
        return _neoapi.CPtpSyncMessageIntervalStatus_Set(self, value)

    def Get(self) -> "PtpSyncMessageIntervalStatus":
        """
        Get the current value.
        Return: The PtpSyncMessageIntervalStatus value.
        """
        return _neoapi.CPtpSyncMessageIntervalStatus_Get(self)

    value = property(Get, Set)

CPtpSyncMessageIntervalStatus_swigregister = _neoapi.CPtpSyncMessageIntervalStatus_swigregister
CPtpSyncMessageIntervalStatus_swigregister(CPtpSyncMessageIntervalStatus)

PtpTimestampOffsetMode_RxAndTxOffset = _neoapi.PtpTimestampOffsetMode_RxAndTxOffset
PtpTimestampOffsetMode_RxOffset = _neoapi.PtpTimestampOffsetMode_RxOffset
PtpTimestampOffsetMode_TxOffset = _neoapi.PtpTimestampOffsetMode_TxOffset
class CPtpTimestampOffsetMode(EnumerationFeature):
    """
    Sets the mode to handle PtpTimestampOffset for command PtpTimestampOffsetSet.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPtpTimestampOffsetMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPtpTimestampOffsetMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CPtpTimestampOffsetMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CPtpTimestampOffsetMode
    __del__ = lambda self: None

    def Set(self, value: 'PtpTimestampOffsetMode') -> "CPtpTimestampOffsetMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CPtpTimestampOffsetMode object with the value set.
        """
        return _neoapi.CPtpTimestampOffsetMode_Set(self, value)

    def Get(self) -> "PtpTimestampOffsetMode":
        """
        Get the current value.
        Return: The PtpTimestampOffsetMode value.
        """
        return _neoapi.CPtpTimestampOffsetMode_Get(self)

    value = property(Get, Set)

CPtpTimestampOffsetMode_swigregister = _neoapi.CPtpTimestampOffsetMode_swigregister
CPtpTimestampOffsetMode_swigregister(CPtpTimestampOffsetMode)

ReadOutBuffering_Buffered = _neoapi.ReadOutBuffering_Buffered
ReadOutBuffering_BufferedImages16 = _neoapi.ReadOutBuffering_BufferedImages16
ReadOutBuffering_BufferedImages8 = _neoapi.ReadOutBuffering_BufferedImages8
ReadOutBuffering_Live = _neoapi.ReadOutBuffering_Live
class CReadOutBuffering(EnumerationFeature):
    """
    Selects the number of image buffers filled with data of sensor output. If all buffers full the oldest buffer will be overwritten.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReadOutBuffering, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReadOutBuffering, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CReadOutBuffering(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CReadOutBuffering
    __del__ = lambda self: None

    def Set(self, value: 'ReadOutBuffering') -> "CReadOutBuffering":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CReadOutBuffering object with the value set.
        """
        return _neoapi.CReadOutBuffering_Set(self, value)

    def Get(self) -> "ReadOutBuffering":
        """
        Get the current value.
        Return: The ReadOutBuffering value.
        """
        return _neoapi.CReadOutBuffering_Get(self)

    value = property(Get, Set)

CReadOutBuffering_swigregister = _neoapi.CReadOutBuffering_swigregister
CReadOutBuffering_swigregister(CReadOutBuffering)

ReadoutMode_Overlapped = _neoapi.ReadoutMode_Overlapped
ReadoutMode_Sequential = _neoapi.ReadoutMode_Sequential
class CReadoutMode(EnumerationFeature):
    """
    Specifies the operation mode of the readout for the acquisition.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CReadoutMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CReadoutMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CReadoutMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CReadoutMode
    __del__ = lambda self: None

    def Set(self, value: 'ReadoutMode') -> "CReadoutMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CReadoutMode object with the value set.
        """
        return _neoapi.CReadoutMode_Set(self, value)

    def Get(self) -> "ReadoutMode":
        """
        Get the current value.
        Return: The ReadoutMode value.
        """
        return _neoapi.CReadoutMode_Get(self)

    value = property(Get, Set)

CReadoutMode_swigregister = _neoapi.CReadoutMode_swigregister
CReadoutMode_swigregister(CReadoutMode)

RegionAcquisitionMode_Memory = _neoapi.RegionAcquisitionMode_Memory
RegionAcquisitionMode_Sensor = _neoapi.RegionAcquisitionMode_Sensor
class CRegionAcquisitionMode(EnumerationFeature):
    """
    Returns the acquisition mode of the regions.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegionAcquisitionMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegionAcquisitionMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CRegionAcquisitionMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CRegionAcquisitionMode
    __del__ = lambda self: None

    def Set(self, value: 'RegionAcquisitionMode') -> "CRegionAcquisitionMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CRegionAcquisitionMode object with the value set.
        """
        return _neoapi.CRegionAcquisitionMode_Set(self, value)

    def Get(self) -> "RegionAcquisitionMode":
        """
        Get the current value.
        Return: The RegionAcquisitionMode value.
        """
        return _neoapi.CRegionAcquisitionMode_Get(self)

    value = property(Get, Set)

CRegionAcquisitionMode_swigregister = _neoapi.CRegionAcquisitionMode_swigregister
CRegionAcquisitionMode_swigregister(CRegionAcquisitionMode)

RegionConfigurationMode_NonOverlapping = _neoapi.RegionConfigurationMode_NonOverlapping
RegionConfigurationMode_Overlapping = _neoapi.RegionConfigurationMode_Overlapping
class CRegionConfigurationMode(EnumerationFeature):
    """
    Returns the configuration mode of the regions.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegionConfigurationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegionConfigurationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CRegionConfigurationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CRegionConfigurationMode
    __del__ = lambda self: None

    def Set(self, value: 'RegionConfigurationMode') -> "CRegionConfigurationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CRegionConfigurationMode object with the value set.
        """
        return _neoapi.CRegionConfigurationMode_Set(self, value)

    def Get(self) -> "RegionConfigurationMode":
        """
        Get the current value.
        Return: The RegionConfigurationMode value.
        """
        return _neoapi.CRegionConfigurationMode_Get(self)

    value = property(Get, Set)

CRegionConfigurationMode_swigregister = _neoapi.CRegionConfigurationMode_swigregister
CRegionConfigurationMode_swigregister(CRegionConfigurationMode)

RegionMode_Off = _neoapi.RegionMode_Off
RegionMode_On = _neoapi.RegionMode_On
class CRegionMode(EnumerationFeature):
    """
    Controls if the selected Region of interest is active and streaming.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegionMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegionMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CRegionMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CRegionMode
    __del__ = lambda self: None

    def Set(self, value: 'RegionMode') -> "CRegionMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CRegionMode object with the value set.
        """
        return _neoapi.CRegionMode_Set(self, value)

    def Get(self) -> "RegionMode":
        """
        Get the current value.
        Return: The RegionMode value.
        """
        return _neoapi.CRegionMode_Get(self)

    value = property(Get, Set)

CRegionMode_swigregister = _neoapi.CRegionMode_swigregister
CRegionMode_swigregister(CRegionMode)

RegionSelector_All = _neoapi.RegionSelector_All
RegionSelector_Region0 = _neoapi.RegionSelector_Region0
RegionSelector_Region1 = _neoapi.RegionSelector_Region1
RegionSelector_Region2 = _neoapi.RegionSelector_Region2
RegionSelector_Region3 = _neoapi.RegionSelector_Region3
RegionSelector_Region4 = _neoapi.RegionSelector_Region4
RegionSelector_Region5 = _neoapi.RegionSelector_Region5
RegionSelector_Region6 = _neoapi.RegionSelector_Region6
RegionSelector_Region7 = _neoapi.RegionSelector_Region7
RegionSelector_Scan3dExtraction0 = _neoapi.RegionSelector_Scan3dExtraction0
RegionSelector_Scan3dExtraction1 = _neoapi.RegionSelector_Scan3dExtraction1
RegionSelector_Scan3dExtraction2 = _neoapi.RegionSelector_Scan3dExtraction2
class CRegionSelector(EnumerationFeature):
    """
    Selects the Region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegionSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegionSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CRegionSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CRegionSelector
    __del__ = lambda self: None

    def Set(self, value: 'RegionSelector') -> "CRegionSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CRegionSelector object with the value set.
        """
        return _neoapi.CRegionSelector_Set(self, value)

    def Get(self) -> "RegionSelector":
        """
        Get the current value.
        Return: The RegionSelector value.
        """
        return _neoapi.CRegionSelector_Get(self)

    value = property(Get, Set)

CRegionSelector_swigregister = _neoapi.CRegionSelector_swigregister
CRegionSelector_swigregister(CRegionSelector)

RegionTransferMode_SeparateImages = _neoapi.RegionTransferMode_SeparateImages
RegionTransferMode_StackedImage = _neoapi.RegionTransferMode_StackedImage
class CRegionTransferMode(EnumerationFeature):
    """
    Returns the transfer mode of the regions.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegionTransferMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRegionTransferMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CRegionTransferMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CRegionTransferMode
    __del__ = lambda self: None

    def Set(self, value: 'RegionTransferMode') -> "CRegionTransferMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CRegionTransferMode object with the value set.
        """
        return _neoapi.CRegionTransferMode_Set(self, value)

    def Get(self) -> "RegionTransferMode":
        """
        Get the current value.
        Return: The RegionTransferMode value.
        """
        return _neoapi.CRegionTransferMode_Get(self)

    value = property(Get, Set)

CRegionTransferMode_swigregister = _neoapi.CRegionTransferMode_swigregister
CRegionTransferMode_swigregister(CRegionTransferMode)

SIControl_StreamDisabled = _neoapi.SIControl_StreamDisabled
SIControl_StreamEnabled = _neoapi.SIControl_StreamEnabled
class CSIControl(EnumerationFeature):
    """
    Controls the streaming operation.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSIControl, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSIControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSIControl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSIControl
    __del__ = lambda self: None

    def Set(self, value: 'SIControl') -> "CSIControl":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSIControl object with the value set.
        """
        return _neoapi.CSIControl_Set(self, value)

    def Get(self) -> "SIControl":
        """
        Get the current value.
        Return: The SIControl value.
        """
        return _neoapi.CSIControl_Get(self)

    value = property(Get, Set)

CSIControl_swigregister = _neoapi.CSIControl_swigregister
CSIControl_swigregister(CSIControl)

SensorADDigitization_Bpp10 = _neoapi.SensorADDigitization_Bpp10
SensorADDigitization_Bpp12 = _neoapi.SensorADDigitization_Bpp12
SensorADDigitization_Bpp8 = _neoapi.SensorADDigitization_Bpp8
class CSensorADDigitization(EnumerationFeature):
    """
    Controls the sensors AD digitization in bits per pixels.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensorADDigitization, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensorADDigitization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSensorADDigitization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSensorADDigitization
    __del__ = lambda self: None

    def Set(self, value: 'SensorADDigitization') -> "CSensorADDigitization":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSensorADDigitization object with the value set.
        """
        return _neoapi.CSensorADDigitization_Set(self, value)

    def Get(self) -> "SensorADDigitization":
        """
        Get the current value.
        Return: The SensorADDigitization value.
        """
        return _neoapi.CSensorADDigitization_Get(self)

    value = property(Get, Set)

CSensorADDigitization_swigregister = _neoapi.CSensorADDigitization_swigregister
CSensorADDigitization_swigregister(CSensorADDigitization)

SensorDigitizationTaps_Eight = _neoapi.SensorDigitizationTaps_Eight
SensorDigitizationTaps_Four = _neoapi.SensorDigitizationTaps_Four
SensorDigitizationTaps_One = _neoapi.SensorDigitizationTaps_One
SensorDigitizationTaps_Ten = _neoapi.SensorDigitizationTaps_Ten
SensorDigitizationTaps_Three = _neoapi.SensorDigitizationTaps_Three
SensorDigitizationTaps_Two = _neoapi.SensorDigitizationTaps_Two
class CSensorDigitizationTaps(EnumerationFeature):
    """
    Number of digitized samples outputted simultaneously by the camera A/D conversion stage.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensorDigitizationTaps, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensorDigitizationTaps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSensorDigitizationTaps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSensorDigitizationTaps
    __del__ = lambda self: None

    def Set(self, value: 'SensorDigitizationTaps') -> "CSensorDigitizationTaps":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSensorDigitizationTaps object with the value set.
        """
        return _neoapi.CSensorDigitizationTaps_Set(self, value)

    def Get(self) -> "SensorDigitizationTaps":
        """
        Get the current value.
        Return: The SensorDigitizationTaps value.
        """
        return _neoapi.CSensorDigitizationTaps_Get(self)

    value = property(Get, Set)

CSensorDigitizationTaps_swigregister = _neoapi.CSensorDigitizationTaps_swigregister
CSensorDigitizationTaps_swigregister(CSensorDigitizationTaps)

SensorShutterMode_Global = _neoapi.SensorShutterMode_Global
SensorShutterMode_GlobalReset = _neoapi.SensorShutterMode_GlobalReset
SensorShutterMode_Rolling = _neoapi.SensorShutterMode_Rolling
class CSensorShutterMode(EnumerationFeature):
    """
    Specifies the shutter mode of the device.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensorShutterMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensorShutterMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSensorShutterMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSensorShutterMode
    __del__ = lambda self: None

    def Set(self, value: 'SensorShutterMode') -> "CSensorShutterMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSensorShutterMode object with the value set.
        """
        return _neoapi.CSensorShutterMode_Set(self, value)

    def Get(self) -> "SensorShutterMode":
        """
        Get the current value.
        Return: The SensorShutterMode value.
        """
        return _neoapi.CSensorShutterMode_Get(self)

    value = property(Get, Set)

CSensorShutterMode_swigregister = _neoapi.CSensorShutterMode_swigregister
CSensorShutterMode_swigregister(CSensorShutterMode)

SensorTaps_Eight = _neoapi.SensorTaps_Eight
SensorTaps_Four = _neoapi.SensorTaps_Four
SensorTaps_One = _neoapi.SensorTaps_One
SensorTaps_Ten = _neoapi.SensorTaps_Ten
SensorTaps_Three = _neoapi.SensorTaps_Three
SensorTaps_Two = _neoapi.SensorTaps_Two
class CSensorTaps(EnumerationFeature):
    """
    Number of taps of the camera sensor.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSensorTaps, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSensorTaps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSensorTaps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSensorTaps
    __del__ = lambda self: None

    def Set(self, value: 'SensorTaps') -> "CSensorTaps":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSensorTaps object with the value set.
        """
        return _neoapi.CSensorTaps_Set(self, value)

    def Get(self) -> "SensorTaps":
        """
        Get the current value.
        Return: The SensorTaps value.
        """
        return _neoapi.CSensorTaps_Get(self)

    value = property(Get, Set)

CSensorTaps_swigregister = _neoapi.CSensorTaps_swigregister
CSensorTaps_swigregister(CSensorTaps)

SequencerConfigurationMode_Off = _neoapi.SequencerConfigurationMode_Off
SequencerConfigurationMode_On = _neoapi.SequencerConfigurationMode_On
class CSequencerConfigurationMode(EnumerationFeature):
    """
    Controls if the sequencer configuration mode is active.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSequencerConfigurationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSequencerConfigurationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSequencerConfigurationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSequencerConfigurationMode
    __del__ = lambda self: None

    def Set(self, value: 'SequencerConfigurationMode') -> "CSequencerConfigurationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSequencerConfigurationMode object with the value set.
        """
        return _neoapi.CSequencerConfigurationMode_Set(self, value)

    def Get(self) -> "SequencerConfigurationMode":
        """
        Get the current value.
        Return: The SequencerConfigurationMode value.
        """
        return _neoapi.CSequencerConfigurationMode_Get(self)

    value = property(Get, Set)

CSequencerConfigurationMode_swigregister = _neoapi.CSequencerConfigurationMode_swigregister
CSequencerConfigurationMode_swigregister(CSequencerConfigurationMode)

SequencerFeatureSelector_CounterDuration = _neoapi.SequencerFeatureSelector_CounterDuration
SequencerFeatureSelector_CounterEventActivation = _neoapi.SequencerFeatureSelector_CounterEventActivation
SequencerFeatureSelector_CounterEventSource = _neoapi.SequencerFeatureSelector_CounterEventSource
SequencerFeatureSelector_CounterResetActivation = _neoapi.SequencerFeatureSelector_CounterResetActivation
SequencerFeatureSelector_CounterResetSource = _neoapi.SequencerFeatureSelector_CounterResetSource
SequencerFeatureSelector_DeviceSpecific = _neoapi.SequencerFeatureSelector_DeviceSpecific
SequencerFeatureSelector_ExposureMode = _neoapi.SequencerFeatureSelector_ExposureMode
SequencerFeatureSelector_ExposureTime = _neoapi.SequencerFeatureSelector_ExposureTime
SequencerFeatureSelector_Gain = _neoapi.SequencerFeatureSelector_Gain
SequencerFeatureSelector_Height = _neoapi.SequencerFeatureSelector_Height
SequencerFeatureSelector_OffsetX = _neoapi.SequencerFeatureSelector_OffsetX
SequencerFeatureSelector_OffsetY = _neoapi.SequencerFeatureSelector_OffsetY
SequencerFeatureSelector_TriggerMode = _neoapi.SequencerFeatureSelector_TriggerMode
SequencerFeatureSelector_UserOutputValue = _neoapi.SequencerFeatureSelector_UserOutputValue
SequencerFeatureSelector_UserOutputValueAll = _neoapi.SequencerFeatureSelector_UserOutputValueAll
SequencerFeatureSelector_Width = _neoapi.SequencerFeatureSelector_Width
class CSequencerFeatureSelector(EnumerationFeature):
    """
    Selects which sequencer features to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSequencerFeatureSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSequencerFeatureSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSequencerFeatureSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSequencerFeatureSelector
    __del__ = lambda self: None

    def Set(self, value: 'SequencerFeatureSelector') -> "CSequencerFeatureSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSequencerFeatureSelector object with the value set.
        """
        return _neoapi.CSequencerFeatureSelector_Set(self, value)

    def Get(self) -> "SequencerFeatureSelector":
        """
        Get the current value.
        Return: The SequencerFeatureSelector value.
        """
        return _neoapi.CSequencerFeatureSelector_Get(self)

    value = property(Get, Set)

CSequencerFeatureSelector_swigregister = _neoapi.CSequencerFeatureSelector_swigregister
CSequencerFeatureSelector_swigregister(CSequencerFeatureSelector)

SequencerMode_Off = _neoapi.SequencerMode_Off
SequencerMode_On = _neoapi.SequencerMode_On
class CSequencerMode(EnumerationFeature):
    """
    Controls if the sequencer mechanism is active.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSequencerMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSequencerMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSequencerMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSequencerMode
    __del__ = lambda self: None

    def Set(self, value: 'SequencerMode') -> "CSequencerMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSequencerMode object with the value set.
        """
        return _neoapi.CSequencerMode_Set(self, value)

    def Get(self) -> "SequencerMode":
        """
        Get the current value.
        Return: The SequencerMode value.
        """
        return _neoapi.CSequencerMode_Get(self)

    value = property(Get, Set)

CSequencerMode_swigregister = _neoapi.CSequencerMode_swigregister
CSequencerMode_swigregister(CSequencerMode)

SequencerTriggerActivation_AnyEdge = _neoapi.SequencerTriggerActivation_AnyEdge
SequencerTriggerActivation_FallingEdge = _neoapi.SequencerTriggerActivation_FallingEdge
SequencerTriggerActivation_LevelHigh = _neoapi.SequencerTriggerActivation_LevelHigh
SequencerTriggerActivation_LevelLow = _neoapi.SequencerTriggerActivation_LevelLow
SequencerTriggerActivation_RisingEdge = _neoapi.SequencerTriggerActivation_RisingEdge
class CSequencerTriggerActivation(EnumerationFeature):
    """
    Specifies the activation mode of the sequencer trigger.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSequencerTriggerActivation, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSequencerTriggerActivation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSequencerTriggerActivation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSequencerTriggerActivation
    __del__ = lambda self: None

    def Set(self, value: 'SequencerTriggerActivation') -> "CSequencerTriggerActivation":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSequencerTriggerActivation object with the value set.
        """
        return _neoapi.CSequencerTriggerActivation_Set(self, value)

    def Get(self) -> "SequencerTriggerActivation":
        """
        Get the current value.
        Return: The SequencerTriggerActivation value.
        """
        return _neoapi.CSequencerTriggerActivation_Get(self)

    value = property(Get, Set)

CSequencerTriggerActivation_swigregister = _neoapi.CSequencerTriggerActivation_swigregister
CSequencerTriggerActivation_swigregister(CSequencerTriggerActivation)

SequencerTriggerSource_AcquisitionEnd = _neoapi.SequencerTriggerSource_AcquisitionEnd
SequencerTriggerSource_AcquisitionStart = _neoapi.SequencerTriggerSource_AcquisitionStart
SequencerTriggerSource_AcquisitionTrigger = _neoapi.SequencerTriggerSource_AcquisitionTrigger
SequencerTriggerSource_AcquisitionTriggerMissed = _neoapi.SequencerTriggerSource_AcquisitionTriggerMissed
SequencerTriggerSource_Action0 = _neoapi.SequencerTriggerSource_Action0
SequencerTriggerSource_Action1 = _neoapi.SequencerTriggerSource_Action1
SequencerTriggerSource_Action2 = _neoapi.SequencerTriggerSource_Action2
SequencerTriggerSource_CC1 = _neoapi.SequencerTriggerSource_CC1
SequencerTriggerSource_CC2 = _neoapi.SequencerTriggerSource_CC2
SequencerTriggerSource_CC3 = _neoapi.SequencerTriggerSource_CC3
SequencerTriggerSource_CC4 = _neoapi.SequencerTriggerSource_CC4
SequencerTriggerSource_Counter0End = _neoapi.SequencerTriggerSource_Counter0End
SequencerTriggerSource_Counter0Start = _neoapi.SequencerTriggerSource_Counter0Start
SequencerTriggerSource_Counter1End = _neoapi.SequencerTriggerSource_Counter1End
SequencerTriggerSource_Counter1Start = _neoapi.SequencerTriggerSource_Counter1Start
SequencerTriggerSource_Counter2End = _neoapi.SequencerTriggerSource_Counter2End
SequencerTriggerSource_Counter2Start = _neoapi.SequencerTriggerSource_Counter2Start
SequencerTriggerSource_Encoder0 = _neoapi.SequencerTriggerSource_Encoder0
SequencerTriggerSource_Encoder1 = _neoapi.SequencerTriggerSource_Encoder1
SequencerTriggerSource_Encoder2 = _neoapi.SequencerTriggerSource_Encoder2
SequencerTriggerSource_ExposureActive = _neoapi.SequencerTriggerSource_ExposureActive
SequencerTriggerSource_ExposureEnd = _neoapi.SequencerTriggerSource_ExposureEnd
SequencerTriggerSource_ExposureStart = _neoapi.SequencerTriggerSource_ExposureStart
SequencerTriggerSource_FrameBurstEnd = _neoapi.SequencerTriggerSource_FrameBurstEnd
SequencerTriggerSource_FrameBurstStart = _neoapi.SequencerTriggerSource_FrameBurstStart
SequencerTriggerSource_FrameEnd = _neoapi.SequencerTriggerSource_FrameEnd
SequencerTriggerSource_FrameStart = _neoapi.SequencerTriggerSource_FrameStart
SequencerTriggerSource_FrameTrigger = _neoapi.SequencerTriggerSource_FrameTrigger
SequencerTriggerSource_FrameTriggerMissed = _neoapi.SequencerTriggerSource_FrameTriggerMissed
SequencerTriggerSource_Line0 = _neoapi.SequencerTriggerSource_Line0
SequencerTriggerSource_Line1 = _neoapi.SequencerTriggerSource_Line1
SequencerTriggerSource_Line2 = _neoapi.SequencerTriggerSource_Line2
SequencerTriggerSource_LinkTrigger0 = _neoapi.SequencerTriggerSource_LinkTrigger0
SequencerTriggerSource_LinkTrigger1 = _neoapi.SequencerTriggerSource_LinkTrigger1
SequencerTriggerSource_LinkTrigger2 = _neoapi.SequencerTriggerSource_LinkTrigger2
SequencerTriggerSource_LogicBlock0 = _neoapi.SequencerTriggerSource_LogicBlock0
SequencerTriggerSource_LogicBlock1 = _neoapi.SequencerTriggerSource_LogicBlock1
SequencerTriggerSource_LogicBlock2 = _neoapi.SequencerTriggerSource_LogicBlock2
SequencerTriggerSource_Off = _neoapi.SequencerTriggerSource_Off
SequencerTriggerSource_ReadOutActive = _neoapi.SequencerTriggerSource_ReadOutActive
SequencerTriggerSource_SoftwareSignal0 = _neoapi.SequencerTriggerSource_SoftwareSignal0
SequencerTriggerSource_SoftwareSignal1 = _neoapi.SequencerTriggerSource_SoftwareSignal1
SequencerTriggerSource_SoftwareSignal2 = _neoapi.SequencerTriggerSource_SoftwareSignal2
SequencerTriggerSource_Timer0End = _neoapi.SequencerTriggerSource_Timer0End
SequencerTriggerSource_Timer0Start = _neoapi.SequencerTriggerSource_Timer0Start
SequencerTriggerSource_Timer1End = _neoapi.SequencerTriggerSource_Timer1End
SequencerTriggerSource_Timer1Start = _neoapi.SequencerTriggerSource_Timer1Start
SequencerTriggerSource_Timer2End = _neoapi.SequencerTriggerSource_Timer2End
SequencerTriggerSource_Timer2Start = _neoapi.SequencerTriggerSource_Timer2Start
SequencerTriggerSource_UserOutput0 = _neoapi.SequencerTriggerSource_UserOutput0
SequencerTriggerSource_UserOutput1 = _neoapi.SequencerTriggerSource_UserOutput1
SequencerTriggerSource_UserOutput2 = _neoapi.SequencerTriggerSource_UserOutput2
class CSequencerTriggerSource(EnumerationFeature):
    """
    Specifies the internal signal or physical input line to use as the sequencer trigger source.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSequencerTriggerSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSequencerTriggerSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSequencerTriggerSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSequencerTriggerSource
    __del__ = lambda self: None

    def Set(self, value: 'SequencerTriggerSource') -> "CSequencerTriggerSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSequencerTriggerSource object with the value set.
        """
        return _neoapi.CSequencerTriggerSource_Set(self, value)

    def Get(self) -> "SequencerTriggerSource":
        """
        Get the current value.
        Return: The SequencerTriggerSource value.
        """
        return _neoapi.CSequencerTriggerSource_Get(self)

    value = property(Get, Set)

CSequencerTriggerSource_swigregister = _neoapi.CSequencerTriggerSource_swigregister
CSequencerTriggerSource_swigregister(CSequencerTriggerSource)

ShadingSelector_Pixel0 = _neoapi.ShadingSelector_Pixel0
ShadingSelector_Pixel1 = _neoapi.ShadingSelector_Pixel1
class CShadingSelector(EnumerationFeature):
    """
    Selects the Shading Port Address.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CShadingSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CShadingSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CShadingSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CShadingSelector
    __del__ = lambda self: None

    def Set(self, value: 'ShadingSelector') -> "CShadingSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CShadingSelector object with the value set.
        """
        return _neoapi.CShadingSelector_Set(self, value)

    def Get(self) -> "ShadingSelector":
        """
        Get the current value.
        Return: The ShadingSelector value.
        """
        return _neoapi.CShadingSelector_Get(self)

    value = property(Get, Set)

CShadingSelector_swigregister = _neoapi.CShadingSelector_swigregister
CShadingSelector_swigregister(CShadingSelector)

SharpeningMode_ActiveNoiseReduction = _neoapi.SharpeningMode_ActiveNoiseReduction
SharpeningMode_AdaptiveSharpening = _neoapi.SharpeningMode_AdaptiveSharpening
SharpeningMode_GlobalSharpening = _neoapi.SharpeningMode_GlobalSharpening
SharpeningMode_Off = _neoapi.SharpeningMode_Off
class CSharpeningMode(EnumerationFeature):
    """
    Selects the Sharpening Mode.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSharpeningMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSharpeningMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSharpeningMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSharpeningMode
    __del__ = lambda self: None

    def Set(self, value: 'SharpeningMode') -> "CSharpeningMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSharpeningMode object with the value set.
        """
        return _neoapi.CSharpeningMode_Set(self, value)

    def Get(self) -> "SharpeningMode":
        """
        Get the current value.
        Return: The SharpeningMode value.
        """
        return _neoapi.CSharpeningMode_Get(self)

    value = property(Get, Set)

CSharpeningMode_swigregister = _neoapi.CSharpeningMode_swigregister
CSharpeningMode_swigregister(CSharpeningMode)

SourceID_Sensor1 = _neoapi.SourceID_Sensor1
SourceID_Sensor2 = _neoapi.SourceID_Sensor2
class CSourceID(EnumerationFeature):
    """
    Returns a unique Identifier value that correspond to the selected Source.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSourceID, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSourceID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSourceID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSourceID
    __del__ = lambda self: None

    def Set(self, value: 'SourceID') -> "CSourceID":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSourceID object with the value set.
        """
        return _neoapi.CSourceID_Set(self, value)

    def Get(self) -> "SourceID":
        """
        Get the current value.
        Return: The SourceID value.
        """
        return _neoapi.CSourceID_Get(self)

    value = property(Get, Set)

CSourceID_swigregister = _neoapi.CSourceID_swigregister
CSourceID_swigregister(CSourceID)

SourceSelector_All = _neoapi.SourceSelector_All
SourceSelector_Source0 = _neoapi.SourceSelector_Source0
SourceSelector_Source1 = _neoapi.SourceSelector_Source1
SourceSelector_Source2 = _neoapi.SourceSelector_Source2
class CSourceSelector(EnumerationFeature):
    """
    Selects the source to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSourceSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSourceSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSourceSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSourceSelector
    __del__ = lambda self: None

    def Set(self, value: 'SourceSelector') -> "CSourceSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSourceSelector object with the value set.
        """
        return _neoapi.CSourceSelector_Set(self, value)

    def Get(self) -> "SourceSelector":
        """
        Get the current value.
        Return: The SourceSelector value.
        """
        return _neoapi.CSourceSelector_Get(self)

    value = property(Get, Set)

CSourceSelector_swigregister = _neoapi.CSourceSelector_swigregister
CSourceSelector_swigregister(CSourceSelector)

SwitchPortSelector_Port0 = _neoapi.SwitchPortSelector_Port0
SwitchPortSelector_Port1 = _neoapi.SwitchPortSelector_Port1
SwitchPortSelector_Port2 = _neoapi.SwitchPortSelector_Port2
SwitchPortSelector_Port3 = _neoapi.SwitchPortSelector_Port3
SwitchPortSelector_Port4 = _neoapi.SwitchPortSelector_Port4
SwitchPortSelector_Port5 = _neoapi.SwitchPortSelector_Port5
class CSwitchPortSelector(EnumerationFeature):
    """
    Selects the port for the port related features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSwitchPortSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSwitchPortSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CSwitchPortSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CSwitchPortSelector
    __del__ = lambda self: None

    def Set(self, value: 'SwitchPortSelector') -> "CSwitchPortSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CSwitchPortSelector object with the value set.
        """
        return _neoapi.CSwitchPortSelector_Set(self, value)

    def Get(self) -> "SwitchPortSelector":
        """
        Get the current value.
        Return: The SwitchPortSelector value.
        """
        return _neoapi.CSwitchPortSelector_Get(self)

    value = property(Get, Set)

CSwitchPortSelector_swigregister = _neoapi.CSwitchPortSelector_swigregister
CSwitchPortSelector_swigregister(CSwitchPortSelector)

TestPattern_Black = _neoapi.TestPattern_Black
TestPattern_ColorBar = _neoapi.TestPattern_ColorBar
TestPattern_FrameCounter = _neoapi.TestPattern_FrameCounter
TestPattern_GreyDiagonalRamp = _neoapi.TestPattern_GreyDiagonalRamp
TestPattern_GreyDiagonalRampHorizontalAndVerticalLineMoving = _neoapi.TestPattern_GreyDiagonalRampHorizontalAndVerticalLineMoving
TestPattern_GreyDiagonalRampHorizontalLineMoving = _neoapi.TestPattern_GreyDiagonalRampHorizontalLineMoving
TestPattern_GreyDiagonalRampVerticalLineMoving = _neoapi.TestPattern_GreyDiagonalRampVerticalLineMoving
TestPattern_GreyDiagonalRampWithLineMoving = _neoapi.TestPattern_GreyDiagonalRampWithLineMoving
TestPattern_GreyHorizontalRamp = _neoapi.TestPattern_GreyHorizontalRamp
TestPattern_GreyHorizontalRampHorizontalAndVerticalLineMoving = _neoapi.TestPattern_GreyHorizontalRampHorizontalAndVerticalLineMoving
TestPattern_GreyHorizontalRampHorizontalLineMoving = _neoapi.TestPattern_GreyHorizontalRampHorizontalLineMoving
TestPattern_GreyHorizontalRampMoving = _neoapi.TestPattern_GreyHorizontalRampMoving
TestPattern_GreyHorizontalRampVerticalLineMoving = _neoapi.TestPattern_GreyHorizontalRampVerticalLineMoving
TestPattern_GreyVerticalRamp = _neoapi.TestPattern_GreyVerticalRamp
TestPattern_GreyVerticalRampHorizontalAndVerticalLineMoving = _neoapi.TestPattern_GreyVerticalRampHorizontalAndVerticalLineMoving
TestPattern_GreyVerticalRampHorizontalLineMoving = _neoapi.TestPattern_GreyVerticalRampHorizontalLineMoving
TestPattern_GreyVerticalRampMoving = _neoapi.TestPattern_GreyVerticalRampMoving
TestPattern_GreyVerticalRampVerticalLineMoving = _neoapi.TestPattern_GreyVerticalRampVerticalLineMoving
TestPattern_HorizontalAndVerticalLineMoving = _neoapi.TestPattern_HorizontalAndVerticalLineMoving
TestPattern_HorizontalLineMoving = _neoapi.TestPattern_HorizontalLineMoving
TestPattern_Off = _neoapi.TestPattern_Off
TestPattern_VerticalLineMoving = _neoapi.TestPattern_VerticalLineMoving
TestPattern_White = _neoapi.TestPattern_White
class CTestPattern(EnumerationFeature):
    """
    Selects the type of test pattern that is generated by the device as image source.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTestPattern, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTestPattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTestPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTestPattern
    __del__ = lambda self: None

    def Set(self, value: 'TestPattern') -> "CTestPattern":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTestPattern object with the value set.
        """
        return _neoapi.CTestPattern_Set(self, value)

    def Get(self) -> "TestPattern":
        """
        Get the current value.
        Return: The TestPattern value.
        """
        return _neoapi.CTestPattern_Get(self)

    value = property(Get, Set)

CTestPattern_swigregister = _neoapi.CTestPattern_swigregister
CTestPattern_swigregister(CTestPattern)

TestPatternGeneratorSelector_ImageProcessor = _neoapi.TestPatternGeneratorSelector_ImageProcessor
TestPatternGeneratorSelector_Region0 = _neoapi.TestPatternGeneratorSelector_Region0
TestPatternGeneratorSelector_Region1 = _neoapi.TestPatternGeneratorSelector_Region1
TestPatternGeneratorSelector_Region2 = _neoapi.TestPatternGeneratorSelector_Region2
TestPatternGeneratorSelector_Sensor = _neoapi.TestPatternGeneratorSelector_Sensor
TestPatternGeneratorSelector_SensorProcessor = _neoapi.TestPatternGeneratorSelector_SensorProcessor
class CTestPatternGeneratorSelector(EnumerationFeature):
    """
    Selects which test pattern generator is controlled by the TestPattern feature.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTestPatternGeneratorSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTestPatternGeneratorSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTestPatternGeneratorSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTestPatternGeneratorSelector
    __del__ = lambda self: None

    def Set(self, value: 'TestPatternGeneratorSelector') -> "CTestPatternGeneratorSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTestPatternGeneratorSelector object with the value set.
        """
        return _neoapi.CTestPatternGeneratorSelector_Set(self, value)

    def Get(self) -> "TestPatternGeneratorSelector":
        """
        Get the current value.
        Return: The TestPatternGeneratorSelector value.
        """
        return _neoapi.CTestPatternGeneratorSelector_Get(self)

    value = property(Get, Set)

CTestPatternGeneratorSelector_swigregister = _neoapi.CTestPatternGeneratorSelector_swigregister
CTestPatternGeneratorSelector_swigregister(CTestPatternGeneratorSelector)

TimerSelector_Timer0 = _neoapi.TimerSelector_Timer0
TimerSelector_Timer1 = _neoapi.TimerSelector_Timer1
TimerSelector_Timer2 = _neoapi.TimerSelector_Timer2
TimerSelector_Timer3 = _neoapi.TimerSelector_Timer3
class CTimerSelector(EnumerationFeature):
    """
    Selects which Timer to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTimerSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTimerSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTimerSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTimerSelector
    __del__ = lambda self: None

    def Set(self, value: 'TimerSelector') -> "CTimerSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTimerSelector object with the value set.
        """
        return _neoapi.CTimerSelector_Set(self, value)

    def Get(self) -> "TimerSelector":
        """
        Get the current value.
        Return: The TimerSelector value.
        """
        return _neoapi.CTimerSelector_Get(self)

    value = property(Get, Set)

CTimerSelector_swigregister = _neoapi.CTimerSelector_swigregister
CTimerSelector_swigregister(CTimerSelector)

TimerTriggerActivation_AnyEdge = _neoapi.TimerTriggerActivation_AnyEdge
TimerTriggerActivation_FallingEdge = _neoapi.TimerTriggerActivation_FallingEdge
TimerTriggerActivation_LevelHigh = _neoapi.TimerTriggerActivation_LevelHigh
TimerTriggerActivation_LevelLow = _neoapi.TimerTriggerActivation_LevelLow
TimerTriggerActivation_RisingEdge = _neoapi.TimerTriggerActivation_RisingEdge
class CTimerTriggerActivation(EnumerationFeature):
    """
    Selects the activation mode of the trigger to start the Timer.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTimerTriggerActivation, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTimerTriggerActivation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTimerTriggerActivation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTimerTriggerActivation
    __del__ = lambda self: None

    def Set(self, value: 'TimerTriggerActivation') -> "CTimerTriggerActivation":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTimerTriggerActivation object with the value set.
        """
        return _neoapi.CTimerTriggerActivation_Set(self, value)

    def Get(self) -> "TimerTriggerActivation":
        """
        Get the current value.
        Return: The TimerTriggerActivation value.
        """
        return _neoapi.CTimerTriggerActivation_Get(self)

    value = property(Get, Set)

CTimerTriggerActivation_swigregister = _neoapi.CTimerTriggerActivation_swigregister
CTimerTriggerActivation_swigregister(CTimerTriggerActivation)

TimerTriggerSource_AcquisitionEnd = _neoapi.TimerTriggerSource_AcquisitionEnd
TimerTriggerSource_AcquisitionStart = _neoapi.TimerTriggerSource_AcquisitionStart
TimerTriggerSource_AcquisitionTrigger = _neoapi.TimerTriggerSource_AcquisitionTrigger
TimerTriggerSource_AcquisitionTriggerMissed = _neoapi.TimerTriggerSource_AcquisitionTriggerMissed
TimerTriggerSource_Action0 = _neoapi.TimerTriggerSource_Action0
TimerTriggerSource_Action1 = _neoapi.TimerTriggerSource_Action1
TimerTriggerSource_Action2 = _neoapi.TimerTriggerSource_Action2
TimerTriggerSource_Counter0End = _neoapi.TimerTriggerSource_Counter0End
TimerTriggerSource_Counter0Start = _neoapi.TimerTriggerSource_Counter0Start
TimerTriggerSource_Counter1End = _neoapi.TimerTriggerSource_Counter1End
TimerTriggerSource_Counter1Start = _neoapi.TimerTriggerSource_Counter1Start
TimerTriggerSource_Counter2End = _neoapi.TimerTriggerSource_Counter2End
TimerTriggerSource_Counter2Start = _neoapi.TimerTriggerSource_Counter2Start
TimerTriggerSource_Encoder0 = _neoapi.TimerTriggerSource_Encoder0
TimerTriggerSource_Encoder1 = _neoapi.TimerTriggerSource_Encoder1
TimerTriggerSource_Encoder2 = _neoapi.TimerTriggerSource_Encoder2
TimerTriggerSource_ExposureEnd = _neoapi.TimerTriggerSource_ExposureEnd
TimerTriggerSource_ExposureStart = _neoapi.TimerTriggerSource_ExposureStart
TimerTriggerSource_FrameBurstEnd = _neoapi.TimerTriggerSource_FrameBurstEnd
TimerTriggerSource_FrameBurstStart = _neoapi.TimerTriggerSource_FrameBurstStart
TimerTriggerSource_FrameEnd = _neoapi.TimerTriggerSource_FrameEnd
TimerTriggerSource_FrameStart = _neoapi.TimerTriggerSource_FrameStart
TimerTriggerSource_FrameTransferSkipped = _neoapi.TimerTriggerSource_FrameTransferSkipped
TimerTriggerSource_FrameTrigger = _neoapi.TimerTriggerSource_FrameTrigger
TimerTriggerSource_FrameTriggerMissed = _neoapi.TimerTriggerSource_FrameTriggerMissed
TimerTriggerSource_Line0 = _neoapi.TimerTriggerSource_Line0
TimerTriggerSource_Line1 = _neoapi.TimerTriggerSource_Line1
TimerTriggerSource_Line2 = _neoapi.TimerTriggerSource_Line2
TimerTriggerSource_LineEnd = _neoapi.TimerTriggerSource_LineEnd
TimerTriggerSource_LineStart = _neoapi.TimerTriggerSource_LineStart
TimerTriggerSource_LineTrigger = _neoapi.TimerTriggerSource_LineTrigger
TimerTriggerSource_LineTriggerMissed = _neoapi.TimerTriggerSource_LineTriggerMissed
TimerTriggerSource_LinkTrigger0 = _neoapi.TimerTriggerSource_LinkTrigger0
TimerTriggerSource_LinkTrigger1 = _neoapi.TimerTriggerSource_LinkTrigger1
TimerTriggerSource_LinkTrigger2 = _neoapi.TimerTriggerSource_LinkTrigger2
TimerTriggerSource_LogicBlock0 = _neoapi.TimerTriggerSource_LogicBlock0
TimerTriggerSource_LogicBlock1 = _neoapi.TimerTriggerSource_LogicBlock1
TimerTriggerSource_LogicBlock2 = _neoapi.TimerTriggerSource_LogicBlock2
TimerTriggerSource_Off = _neoapi.TimerTriggerSource_Off
TimerTriggerSource_Software = _neoapi.TimerTriggerSource_Software
TimerTriggerSource_SoftwareSignal0 = _neoapi.TimerTriggerSource_SoftwareSignal0
TimerTriggerSource_SoftwareSignal1 = _neoapi.TimerTriggerSource_SoftwareSignal1
TimerTriggerSource_SoftwareSignal2 = _neoapi.TimerTriggerSource_SoftwareSignal2
TimerTriggerSource_Timer0End = _neoapi.TimerTriggerSource_Timer0End
TimerTriggerSource_Timer0Start = _neoapi.TimerTriggerSource_Timer0Start
TimerTriggerSource_Timer1End = _neoapi.TimerTriggerSource_Timer1End
TimerTriggerSource_Timer1Start = _neoapi.TimerTriggerSource_Timer1Start
TimerTriggerSource_Timer2End = _neoapi.TimerTriggerSource_Timer2End
TimerTriggerSource_Timer2Start = _neoapi.TimerTriggerSource_Timer2Start
TimerTriggerSource_TriggerSkipped = _neoapi.TimerTriggerSource_TriggerSkipped
TimerTriggerSource_UserOutput0 = _neoapi.TimerTriggerSource_UserOutput0
TimerTriggerSource_UserOutput1 = _neoapi.TimerTriggerSource_UserOutput1
TimerTriggerSource_UserOutput2 = _neoapi.TimerTriggerSource_UserOutput2
class CTimerTriggerSource(EnumerationFeature):
    """
    Selects the source of the trigger to start the Timer.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTimerTriggerSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTimerTriggerSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTimerTriggerSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTimerTriggerSource
    __del__ = lambda self: None

    def Set(self, value: 'TimerTriggerSource') -> "CTimerTriggerSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTimerTriggerSource object with the value set.
        """
        return _neoapi.CTimerTriggerSource_Set(self, value)

    def Get(self) -> "TimerTriggerSource":
        """
        Get the current value.
        Return: The TimerTriggerSource value.
        """
        return _neoapi.CTimerTriggerSource_Get(self)

    value = property(Get, Set)

CTimerTriggerSource_swigregister = _neoapi.CTimerTriggerSource_swigregister
CTimerTriggerSource_swigregister(CTimerTriggerSource)

TransferControlMode_Automatic = _neoapi.TransferControlMode_Automatic
TransferControlMode_Basic = _neoapi.TransferControlMode_Basic
TransferControlMode_UserControlled = _neoapi.TransferControlMode_UserControlled
class CTransferControlMode(EnumerationFeature):
    """
    Selects the control method for the transfers.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransferControlMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTransferControlMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTransferControlMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTransferControlMode
    __del__ = lambda self: None

    def Set(self, value: 'TransferControlMode') -> "CTransferControlMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTransferControlMode object with the value set.
        """
        return _neoapi.CTransferControlMode_Set(self, value)

    def Get(self) -> "TransferControlMode":
        """
        Get the current value.
        Return: The TransferControlMode value.
        """
        return _neoapi.CTransferControlMode_Get(self)

    value = property(Get, Set)

CTransferControlMode_swigregister = _neoapi.CTransferControlMode_swigregister
CTransferControlMode_swigregister(CTransferControlMode)

TransferOperationMode_Continuous = _neoapi.TransferOperationMode_Continuous
TransferOperationMode_MultiBlock = _neoapi.TransferOperationMode_MultiBlock
class CTransferOperationMode(EnumerationFeature):
    """
    Selects the operation mode of the transfer.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransferOperationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTransferOperationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTransferOperationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTransferOperationMode
    __del__ = lambda self: None

    def Set(self, value: 'TransferOperationMode') -> "CTransferOperationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTransferOperationMode object with the value set.
        """
        return _neoapi.CTransferOperationMode_Set(self, value)

    def Get(self) -> "TransferOperationMode":
        """
        Get the current value.
        Return: The TransferOperationMode value.
        """
        return _neoapi.CTransferOperationMode_Get(self)

    value = property(Get, Set)

CTransferOperationMode_swigregister = _neoapi.CTransferOperationMode_swigregister
CTransferOperationMode_swigregister(CTransferOperationMode)

TransferSelector_All = _neoapi.TransferSelector_All
TransferSelector_Stream0 = _neoapi.TransferSelector_Stream0
TransferSelector_Stream1 = _neoapi.TransferSelector_Stream1
TransferSelector_Stream2 = _neoapi.TransferSelector_Stream2
TransferSelector_Stream3 = _neoapi.TransferSelector_Stream3
TransferSelector_Stream4 = _neoapi.TransferSelector_Stream4
class CTransferSelector(EnumerationFeature):
    """
    Selects which stream transfers are currently controlled by the selected Transfer features.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransferSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTransferSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTransferSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTransferSelector
    __del__ = lambda self: None

    def Set(self, value: 'TransferSelector') -> "CTransferSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTransferSelector object with the value set.
        """
        return _neoapi.CTransferSelector_Set(self, value)

    def Get(self) -> "TransferSelector":
        """
        Get the current value.
        Return: The TransferSelector value.
        """
        return _neoapi.CTransferSelector_Get(self)

    value = property(Get, Set)

CTransferSelector_swigregister = _neoapi.CTransferSelector_swigregister
CTransferSelector_swigregister(CTransferSelector)

TransferStatusSelector_Paused = _neoapi.TransferStatusSelector_Paused
TransferStatusSelector_QueueOverflow = _neoapi.TransferStatusSelector_QueueOverflow
TransferStatusSelector_Stopped = _neoapi.TransferStatusSelector_Stopped
TransferStatusSelector_Stopping = _neoapi.TransferStatusSelector_Stopping
TransferStatusSelector_Streaming = _neoapi.TransferStatusSelector_Streaming
class CTransferStatusSelector(EnumerationFeature):
    """
    Selects which status of the transfer module to read.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransferStatusSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTransferStatusSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTransferStatusSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTransferStatusSelector
    __del__ = lambda self: None

    def Set(self, value: 'TransferStatusSelector') -> "CTransferStatusSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTransferStatusSelector object with the value set.
        """
        return _neoapi.CTransferStatusSelector_Set(self, value)

    def Get(self) -> "TransferStatusSelector":
        """
        Get the current value.
        Return: The TransferStatusSelector value.
        """
        return _neoapi.CTransferStatusSelector_Get(self)

    value = property(Get, Set)

CTransferStatusSelector_swigregister = _neoapi.CTransferStatusSelector_swigregister
CTransferStatusSelector_swigregister(CTransferStatusSelector)

TriggerActivation_AnyEdge = _neoapi.TriggerActivation_AnyEdge
TriggerActivation_FallingEdge = _neoapi.TriggerActivation_FallingEdge
TriggerActivation_LevelHigh = _neoapi.TriggerActivation_LevelHigh
TriggerActivation_LevelLow = _neoapi.TriggerActivation_LevelLow
TriggerActivation_RisingEdge = _neoapi.TriggerActivation_RisingEdge
class CTriggerActivation(EnumerationFeature):
    """
    Specifies the activation mode of the trigger.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTriggerActivation, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTriggerActivation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTriggerActivation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTriggerActivation
    __del__ = lambda self: None

    def Set(self, value: 'TriggerActivation') -> "CTriggerActivation":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTriggerActivation object with the value set.
        """
        return _neoapi.CTriggerActivation_Set(self, value)

    def Get(self) -> "TriggerActivation":
        """
        Get the current value.
        Return: The TriggerActivation value.
        """
        return _neoapi.CTriggerActivation_Get(self)

    value = property(Get, Set)

CTriggerActivation_swigregister = _neoapi.CTriggerActivation_swigregister
CTriggerActivation_swigregister(CTriggerActivation)

TriggerMode_Off = _neoapi.TriggerMode_Off
TriggerMode_On = _neoapi.TriggerMode_On
class CTriggerMode(EnumerationFeature):
    """
    Controls if the selected trigger is active.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTriggerMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTriggerMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTriggerMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTriggerMode
    __del__ = lambda self: None

    def Set(self, value: 'TriggerMode') -> "CTriggerMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTriggerMode object with the value set.
        """
        return _neoapi.CTriggerMode_Set(self, value)

    def Get(self) -> "TriggerMode":
        """
        Get the current value.
        Return: The TriggerMode value.
        """
        return _neoapi.CTriggerMode_Get(self)

    value = property(Get, Set)

CTriggerMode_swigregister = _neoapi.CTriggerMode_swigregister
CTriggerMode_swigregister(CTriggerMode)

TriggerOverlap_Off = _neoapi.TriggerOverlap_Off
TriggerOverlap_PreviousFrame = _neoapi.TriggerOverlap_PreviousFrame
TriggerOverlap_PreviousLine = _neoapi.TriggerOverlap_PreviousLine
TriggerOverlap_ReadOut = _neoapi.TriggerOverlap_ReadOut
class CTriggerOverlap(EnumerationFeature):
    """
    Specifies the type trigger overlap permitted with the previous frame or line. This defines when a valid trigger will be accepted (or latched) for a new frame or a new line.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTriggerOverlap, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTriggerOverlap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTriggerOverlap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTriggerOverlap
    __del__ = lambda self: None

    def Set(self, value: 'TriggerOverlap') -> "CTriggerOverlap":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTriggerOverlap object with the value set.
        """
        return _neoapi.CTriggerOverlap_Set(self, value)

    def Get(self) -> "TriggerOverlap":
        """
        Get the current value.
        Return: The TriggerOverlap value.
        """
        return _neoapi.CTriggerOverlap_Get(self)

    value = property(Get, Set)

CTriggerOverlap_swigregister = _neoapi.CTriggerOverlap_swigregister
CTriggerOverlap_swigregister(CTriggerOverlap)

TriggerSelector_AcquisitionActive = _neoapi.TriggerSelector_AcquisitionActive
TriggerSelector_AcquisitionEnd = _neoapi.TriggerSelector_AcquisitionEnd
TriggerSelector_AcquisitionStart = _neoapi.TriggerSelector_AcquisitionStart
TriggerSelector_ExposureActive = _neoapi.TriggerSelector_ExposureActive
TriggerSelector_ExposureEnd = _neoapi.TriggerSelector_ExposureEnd
TriggerSelector_ExposureStart = _neoapi.TriggerSelector_ExposureStart
TriggerSelector_FrameActive = _neoapi.TriggerSelector_FrameActive
TriggerSelector_FrameBurstActive = _neoapi.TriggerSelector_FrameBurstActive
TriggerSelector_FrameBurstEnd = _neoapi.TriggerSelector_FrameBurstEnd
TriggerSelector_FrameBurstStart = _neoapi.TriggerSelector_FrameBurstStart
TriggerSelector_FrameEnd = _neoapi.TriggerSelector_FrameEnd
TriggerSelector_FrameStart = _neoapi.TriggerSelector_FrameStart
TriggerSelector_LineStart = _neoapi.TriggerSelector_LineStart
TriggerSelector_MultiSlopeExposureLimit1 = _neoapi.TriggerSelector_MultiSlopeExposureLimit1
class CTriggerSelector(EnumerationFeature):
    """
    Selects the type of trigger to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTriggerSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTriggerSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTriggerSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTriggerSelector
    __del__ = lambda self: None

    def Set(self, value: 'TriggerSelector') -> "CTriggerSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTriggerSelector object with the value set.
        """
        return _neoapi.CTriggerSelector_Set(self, value)

    def Get(self) -> "TriggerSelector":
        """
        Get the current value.
        Return: The TriggerSelector value.
        """
        return _neoapi.CTriggerSelector_Get(self)

    value = property(Get, Set)

CTriggerSelector_swigregister = _neoapi.CTriggerSelector_swigregister
CTriggerSelector_swigregister(CTriggerSelector)

TriggerSource_Action0 = _neoapi.TriggerSource_Action0
TriggerSource_Action1 = _neoapi.TriggerSource_Action1
TriggerSource_Action2 = _neoapi.TriggerSource_Action2
TriggerSource_All = _neoapi.TriggerSource_All
TriggerSource_CC1 = _neoapi.TriggerSource_CC1
TriggerSource_CC2 = _neoapi.TriggerSource_CC2
TriggerSource_CC3 = _neoapi.TriggerSource_CC3
TriggerSource_CC4 = _neoapi.TriggerSource_CC4
TriggerSource_Counter0End = _neoapi.TriggerSource_Counter0End
TriggerSource_Counter0Start = _neoapi.TriggerSource_Counter0Start
TriggerSource_Counter1End = _neoapi.TriggerSource_Counter1End
TriggerSource_Counter1Start = _neoapi.TriggerSource_Counter1Start
TriggerSource_Counter2End = _neoapi.TriggerSource_Counter2End
TriggerSource_Counter2Start = _neoapi.TriggerSource_Counter2Start
TriggerSource_Encoder0 = _neoapi.TriggerSource_Encoder0
TriggerSource_Encoder1 = _neoapi.TriggerSource_Encoder1
TriggerSource_Encoder2 = _neoapi.TriggerSource_Encoder2
TriggerSource_Line0 = _neoapi.TriggerSource_Line0
TriggerSource_Line1 = _neoapi.TriggerSource_Line1
TriggerSource_Line2 = _neoapi.TriggerSource_Line2
TriggerSource_Line3 = _neoapi.TriggerSource_Line3
TriggerSource_LinkTrigger0 = _neoapi.TriggerSource_LinkTrigger0
TriggerSource_LinkTrigger1 = _neoapi.TriggerSource_LinkTrigger1
TriggerSource_LinkTrigger2 = _neoapi.TriggerSource_LinkTrigger2
TriggerSource_LogicBlock0 = _neoapi.TriggerSource_LogicBlock0
TriggerSource_LogicBlock1 = _neoapi.TriggerSource_LogicBlock1
TriggerSource_LogicBlock2 = _neoapi.TriggerSource_LogicBlock2
TriggerSource_Off = _neoapi.TriggerSource_Off
TriggerSource_Software = _neoapi.TriggerSource_Software
TriggerSource_SoftwareSignal0 = _neoapi.TriggerSource_SoftwareSignal0
TriggerSource_SoftwareSignal1 = _neoapi.TriggerSource_SoftwareSignal1
TriggerSource_SoftwareSignal2 = _neoapi.TriggerSource_SoftwareSignal2
TriggerSource_Timer0End = _neoapi.TriggerSource_Timer0End
TriggerSource_Timer0Start = _neoapi.TriggerSource_Timer0Start
TriggerSource_Timer1End = _neoapi.TriggerSource_Timer1End
TriggerSource_Timer1Start = _neoapi.TriggerSource_Timer1Start
TriggerSource_Timer2End = _neoapi.TriggerSource_Timer2End
TriggerSource_Timer2Start = _neoapi.TriggerSource_Timer2Start
TriggerSource_UserOutput0 = _neoapi.TriggerSource_UserOutput0
TriggerSource_UserOutput1 = _neoapi.TriggerSource_UserOutput1
TriggerSource_UserOutput2 = _neoapi.TriggerSource_UserOutput2
class CTriggerSource(EnumerationFeature):
    """
    Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTriggerSource, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTriggerSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CTriggerSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CTriggerSource
    __del__ = lambda self: None

    def Set(self, value: 'TriggerSource') -> "CTriggerSource":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CTriggerSource object with the value set.
        """
        return _neoapi.CTriggerSource_Set(self, value)

    def Get(self) -> "TriggerSource":
        """
        Get the current value.
        Return: The TriggerSource value.
        """
        return _neoapi.CTriggerSource_Get(self)

    value = property(Get, Set)

CTriggerSource_swigregister = _neoapi.CTriggerSource_swigregister
CTriggerSource_swigregister(CTriggerSource)

UserOutputSelector_UserOutput0 = _neoapi.UserOutputSelector_UserOutput0
UserOutputSelector_UserOutput1 = _neoapi.UserOutputSelector_UserOutput1
UserOutputSelector_UserOutput2 = _neoapi.UserOutputSelector_UserOutput2
UserOutputSelector_UserOutput3 = _neoapi.UserOutputSelector_UserOutput3
UserOutputSelector_UserOutput4 = _neoapi.UserOutputSelector_UserOutput4
class CUserOutputSelector(EnumerationFeature):
    """
    Selects which bit of the User Output register will be set by UserOutputValue.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserOutputSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUserOutputSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CUserOutputSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CUserOutputSelector
    __del__ = lambda self: None

    def Set(self, value: 'UserOutputSelector') -> "CUserOutputSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CUserOutputSelector object with the value set.
        """
        return _neoapi.CUserOutputSelector_Set(self, value)

    def Get(self) -> "UserOutputSelector":
        """
        Get the current value.
        Return: The UserOutputSelector value.
        """
        return _neoapi.CUserOutputSelector_Get(self)

    value = property(Get, Set)

CUserOutputSelector_swigregister = _neoapi.CUserOutputSelector_swigregister
CUserOutputSelector_swigregister(CUserOutputSelector)

UserSetDefault_Default = _neoapi.UserSetDefault_Default
UserSetDefault_UserSet0 = _neoapi.UserSetDefault_UserSet0
UserSetDefault_UserSet1 = _neoapi.UserSetDefault_UserSet1
UserSetDefault_UserSet2 = _neoapi.UserSetDefault_UserSet2
UserSetDefault_UserSet3 = _neoapi.UserSetDefault_UserSet3
class CUserSetDefault(EnumerationFeature):
    """
    Selects the feature User Set to load and make active by default when the device is reset.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserSetDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUserSetDefault, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CUserSetDefault(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CUserSetDefault
    __del__ = lambda self: None

    def Set(self, value: 'UserSetDefault') -> "CUserSetDefault":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CUserSetDefault object with the value set.
        """
        return _neoapi.CUserSetDefault_Set(self, value)

    def Get(self) -> "UserSetDefault":
        """
        Get the current value.
        Return: The UserSetDefault value.
        """
        return _neoapi.CUserSetDefault_Get(self)

    value = property(Get, Set)

CUserSetDefault_swigregister = _neoapi.CUserSetDefault_swigregister
CUserSetDefault_swigregister(CUserSetDefault)

UserSetFeatureSelector_AcquisitionFrameCount = _neoapi.UserSetFeatureSelector_AcquisitionFrameCount
UserSetFeatureSelector_AcquisitionFrameRate = _neoapi.UserSetFeatureSelector_AcquisitionFrameRate
UserSetFeatureSelector_AcquisitionFrameRateEnable = _neoapi.UserSetFeatureSelector_AcquisitionFrameRateEnable
UserSetFeatureSelector_AcquisitionMode = _neoapi.UserSetFeatureSelector_AcquisitionMode
UserSetFeatureSelector_ActionDeviceKey = _neoapi.UserSetFeatureSelector_ActionDeviceKey
UserSetFeatureSelector_ActionGroupKey = _neoapi.UserSetFeatureSelector_ActionGroupKey
UserSetFeatureSelector_ActionGroupMask = _neoapi.UserSetFeatureSelector_ActionGroupMask
UserSetFeatureSelector_AutoFeatureHeight = _neoapi.UserSetFeatureSelector_AutoFeatureHeight
UserSetFeatureSelector_AutoFeatureOffsetX = _neoapi.UserSetFeatureSelector_AutoFeatureOffsetX
UserSetFeatureSelector_AutoFeatureOffsetY = _neoapi.UserSetFeatureSelector_AutoFeatureOffsetY
UserSetFeatureSelector_AutoFeatureRegionMode = _neoapi.UserSetFeatureSelector_AutoFeatureRegionMode
UserSetFeatureSelector_AutoFeatureRegionReference = _neoapi.UserSetFeatureSelector_AutoFeatureRegionReference
UserSetFeatureSelector_AutoFeatureWidth = _neoapi.UserSetFeatureSelector_AutoFeatureWidth
UserSetFeatureSelector_BOPFShift = _neoapi.UserSetFeatureSelector_BOPFShift
UserSetFeatureSelector_BalanceWhiteAuto = _neoapi.UserSetFeatureSelector_BalanceWhiteAuto
UserSetFeatureSelector_BinningHorizontal = _neoapi.UserSetFeatureSelector_BinningHorizontal
UserSetFeatureSelector_BinningHorizontalMode = _neoapi.UserSetFeatureSelector_BinningHorizontalMode
UserSetFeatureSelector_BinningVertical = _neoapi.UserSetFeatureSelector_BinningVertical
UserSetFeatureSelector_BinningVerticalMode = _neoapi.UserSetFeatureSelector_BinningVerticalMode
UserSetFeatureSelector_BlackLevel = _neoapi.UserSetFeatureSelector_BlackLevel
UserSetFeatureSelector_BrightnessAutoNominalValue = _neoapi.UserSetFeatureSelector_BrightnessAutoNominalValue
UserSetFeatureSelector_BrightnessAutoPriority = _neoapi.UserSetFeatureSelector_BrightnessAutoPriority
UserSetFeatureSelector_ChunkEnable = _neoapi.UserSetFeatureSelector_ChunkEnable
UserSetFeatureSelector_ChunkModeActive = _neoapi.UserSetFeatureSelector_ChunkModeActive
UserSetFeatureSelector_ColorTransformationAuto = _neoapi.UserSetFeatureSelector_ColorTransformationAuto
UserSetFeatureSelector_ColorTransformationValue = _neoapi.UserSetFeatureSelector_ColorTransformationValue
UserSetFeatureSelector_CounterDuration = _neoapi.UserSetFeatureSelector_CounterDuration
UserSetFeatureSelector_CounterEventActivation = _neoapi.UserSetFeatureSelector_CounterEventActivation
UserSetFeatureSelector_CounterEventSource = _neoapi.UserSetFeatureSelector_CounterEventSource
UserSetFeatureSelector_CounterResetActivation = _neoapi.UserSetFeatureSelector_CounterResetActivation
UserSetFeatureSelector_CounterResetSource = _neoapi.UserSetFeatureSelector_CounterResetSource
UserSetFeatureSelector_DefectPixelCorrection = _neoapi.UserSetFeatureSelector_DefectPixelCorrection
UserSetFeatureSelector_DeviceLinkThroughputLimit = _neoapi.UserSetFeatureSelector_DeviceLinkThroughputLimit
UserSetFeatureSelector_DeviceSpecific = _neoapi.UserSetFeatureSelector_DeviceSpecific
UserSetFeatureSelector_DeviceTemperatureStatusTransition = _neoapi.UserSetFeatureSelector_DeviceTemperatureStatusTransition
UserSetFeatureSelector_EventNotification = _neoapi.UserSetFeatureSelector_EventNotification
UserSetFeatureSelector_ExposureAuto = _neoapi.UserSetFeatureSelector_ExposureAuto
UserSetFeatureSelector_ExposureAutoMaxValue = _neoapi.UserSetFeatureSelector_ExposureAutoMaxValue
UserSetFeatureSelector_ExposureAutoMinValue = _neoapi.UserSetFeatureSelector_ExposureAutoMinValue
UserSetFeatureSelector_ExposureMode = _neoapi.UserSetFeatureSelector_ExposureMode
UserSetFeatureSelector_ExposureTime = _neoapi.UserSetFeatureSelector_ExposureTime
UserSetFeatureSelector_FixedPatternNoiseCorrection = _neoapi.UserSetFeatureSelector_FixedPatternNoiseCorrection
UserSetFeatureSelector_FrameCounter = _neoapi.UserSetFeatureSelector_FrameCounter
UserSetFeatureSelector_Gain = _neoapi.UserSetFeatureSelector_Gain
UserSetFeatureSelector_GainAuto = _neoapi.UserSetFeatureSelector_GainAuto
UserSetFeatureSelector_GainAutoMaxValue = _neoapi.UserSetFeatureSelector_GainAutoMaxValue
UserSetFeatureSelector_GainAutoMinValue = _neoapi.UserSetFeatureSelector_GainAutoMinValue
UserSetFeatureSelector_Gamma = _neoapi.UserSetFeatureSelector_Gamma
UserSetFeatureSelector_GevSCFTD = _neoapi.UserSetFeatureSelector_GevSCFTD
UserSetFeatureSelector_GevSCPD = _neoapi.UserSetFeatureSelector_GevSCPD
UserSetFeatureSelector_Height = _neoapi.UserSetFeatureSelector_Height
UserSetFeatureSelector_LUTContent = _neoapi.UserSetFeatureSelector_LUTContent
UserSetFeatureSelector_LUTEnable = _neoapi.UserSetFeatureSelector_LUTEnable
UserSetFeatureSelector_LUTValue = _neoapi.UserSetFeatureSelector_LUTValue
UserSetFeatureSelector_LineDebouncerHighTimeAbs = _neoapi.UserSetFeatureSelector_LineDebouncerHighTimeAbs
UserSetFeatureSelector_LineDebouncerLowTimeAbs = _neoapi.UserSetFeatureSelector_LineDebouncerLowTimeAbs
UserSetFeatureSelector_LineInverter = _neoapi.UserSetFeatureSelector_LineInverter
UserSetFeatureSelector_LineMode = _neoapi.UserSetFeatureSelector_LineMode
UserSetFeatureSelector_LinePWMDuration = _neoapi.UserSetFeatureSelector_LinePWMDuration
UserSetFeatureSelector_LinePWMDutyCycle = _neoapi.UserSetFeatureSelector_LinePWMDutyCycle
UserSetFeatureSelector_LinePWMMaxDuration = _neoapi.UserSetFeatureSelector_LinePWMMaxDuration
UserSetFeatureSelector_LinePWMMaxDutyCycle = _neoapi.UserSetFeatureSelector_LinePWMMaxDutyCycle
UserSetFeatureSelector_LinePWMMode = _neoapi.UserSetFeatureSelector_LinePWMMode
UserSetFeatureSelector_LineSource = _neoapi.UserSetFeatureSelector_LineSource
UserSetFeatureSelector_OffsetX = _neoapi.UserSetFeatureSelector_OffsetX
UserSetFeatureSelector_OffsetY = _neoapi.UserSetFeatureSelector_OffsetY
UserSetFeatureSelector_PixelFormat = _neoapi.UserSetFeatureSelector_PixelFormat
UserSetFeatureSelector_PtpEnable = _neoapi.UserSetFeatureSelector_PtpEnable
UserSetFeatureSelector_PtpMode = _neoapi.UserSetFeatureSelector_PtpMode
UserSetFeatureSelector_ReadoutMode = _neoapi.UserSetFeatureSelector_ReadoutMode
UserSetFeatureSelector_ReverseX = _neoapi.UserSetFeatureSelector_ReverseX
UserSetFeatureSelector_ReverseY = _neoapi.UserSetFeatureSelector_ReverseY
UserSetFeatureSelector_SensorADDigitization = _neoapi.UserSetFeatureSelector_SensorADDigitization
UserSetFeatureSelector_SensorShutterMode = _neoapi.UserSetFeatureSelector_SensorShutterMode
UserSetFeatureSelector_SequencerMode = _neoapi.UserSetFeatureSelector_SequencerMode
UserSetFeatureSelector_SequencerSetNext = _neoapi.UserSetFeatureSelector_SequencerSetNext
UserSetFeatureSelector_SequencerSetStart = _neoapi.UserSetFeatureSelector_SequencerSetStart
UserSetFeatureSelector_SequencerTriggerActivation = _neoapi.UserSetFeatureSelector_SequencerTriggerActivation
UserSetFeatureSelector_SequencerTriggerSource = _neoapi.UserSetFeatureSelector_SequencerTriggerSource
UserSetFeatureSelector_ShortExposureTimeEnable = _neoapi.UserSetFeatureSelector_ShortExposureTimeEnable
UserSetFeatureSelector_TestPattern = _neoapi.UserSetFeatureSelector_TestPattern
UserSetFeatureSelector_TimerDelay = _neoapi.UserSetFeatureSelector_TimerDelay
UserSetFeatureSelector_TimerDuration = _neoapi.UserSetFeatureSelector_TimerDuration
UserSetFeatureSelector_TimerTriggerActivation = _neoapi.UserSetFeatureSelector_TimerTriggerActivation
UserSetFeatureSelector_TimerTriggerSource = _neoapi.UserSetFeatureSelector_TimerTriggerSource
UserSetFeatureSelector_TransferStart = _neoapi.UserSetFeatureSelector_TransferStart
UserSetFeatureSelector_TransferStop = _neoapi.UserSetFeatureSelector_TransferStop
UserSetFeatureSelector_TriggerActivation = _neoapi.UserSetFeatureSelector_TriggerActivation
UserSetFeatureSelector_TriggerDelay = _neoapi.UserSetFeatureSelector_TriggerDelay
UserSetFeatureSelector_TriggerMode = _neoapi.UserSetFeatureSelector_TriggerMode
UserSetFeatureSelector_TriggerSource = _neoapi.UserSetFeatureSelector_TriggerSource
UserSetFeatureSelector_UserOutputValue = _neoapi.UserSetFeatureSelector_UserOutputValue
UserSetFeatureSelector_UserOutputValueAll = _neoapi.UserSetFeatureSelector_UserOutputValueAll
UserSetFeatureSelector_Width = _neoapi.UserSetFeatureSelector_Width
class CUserSetFeatureSelector(EnumerationFeature):
    """
    Selects which individual UserSet feature to control.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserSetFeatureSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUserSetFeatureSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CUserSetFeatureSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CUserSetFeatureSelector
    __del__ = lambda self: None

    def Set(self, value: 'UserSetFeatureSelector') -> "CUserSetFeatureSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CUserSetFeatureSelector object with the value set.
        """
        return _neoapi.CUserSetFeatureSelector_Set(self, value)

    def Get(self) -> "UserSetFeatureSelector":
        """
        Get the current value.
        Return: The UserSetFeatureSelector value.
        """
        return _neoapi.CUserSetFeatureSelector_Get(self)

    value = property(Get, Set)

CUserSetFeatureSelector_swigregister = _neoapi.CUserSetFeatureSelector_swigregister
CUserSetFeatureSelector_swigregister(CUserSetFeatureSelector)

UserSetSelector_Default = _neoapi.UserSetSelector_Default
UserSetSelector_UserSet0 = _neoapi.UserSetSelector_UserSet0
UserSetSelector_UserSet1 = _neoapi.UserSetSelector_UserSet1
UserSetSelector_UserSet2 = _neoapi.UserSetSelector_UserSet2
UserSetSelector_UserSet3 = _neoapi.UserSetSelector_UserSet3
class CUserSetSelector(EnumerationFeature):
    """
    Selects the feature User Set to load, save or configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserSetSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUserSetSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CUserSetSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CUserSetSelector
    __del__ = lambda self: None

    def Set(self, value: 'UserSetSelector') -> "CUserSetSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CUserSetSelector object with the value set.
        """
        return _neoapi.CUserSetSelector_Set(self, value)

    def Get(self) -> "UserSetSelector":
        """
        Get the current value.
        Return: The UserSetSelector value.
        """
        return _neoapi.CUserSetSelector_Get(self)

    value = property(Get, Set)

CUserSetSelector_swigregister = _neoapi.CUserSetSelector_swigregister
CUserSetSelector_swigregister(CUserSetSelector)

boCalibrationDataConfigurationMode_Off = _neoapi.boCalibrationDataConfigurationMode_Off
boCalibrationDataConfigurationMode_On = _neoapi.boCalibrationDataConfigurationMode_On
class CboCalibrationDataConfigurationMode(EnumerationFeature):
    """
    Controls if the calibration data configuration mode is active.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboCalibrationDataConfigurationMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboCalibrationDataConfigurationMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboCalibrationDataConfigurationMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboCalibrationDataConfigurationMode
    __del__ = lambda self: None

    def Set(self, value: 'boCalibrationDataConfigurationMode') -> "CboCalibrationDataConfigurationMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboCalibrationDataConfigurationMode object with the value set.
        """
        return _neoapi.CboCalibrationDataConfigurationMode_Set(self, value)

    def Get(self) -> "boCalibrationDataConfigurationMode":
        """
        Get the current value.
        Return: The boCalibrationDataConfigurationMode value.
        """
        return _neoapi.CboCalibrationDataConfigurationMode_Get(self)

    value = property(Get, Set)

CboCalibrationDataConfigurationMode_swigregister = _neoapi.CboCalibrationDataConfigurationMode_swigregister
CboCalibrationDataConfigurationMode_swigregister(CboCalibrationDataConfigurationMode)

boCalibrationMatrixSelector_CameraMatrix = _neoapi.boCalibrationMatrixSelector_CameraMatrix
boCalibrationMatrixSelector_NewCameraMatrix = _neoapi.boCalibrationMatrixSelector_NewCameraMatrix
class CboCalibrationMatrixSelector(EnumerationFeature):
    """
    Selects the calibration matrix.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboCalibrationMatrixSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboCalibrationMatrixSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboCalibrationMatrixSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboCalibrationMatrixSelector
    __del__ = lambda self: None

    def Set(self, value: 'boCalibrationMatrixSelector') -> "CboCalibrationMatrixSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboCalibrationMatrixSelector object with the value set.
        """
        return _neoapi.CboCalibrationMatrixSelector_Set(self, value)

    def Get(self) -> "boCalibrationMatrixSelector":
        """
        Get the current value.
        Return: The boCalibrationMatrixSelector value.
        """
        return _neoapi.CboCalibrationMatrixSelector_Get(self)

    value = property(Get, Set)

CboCalibrationMatrixSelector_swigregister = _neoapi.CboCalibrationMatrixSelector_swigregister
CboCalibrationMatrixSelector_swigregister(CboCalibrationMatrixSelector)

boCalibrationMatrixValueSelector_Value11 = _neoapi.boCalibrationMatrixValueSelector_Value11
boCalibrationMatrixValueSelector_Value12 = _neoapi.boCalibrationMatrixValueSelector_Value12
boCalibrationMatrixValueSelector_Value13 = _neoapi.boCalibrationMatrixValueSelector_Value13
boCalibrationMatrixValueSelector_Value21 = _neoapi.boCalibrationMatrixValueSelector_Value21
boCalibrationMatrixValueSelector_Value22 = _neoapi.boCalibrationMatrixValueSelector_Value22
boCalibrationMatrixValueSelector_Value23 = _neoapi.boCalibrationMatrixValueSelector_Value23
boCalibrationMatrixValueSelector_Value31 = _neoapi.boCalibrationMatrixValueSelector_Value31
boCalibrationMatrixValueSelector_Value32 = _neoapi.boCalibrationMatrixValueSelector_Value32
boCalibrationMatrixValueSelector_Value33 = _neoapi.boCalibrationMatrixValueSelector_Value33
class CboCalibrationMatrixValueSelector(EnumerationFeature):
    """
    Value selector of calibration matrix.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboCalibrationMatrixValueSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboCalibrationMatrixValueSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboCalibrationMatrixValueSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboCalibrationMatrixValueSelector
    __del__ = lambda self: None

    def Set(self, value: 'boCalibrationMatrixValueSelector') -> "CboCalibrationMatrixValueSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboCalibrationMatrixValueSelector object with the value set.
        """
        return _neoapi.CboCalibrationMatrixValueSelector_Set(self, value)

    def Get(self) -> "boCalibrationMatrixValueSelector":
        """
        Get the current value.
        Return: The boCalibrationMatrixValueSelector value.
        """
        return _neoapi.CboCalibrationMatrixValueSelector_Get(self)

    value = property(Get, Set)

CboCalibrationMatrixValueSelector_swigregister = _neoapi.CboCalibrationMatrixValueSelector_swigregister
CboCalibrationMatrixValueSelector_swigregister(CboCalibrationMatrixValueSelector)

boCalibrationVectorSelector_rvec = _neoapi.boCalibrationVectorSelector_rvec
boCalibrationVectorSelector_tvec = _neoapi.boCalibrationVectorSelector_tvec
class CboCalibrationVectorSelector(EnumerationFeature):
    """
    Selects the calibration vector.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboCalibrationVectorSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboCalibrationVectorSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboCalibrationVectorSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboCalibrationVectorSelector
    __del__ = lambda self: None

    def Set(self, value: 'boCalibrationVectorSelector') -> "CboCalibrationVectorSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboCalibrationVectorSelector object with the value set.
        """
        return _neoapi.CboCalibrationVectorSelector_Set(self, value)

    def Get(self) -> "boCalibrationVectorSelector":
        """
        Get the current value.
        Return: The boCalibrationVectorSelector value.
        """
        return _neoapi.CboCalibrationVectorSelector_Get(self)

    value = property(Get, Set)

CboCalibrationVectorSelector_swigregister = _neoapi.CboCalibrationVectorSelector_swigregister
CboCalibrationVectorSelector_swigregister(CboCalibrationVectorSelector)

boCalibrationVectorValueSelector_Value1 = _neoapi.boCalibrationVectorValueSelector_Value1
boCalibrationVectorValueSelector_Value2 = _neoapi.boCalibrationVectorValueSelector_Value2
boCalibrationVectorValueSelector_Value3 = _neoapi.boCalibrationVectorValueSelector_Value3
class CboCalibrationVectorValueSelector(EnumerationFeature):
    """
    Value selector of calibration vector.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboCalibrationVectorValueSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboCalibrationVectorValueSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboCalibrationVectorValueSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboCalibrationVectorValueSelector
    __del__ = lambda self: None

    def Set(self, value: 'boCalibrationVectorValueSelector') -> "CboCalibrationVectorValueSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboCalibrationVectorValueSelector object with the value set.
        """
        return _neoapi.CboCalibrationVectorValueSelector_Set(self, value)

    def Get(self) -> "boCalibrationVectorValueSelector":
        """
        Get the current value.
        Return: The boCalibrationVectorValueSelector value.
        """
        return _neoapi.CboCalibrationVectorValueSelector_Get(self)

    value = property(Get, Set)

CboCalibrationVectorValueSelector_swigregister = _neoapi.CboCalibrationVectorValueSelector_swigregister
CboCalibrationVectorValueSelector_swigregister(CboCalibrationVectorValueSelector)

boGeometryDistortionValueSelector_k1 = _neoapi.boGeometryDistortionValueSelector_k1
boGeometryDistortionValueSelector_k2 = _neoapi.boGeometryDistortionValueSelector_k2
boGeometryDistortionValueSelector_k3 = _neoapi.boGeometryDistortionValueSelector_k3
boGeometryDistortionValueSelector_p1 = _neoapi.boGeometryDistortionValueSelector_p1
boGeometryDistortionValueSelector_p2 = _neoapi.boGeometryDistortionValueSelector_p2
class CboGeometryDistortionValueSelector(EnumerationFeature):
    """
    Value Selector of geometry distortion.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboGeometryDistortionValueSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboGeometryDistortionValueSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboGeometryDistortionValueSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboGeometryDistortionValueSelector
    __del__ = lambda self: None

    def Set(self, value: 'boGeometryDistortionValueSelector') -> "CboGeometryDistortionValueSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboGeometryDistortionValueSelector object with the value set.
        """
        return _neoapi.CboGeometryDistortionValueSelector_Set(self, value)

    def Get(self) -> "boGeometryDistortionValueSelector":
        """
        Get the current value.
        Return: The boGeometryDistortionValueSelector value.
        """
        return _neoapi.CboGeometryDistortionValueSelector_Get(self)

    value = property(Get, Set)

CboGeometryDistortionValueSelector_swigregister = _neoapi.CboGeometryDistortionValueSelector_swigregister
CboGeometryDistortionValueSelector_swigregister(CboGeometryDistortionValueSelector)

boSerialConfigBaudRate_Baudrate115200Hz = _neoapi.boSerialConfigBaudRate_Baudrate115200Hz
boSerialConfigBaudRate_Baudrate1843200Hz = _neoapi.boSerialConfigBaudRate_Baudrate1843200Hz
boSerialConfigBaudRate_Baudrate19200Hz = _neoapi.boSerialConfigBaudRate_Baudrate19200Hz
boSerialConfigBaudRate_Baudrate230400Hz = _neoapi.boSerialConfigBaudRate_Baudrate230400Hz
boSerialConfigBaudRate_Baudrate38400Hz = _neoapi.boSerialConfigBaudRate_Baudrate38400Hz
boSerialConfigBaudRate_Baudrate460800Hz = _neoapi.boSerialConfigBaudRate_Baudrate460800Hz
boSerialConfigBaudRate_Baudrate57600Hz = _neoapi.boSerialConfigBaudRate_Baudrate57600Hz
boSerialConfigBaudRate_Baudrate921600Hz = _neoapi.boSerialConfigBaudRate_Baudrate921600Hz
boSerialConfigBaudRate_Baudrate9600Hz = _neoapi.boSerialConfigBaudRate_Baudrate9600Hz
class CboSerialConfigBaudRate(EnumerationFeature):
    """
    Serial interface clock frequency.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialConfigBaudRate, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialConfigBaudRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialConfigBaudRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialConfigBaudRate
    __del__ = lambda self: None

    def Set(self, value: 'boSerialConfigBaudRate') -> "CboSerialConfigBaudRate":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialConfigBaudRate object with the value set.
        """
        return _neoapi.CboSerialConfigBaudRate_Set(self, value)

    def Get(self) -> "boSerialConfigBaudRate":
        """
        Get the current value.
        Return: The boSerialConfigBaudRate value.
        """
        return _neoapi.CboSerialConfigBaudRate_Get(self)

    value = property(Get, Set)

CboSerialConfigBaudRate_swigregister = _neoapi.CboSerialConfigBaudRate_swigregister
CboSerialConfigBaudRate_swigregister(CboSerialConfigBaudRate)

boSerialConfigDataBits_Eight = _neoapi.boSerialConfigDataBits_Eight
boSerialConfigDataBits_Five = _neoapi.boSerialConfigDataBits_Five
boSerialConfigDataBits_Seven = _neoapi.boSerialConfigDataBits_Seven
boSerialConfigDataBits_Six = _neoapi.boSerialConfigDataBits_Six
class CboSerialConfigDataBits(EnumerationFeature):
    """
    Number of data bits.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialConfigDataBits, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialConfigDataBits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialConfigDataBits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialConfigDataBits
    __del__ = lambda self: None

    def Set(self, value: 'boSerialConfigDataBits') -> "CboSerialConfigDataBits":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialConfigDataBits object with the value set.
        """
        return _neoapi.CboSerialConfigDataBits_Set(self, value)

    def Get(self) -> "boSerialConfigDataBits":
        """
        Get the current value.
        Return: The boSerialConfigDataBits value.
        """
        return _neoapi.CboSerialConfigDataBits_Get(self)

    value = property(Get, Set)

CboSerialConfigDataBits_swigregister = _neoapi.CboSerialConfigDataBits_swigregister
CboSerialConfigDataBits_swigregister(CboSerialConfigDataBits)

boSerialConfigParity_Even = _neoapi.boSerialConfigParity_Even
boSerialConfigParity_Mark = _neoapi.boSerialConfigParity_Mark
boSerialConfigParity_none = _neoapi.boSerialConfigParity_none
boSerialConfigParity_Odd = _neoapi.boSerialConfigParity_Odd
boSerialConfigParity_Space = _neoapi.boSerialConfigParity_Space
class CboSerialConfigParity(EnumerationFeature):
    """
    Serial interface parity.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialConfigParity, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialConfigParity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialConfigParity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialConfigParity
    __del__ = lambda self: None

    def Set(self, value: 'boSerialConfigParity') -> "CboSerialConfigParity":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialConfigParity object with the value set.
        """
        return _neoapi.CboSerialConfigParity_Set(self, value)

    def Get(self) -> "boSerialConfigParity":
        """
        Get the current value.
        Return: The boSerialConfigParity value.
        """
        return _neoapi.CboSerialConfigParity_Get(self)

    value = property(Get, Set)

CboSerialConfigParity_swigregister = _neoapi.CboSerialConfigParity_swigregister
CboSerialConfigParity_swigregister(CboSerialConfigParity)

boSerialConfigStopBits_One = _neoapi.boSerialConfigStopBits_One
boSerialConfigStopBits_OnePtFive = _neoapi.boSerialConfigStopBits_OnePtFive
boSerialConfigStopBits_Two = _neoapi.boSerialConfigStopBits_Two
class CboSerialConfigStopBits(EnumerationFeature):
    """
    Number of stop bits.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialConfigStopBits, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialConfigStopBits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialConfigStopBits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialConfigStopBits
    __del__ = lambda self: None

    def Set(self, value: 'boSerialConfigStopBits') -> "CboSerialConfigStopBits":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialConfigStopBits object with the value set.
        """
        return _neoapi.CboSerialConfigStopBits_Set(self, value)

    def Get(self) -> "boSerialConfigStopBits":
        """
        Get the current value.
        Return: The boSerialConfigStopBits value.
        """
        return _neoapi.CboSerialConfigStopBits_Get(self)

    value = property(Get, Set)

CboSerialConfigStopBits_swigregister = _neoapi.CboSerialConfigStopBits_swigregister
CboSerialConfigStopBits_swigregister(CboSerialConfigStopBits)

boSerialMode_Bypass = _neoapi.boSerialMode_Bypass
boSerialMode_Off = _neoapi.boSerialMode_Off
boSerialMode_OpticControl = _neoapi.boSerialMode_OpticControl
boSerialMode_boSerialControl = _neoapi.boSerialMode_boSerialControl
class CboSerialMode(EnumerationFeature):
    """
    States the interface mode of the serial interface.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialMode, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialMode
    __del__ = lambda self: None

    def Set(self, value: 'boSerialMode') -> "CboSerialMode":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialMode object with the value set.
        """
        return _neoapi.CboSerialMode_Set(self, value)

    def Get(self) -> "boSerialMode":
        """
        Get the current value.
        Return: The boSerialMode value.
        """
        return _neoapi.CboSerialMode_Get(self)

    value = property(Get, Set)

CboSerialMode_swigregister = _neoapi.CboSerialMode_swigregister
CboSerialMode_swigregister(CboSerialMode)

boSerialSelector_UART0 = _neoapi.boSerialSelector_UART0
boSerialSelector_UART1 = _neoapi.boSerialSelector_UART1
class CboSerialSelector(EnumerationFeature):
    """
    Selects which serial interface to configure.
    """
    __swig_setmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CboSerialSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [EnumerationFeature]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CboSerialSelector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a feature
        """
        this = _neoapi.new_CboSerialSelector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CboSerialSelector
    __del__ = lambda self: None

    def Set(self, value: 'boSerialSelector') -> "CboSerialSelector":
        """
        Set the current value.
        Parameter:
            value The target value to set.
        Return: The CboSerialSelector object with the value set.
        """
        return _neoapi.CboSerialSelector_Set(self, value)

    def Get(self) -> "boSerialSelector":
        """
        Get the current value.
        Return: The boSerialSelector value.
        """
        return _neoapi.CboSerialSelector_Get(self)

    value = property(Get, Set)

CboSerialSelector_swigregister = _neoapi.CboSerialSelector_swigregister
CboSerialSelector_swigregister(CboSerialSelector)

class FeatureAccess(_object):
    """
    Class to controll GenICam features
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureAccess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureAccess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ C-pointer for a camera
        """
        this = _neoapi.new_FeatureAccess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FeatureAccess
    __del__ = lambda self: None

    @property
    def AcquisitionAbort(self) -> "CommandFeature":
        """
        Aborts the Acquisition immediately. This will end the capture without completing the current Frame or waiting on a trigger. If no Acquisition is in progress, the command is ignored.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionAbort_get(self)

    __swig_setmethods__['AcquisitionFrameCount'] = lambda self, value: self.AcquisitionFrameCount.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionFrameCount.Set(value)
    @property
    def AcquisitionFrameCount(self) -> "IntegerFeature":
        """
        Number of frames to acquire in MultiFrame Acquisition mode.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionFrameCount_get(self)

    __swig_setmethods__['AcquisitionFrameRate'] = lambda self, value: self.AcquisitionFrameRate.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionFrameRate.Set(value)
    @property
    def AcquisitionFrameRate(self) -> "DoubleFeature":
        """
        Controls the acquisition rate (in Hertz) at which the frames are captured.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionFrameRate_get(self)

    __swig_setmethods__['AcquisitionFrameRateEnable'] = lambda self, value: self.AcquisitionFrameRateEnable.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionFrameRateEnable.Set(value)
    @property
    def AcquisitionFrameRateEnable(self) -> "BoolFeature":
        """
        Controls if the AcquisitionFrameRate feature is writable and used to control the acquisition rate. Otherwise, the acquisition rate is implicitly controlled by the combination of other features like ExposureTime, etc...
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionFrameRateEnable_get(self)

    __swig_setmethods__['AcquisitionFrameRateLimit'] = lambda self, value: self.AcquisitionFrameRateLimit.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionFrameRateLimit.Set(value)
    @property
    def AcquisitionFrameRateLimit(self) -> "DoubleFeature":
        """
        Returns the maximal acquisition rate (in Hertz) at which the frames are captured.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionFrameRateLimit_get(self)

    __swig_setmethods__['AcquisitionMode'] = lambda self, value: self.AcquisitionMode.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionMode.Set(value)
    @property
    def AcquisitionMode(self) -> "CAcquisitionMode":
        """
        Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.
        Return: A CAcquisitionMode object to control the value.
        possible values:
        - Continuous - Frames are captured continuously until stopped with the AcquisitionStop command.
        - MultiFrame - The number of frames specified by AcquisitionFrameCount is captured.
        - SingleFrame - One frame is captured.
        """
        return _neoapi.FeatureAccess_AcquisitionMode_get(self)

    @property
    def AcquisitionStart(self) -> "CommandFeature":
        """
        Starts the Acquisition of the device. The number of frames captured is specified by AcquisitionMode.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionStart_get(self)

    __swig_setmethods__['AcquisitionStartAuto'] = lambda self, value: self.AcquisitionStartAuto.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionStartAuto.Set(value)
    @property
    def AcquisitionStartAuto(self) -> "BoolFeature":
        """
        Controls if the Acquisition of the device starts automatically at device start or not.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionStartAuto_get(self)

    __swig_setmethods__['AcquisitionStatus'] = lambda self, value: self.AcquisitionStatus.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionStatus.Set(value)
    @property
    def AcquisitionStatus(self) -> "BoolFeature":
        """
        Reads the state of the internal acquisition signal selected using AcquisitionStatusSelector.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionStatus_get(self)

    __swig_setmethods__['AcquisitionStatusSelector'] = lambda self, value: self.AcquisitionStatusSelector.Set(value.value) if isinstance(value, BaseFeature) else self.AcquisitionStatusSelector.Set(value)
    @property
    def AcquisitionStatusSelector(self) -> "CAcquisitionStatusSelector":
        """
        Selects the internal acquisition signal to read using AcquisitionStatus.
        Return: A CAcquisitionStatusSelector object to control the value.
        possible values:
        - AcquisitionActive - Device is currently doing an acquisition of one or many frames.
        - AcquisitionTransfer - Device is currently transferring an acquisition of one or many frames.
        - AcquisitionTriggerWait - Device is currently waiting for a trigger for the capture of one or many frames.
        - ExposureActive - Device is doing the exposure of a frame.
        - FrameActive - Device is currently doing the capture of a frame.
        - FrameTriggerWait - Device is currently waiting for a frame start trigger.
        """
        return _neoapi.FeatureAccess_AcquisitionStatusSelector_get(self)

    @property
    def AcquisitionStop(self) -> "CommandFeature":
        """
        Stops the Acquisition of the device at the end of the current Frame. It is mainly used when AcquisitionMode is Continuous but can be used in any acquisition mode.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AcquisitionStop_get(self)

    __swig_setmethods__['ActionDeviceKey'] = lambda self, value: self.ActionDeviceKey.Set(value.value) if isinstance(value, BaseFeature) else self.ActionDeviceKey.Set(value)
    @property
    def ActionDeviceKey(self) -> "IntegerFeature":
        """
        Provides the device key that allows the device to check the validity of action commands. The device internal assertion of an action signal is only authorized if the ActionDeviceKey and the action device key value in the protocol message are equal.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ActionDeviceKey_get(self)

    __swig_setmethods__['ActionGroupKey'] = lambda self, value: self.ActionGroupKey.Set(value.value) if isinstance(value, BaseFeature) else self.ActionGroupKey.Set(value)
    @property
    def ActionGroupKey(self) -> "IntegerFeature":
        """
        Provides the key that the device will use to validate the action on reception of the action protocol message.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ActionGroupKey_get(self)

    __swig_setmethods__['ActionGroupMask'] = lambda self, value: self.ActionGroupMask.Set(value.value) if isinstance(value, BaseFeature) else self.ActionGroupMask.Set(value)
    @property
    def ActionGroupMask(self) -> "IntegerFeature":
        """
        Provides the mask that the device will use to validate the action on reception of the action protocol message.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ActionGroupMask_get(self)

    __swig_setmethods__['ActionSelector'] = lambda self, value: self.ActionSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ActionSelector.Set(value)
    @property
    def ActionSelector(self) -> "IntegerFeature":
        """
        Selects to which Action Signal further Action settings apply.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ActionSelector_get(self)

    __swig_setmethods__['Aperture'] = lambda self, value: self.Aperture.Set(value.value) if isinstance(value, BaseFeature) else self.Aperture.Set(value)
    @property
    def Aperture(self) -> "DoubleFeature":
        """
        Sets the aperture (also called iris, f-number, f-stop or f/#) of the lens. The lower the f/# the more light goes through the lens (the "faster" the lens) and the smaller the depth of field.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Aperture_get(self)

    @property
    def ApertureInitialize(self) -> "CommandFeature":
        """
        Initializes the aperture and makes it ready for use. The aperture position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ApertureInitialize_get(self)

    __swig_setmethods__['ApertureStatus'] = lambda self, value: self.ApertureStatus.Set(value.value) if isinstance(value, BaseFeature) else self.ApertureStatus.Set(value)
    @property
    def ApertureStatus(self) -> "CApertureStatus":
        """
        Reads the status of the aperture.
        Return: A CApertureStatus object to control the value.
        possible values:
        - Busy - Busy
        - Error - Error
        - NotConnected - Not Connected
        - NotInitialized - Not Initialized
        - NotSupported - Not Supported
        - Ready - Ready
        """
        return _neoapi.FeatureAccess_ApertureStatus_get(self)

    __swig_setmethods__['ApertureStepper'] = lambda self, value: self.ApertureStepper.Set(value.value) if isinstance(value, BaseFeature) else self.ApertureStepper.Set(value)
    @property
    def ApertureStepper(self) -> "IntegerFeature":
        """
        ApertureStepper controls the stepper value of the Aperture. 0 is the maximum opening.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ApertureStepper_get(self)

    __swig_setmethods__['AutoFeatureCycleTime'] = lambda self, value: self.AutoFeatureCycleTime.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureCycleTime.Set(value)
    @property
    def AutoFeatureCycleTime(self) -> "DoubleFeature":
        """
        Returns the Cycle Time of auto feature control loop in milliseconds for once and continuous mode.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AutoFeatureCycleTime_get(self)

    __swig_setmethods__['AutoFeatureHeight'] = lambda self, value: self.AutoFeatureHeight.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureHeight.Set(value)
    @property
    def AutoFeatureHeight(self) -> "IntegerFeature":
        """
        Sets the height of the selected Auto Feature Region (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AutoFeatureHeight_get(self)

    __swig_setmethods__['AutoFeatureOffsetX'] = lambda self, value: self.AutoFeatureOffsetX.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureOffsetX.Set(value)
    @property
    def AutoFeatureOffsetX(self) -> "IntegerFeature":
        """
        Sets the horizontal offset from the origin to the Auto Feature Region (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AutoFeatureOffsetX_get(self)

    __swig_setmethods__['AutoFeatureOffsetY'] = lambda self, value: self.AutoFeatureOffsetY.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureOffsetY.Set(value)
    @property
    def AutoFeatureOffsetY(self) -> "IntegerFeature":
        """
        Sets the vertical offset from the origin to the Auto Feature Region (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AutoFeatureOffsetY_get(self)

    __swig_setmethods__['AutoFeatureRegionMode'] = lambda self, value: self.AutoFeatureRegionMode.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureRegionMode.Set(value)
    @property
    def AutoFeatureRegionMode(self) -> "CAutoFeatureRegionMode":
        """
        Controls the mode of the selected Auto Feature Region.
        Return: A CAutoFeatureRegionMode object to control the value.
        possible values:
        - Off - All settings of the selected AutoFeature ROI are automatically equal to the selected AutoFeatureRegionReference.
        - On - The settings of the selected AutoFeature ROI are user defined. The AutoFeature is useable only if the AutoFeature ROI fits into the AutoFeatureRegionReference of the AutoFeature.
        """
        return _neoapi.FeatureAccess_AutoFeatureRegionMode_get(self)

    __swig_setmethods__['AutoFeatureRegionReference'] = lambda self, value: self.AutoFeatureRegionReference.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureRegionReference.Set(value)
    @property
    def AutoFeatureRegionReference(self) -> "CAutoFeatureRegionReference":
        """
        Selects the Reference Region of interest. The Auto Feature Region is part of this region and all Auto Feature Region features refers to this Reference Region.
        Return: A CAutoFeatureRegionReference object to control the value.
        possible values:
        - Region0 - The selected Auto Feature Region refers to Region 0.
        """
        return _neoapi.FeatureAccess_AutoFeatureRegionReference_get(self)

    __swig_setmethods__['AutoFeatureRegionSelector'] = lambda self, value: self.AutoFeatureRegionSelector.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureRegionSelector.Set(value)
    @property
    def AutoFeatureRegionSelector(self) -> "CAutoFeatureRegionSelector":
        """
        Selects the region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
        Return: A CAutoFeatureRegionSelector object to control the value.
        possible values:
        - BalanceWhiteAuto - Selected features will control the region for BalanceWhiteAuto and ColorTransformationAuto algorithm.
        - BrightnessAuto - Selected features will control the region for GainAuto and ExposureAuto algorithm.
        """
        return _neoapi.FeatureAccess_AutoFeatureRegionSelector_get(self)

    __swig_setmethods__['AutoFeatureWidth'] = lambda self, value: self.AutoFeatureWidth.Set(value.value) if isinstance(value, BaseFeature) else self.AutoFeatureWidth.Set(value)
    @property
    def AutoFeatureWidth(self) -> "IntegerFeature":
        """
        Width of the selected Auto Feature Region (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AutoFeatureWidth_get(self)

    __swig_setmethods__['AveragingEnable'] = lambda self, value: self.AveragingEnable.Set(value.value) if isinstance(value, BaseFeature) else self.AveragingEnable.Set(value)
    @property
    def AveragingEnable(self) -> "BoolFeature":
        """
        Enables the Averaging of the camera over at minimum 2 images.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AveragingEnable_get(self)

    __swig_setmethods__['AveragingImageCount'] = lambda self, value: self.AveragingImageCount.Set(value.value) if isinstance(value, BaseFeature) else self.AveragingImageCount.Set(value)
    @property
    def AveragingImageCount(self) -> "IntegerFeature":
        """
        Sets the number of images using for Averaging of the camera.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AveragingImageCount_get(self)

    __swig_setmethods__['AveragingNormalization'] = lambda self, value: self.AveragingNormalization.Set(value.value) if isinstance(value, BaseFeature) else self.AveragingNormalization.Set(value)
    @property
    def AveragingNormalization(self) -> "DoubleFeature":
        """
        Returns the reciprocal value of AveragingImageCount.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_AveragingNormalization_get(self)

    __swig_setmethods__['BOPFShift'] = lambda self, value: self.BOPFShift.Set(value.value) if isinstance(value, BaseFeature) else self.BOPFShift.Set(value)
    @property
    def BOPFShift(self) -> "CBOPFShift":
        """
        Selects the shift factor for 8bit pixel format calculated from 12 bit mode.
        Return: A CBOPFShift object to control the value.
        possible values:
        - Bits0To7 - Uses bit 0 to bit 7.
        - Bits1To8 - Uses bit 1 to bit 8.
        - Bits2To9 - Uses bit 2 to bit 9.
        - Bits3To10 - Uses bit 3 to bit 10.
        - Bits4To11 - Uses bit 4 to bit 11.
        """
        return _neoapi.FeatureAccess_BOPFShift_get(self)

    __swig_setmethods__['BalanceWhiteAuto'] = lambda self, value: self.BalanceWhiteAuto.Set(value.value) if isinstance(value, BaseFeature) else self.BalanceWhiteAuto.Set(value)
    @property
    def BalanceWhiteAuto(self) -> "CBalanceWhiteAuto":
        """
        Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
        Return: A CBalanceWhiteAuto object to control the value.
        possible values:
        - Continuous - White balancing is constantly adjusted by the device.
        - Off - White balancing is user controlled using BalanceRatioSelector and BalanceRatio.
        - Once - White balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.
        """
        return _neoapi.FeatureAccess_BalanceWhiteAuto_get(self)

    __swig_setmethods__['BalanceWhiteAutoStatus'] = lambda self, value: self.BalanceWhiteAutoStatus.Set(value.value) if isinstance(value, BaseFeature) else self.BalanceWhiteAutoStatus.Set(value)
    @property
    def BalanceWhiteAutoStatus(self) -> "CBalanceWhiteAutoStatus":
        """
        Returns the status of BalanceWhiteAuto.
        Return: A CBalanceWhiteAutoStatus object to control the value.
        possible values:
        - ColorGainsTooHigh - The BalanceWhiteAuto calculation failed since at least one of the calculated color gains exceeds the maximum value.
        - Initial - BalanceWhiteAuto has never been started.
        - Start - BalanceWhiteAuto is waiting for statistical data.
        - Success - The last BalanceWhiteAuto calculation succeeded.
        - Underrun - The BalanceWhiteAuto calculation failed since at least one color-channel shows invalid statistic data.
        """
        return _neoapi.FeatureAccess_BalanceWhiteAutoStatus_get(self)

    __swig_setmethods__['Baudrate'] = lambda self, value: self.Baudrate.Set(value.value) if isinstance(value, BaseFeature) else self.Baudrate.Set(value)
    @property
    def Baudrate(self) -> "CBaudrate":
        """
        Sets the baud rate of the RS232 interface.
        Return: A CBaudrate object to control the value.
        possible values:
        - Baud115200 - Baudrate of RS232 UART is 115200.
        - Baud19200 - Baudrate of RS232 UART is 19200.
        - Baud230400 - Baudrate of RS232 UART is 230400.
        - Baud38400 - Baudrate of RS232 UART is 38400.
        - Baud460800 - Baudrate of RS232 UART is 460800.
        - Baud57600 - Baudrate of RS232 UART is 57600.
        - Baud9600 - Baudrate of RS232 UART is 9600.
        - RS232Off - RS232 UART is off.
        """
        return _neoapi.FeatureAccess_Baudrate_get(self)

    __swig_setmethods__['BinningHorizontal'] = lambda self, value: self.BinningHorizontal.Set(value.value) if isinstance(value, BaseFeature) else self.BinningHorizontal.Set(value)
    @property
    def BinningHorizontal(self) -> "IntegerFeature":
        """
        Number of horizontal photo-sensitive cells to combine together. This reduces the horizontal resolution (width) of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BinningHorizontal_get(self)

    __swig_setmethods__['BinningHorizontalMode'] = lambda self, value: self.BinningHorizontalMode.Set(value.value) if isinstance(value, BaseFeature) else self.BinningHorizontalMode.Set(value)
    @property
    def BinningHorizontalMode(self) -> "CBinningHorizontalMode":
        """
        Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used.
        Return: A CBinningHorizontalMode object to control the value.
        possible values:
        - Average - The response from the combined cells will be averaged, resulting in increased signal/noise ratio.
        - Sum - The response from the combined cells will be added, resulting in increased sensitivity.
        """
        return _neoapi.FeatureAccess_BinningHorizontalMode_get(self)

    __swig_setmethods__['BinningRegion0'] = lambda self, value: self.BinningRegion0.Set(value.value) if isinstance(value, BaseFeature) else self.BinningRegion0.Set(value)
    @property
    def BinningRegion0(self) -> "IntegerFeature":
        """
        Sets the number of horizontal and vertical photo-sensitive cells to combine together calculated in camera.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BinningRegion0_get(self)

    __swig_setmethods__['BinningSelector'] = lambda self, value: self.BinningSelector.Set(value.value) if isinstance(value, BaseFeature) else self.BinningSelector.Set(value)
    @property
    def BinningSelector(self) -> "CBinningSelector":
        """
        Selects which binning engine is controlled by the BinningHorizontal and BinningVertical features.
        Return: A CBinningSelector object to control the value.
        possible values:
        - Region0 - Selected feature will control the region 0 binning.
        - Region1 - Selected feature will control the region 1 binning.
        - Region2 - Selected feature will control the region 2 binning.
        - Sensor - Selected features will control the sensor binning.
        """
        return _neoapi.FeatureAccess_BinningSelector_get(self)

    __swig_setmethods__['BinningSensor'] = lambda self, value: self.BinningSensor.Set(value.value) if isinstance(value, BaseFeature) else self.BinningSensor.Set(value)
    @property
    def BinningSensor(self) -> "IntegerFeature":
        """
        Sets the number of horizontal and vertical photo-sensitive cells to combine together calculated in sensor.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BinningSensor_get(self)

    __swig_setmethods__['BinningVertical'] = lambda self, value: self.BinningVertical.Set(value.value) if isinstance(value, BaseFeature) else self.BinningVertical.Set(value)
    @property
    def BinningVertical(self) -> "IntegerFeature":
        """
        Number of vertical photo-sensitive cells to combine together. This reduces the vertical resolution (height) of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BinningVertical_get(self)

    __swig_setmethods__['BinningVerticalMode'] = lambda self, value: self.BinningVerticalMode.Set(value.value) if isinstance(value, BaseFeature) else self.BinningVerticalMode.Set(value)
    @property
    def BinningVerticalMode(self) -> "CBinningVerticalMode":
        """
        Sets the mode to use to combine vertical photo-sensitive cells together when BinningVertical is used.
        Return: A CBinningVerticalMode object to control the value.
        possible values:
        - Average - The response from the combined cells will be averaged, resulting in increased signal/noise ratio.
        - Sum - The response from the combined cells will be added, resulting in increased sensitivity.
        """
        return _neoapi.FeatureAccess_BinningVerticalMode_get(self)

    __swig_setmethods__['BitShift'] = lambda self, value: self.BitShift.Set(value.value) if isinstance(value, BaseFeature) else self.BitShift.Set(value)
    @property
    def BitShift(self) -> "BoolFeature":
        """
        Enables the feature BitShift of 2 for using LSBs with pixelformat Mono8.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BitShift_get(self)

    __swig_setmethods__['BlackLevel'] = lambda self, value: self.BlackLevel.Set(value.value) if isinstance(value, BaseFeature) else self.BlackLevel.Set(value)
    @property
    def BlackLevel(self) -> "IntegerFeature":
        """
        Controls the analog black level as an absolute physical value. This represents a DC offset applied to the video signal.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BlackLevel_get(self)

    __swig_setmethods__['BlackLevelCorrectionEnable'] = lambda self, value: self.BlackLevelCorrectionEnable.Set(value.value) if isinstance(value, BaseFeature) else self.BlackLevelCorrectionEnable.Set(value)
    @property
    def BlackLevelCorrectionEnable(self) -> "BoolFeature":
        """
        Enables the Black Level Correction.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BlackLevelCorrectionEnable_get(self)

    __swig_setmethods__['BlackLevelCorrectionThreshold'] = lambda self, value: self.BlackLevelCorrectionThreshold.Set(value.value) if isinstance(value, BaseFeature) else self.BlackLevelCorrectionThreshold.Set(value)
    @property
    def BlackLevelCorrectionThreshold(self) -> "IntegerFeature":
        """
        Sets the Black Level Correction Threshold.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BlackLevelCorrectionThreshold_get(self)

    __swig_setmethods__['BlackLevelRaw'] = lambda self, value: self.BlackLevelRaw.Set(value.value) if isinstance(value, BaseFeature) else self.BlackLevelRaw.Set(value)
    @property
    def BlackLevelRaw(self) -> "IntegerFeature":
        """
        Controls the analog black level as a raw integer value. This represents a DC offset applied to the video signal.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BlackLevelRaw_get(self)

    __swig_setmethods__['BlackLevelSelector'] = lambda self, value: self.BlackLevelSelector.Set(value.value) if isinstance(value, BaseFeature) else self.BlackLevelSelector.Set(value)
    @property
    def BlackLevelSelector(self) -> "CBlackLevelSelector":
        """
        Selects which Black Level is controlled by the various Black Level features.
        Return: A CBlackLevelSelector object to control the value.
        possible values:
        - All - Black Level will be applied to all channels or taps.
        - Blue - Black Level will be applied to the blue channel.
        - Green - Black Level will be applied to the green channel.
        - Red - Black Level will be applied to the red channel.
        - Tap1 - Black Level will be applied to Tap 1.
        - Tap2 - Black Level will be applied to Tap 2.
        - U - Black Level will be applied to U channel.
        - V - Black Level will be applied to V channel.
        - Y - Black Level will be applied to Y channel.
        """
        return _neoapi.FeatureAccess_BlackLevelSelector_get(self)

    __swig_setmethods__['BlackReferenceCorrectionEnable'] = lambda self, value: self.BlackReferenceCorrectionEnable.Set(value.value) if isinstance(value, BaseFeature) else self.BlackReferenceCorrectionEnable.Set(value)
    @property
    def BlackReferenceCorrectionEnable(self) -> "BoolFeature":
        """
        Activates the black reference correction of the sensor.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BlackReferenceCorrectionEnable_get(self)

    __swig_setmethods__['BlackSunSuppression'] = lambda self, value: self.BlackSunSuppression.Set(value.value) if isinstance(value, BaseFeature) else self.BlackSunSuppression.Set(value)
    @property
    def BlackSunSuppression(self) -> "CBlackSunSuppression":
        """
        Controls the sensor internal feature for avoiding the black sun effect.
        Return: A CBlackSunSuppression object to control the value.
        possible values:
        - Default - Black Sun Suppression works with default settings.
        - High - Black Sun Suppression works with high settings.
        - Low - Black Sun Suppression works with low settings.
        - Max - Black Sun Suppression works with maximum settings.
        - Off - Black Sun Suppression is off.
        """
        return _neoapi.FeatureAccess_BlackSunSuppression_get(self)

    __swig_setmethods__['BoSequencerAbort'] = lambda self, value: self.BoSequencerAbort.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerAbort.Set(value)
    @property
    def BoSequencerAbort(self) -> "BoolFeature":
        """
        Aborts a running sequencer set.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerAbort_get(self)

    __swig_setmethods__['BoSequencerBinningHorizontal'] = lambda self, value: self.BoSequencerBinningHorizontal.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerBinningHorizontal.Set(value)
    @property
    def BoSequencerBinningHorizontal(self) -> "IntegerFeature":
        """
        Sets the sequencer sets number of horizontal photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the horizontal resolution (width) of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerBinningHorizontal_get(self)

    __swig_setmethods__['BoSequencerBinningVertical'] = lambda self, value: self.BoSequencerBinningVertical.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerBinningVertical.Set(value)
    @property
    def BoSequencerBinningVertical(self) -> "IntegerFeature":
        """
        Sets the sequencer sets number of vertical photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the vertical resolution (height) of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerBinningVertical_get(self)

    __swig_setmethods__['BoSequencerEnable'] = lambda self, value: self.BoSequencerEnable.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerEnable.Set(value)
    @property
    def BoSequencerEnable(self) -> "CBoSequencerEnable":
        """
        Enables the sequencer for special multi-frame mode. Normal acquisition will be stopped.
        Return: A CBoSequencerEnable object to control the value.
        possible values:
        - Off - Disables the sequencer
        - On - Enables the sequencer
        """
        return _neoapi.FeatureAccess_BoSequencerEnable_get(self)

    __swig_setmethods__['BoSequencerExposure'] = lambda self, value: self.BoSequencerExposure.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerExposure.Set(value)
    @property
    def BoSequencerExposure(self) -> "DoubleFeature":
        """
        Sets the sequencer sets exposure time in us.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerExposure_get(self)

    __swig_setmethods__['BoSequencerFramesPerTrigger'] = lambda self, value: self.BoSequencerFramesPerTrigger.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerFramesPerTrigger.Set(value)
    @property
    def BoSequencerFramesPerTrigger(self) -> "IntegerFeature":
        """
        Sets the Sequencer number of frames per trigger.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerFramesPerTrigger_get(self)

    __swig_setmethods__['BoSequencerGain'] = lambda self, value: self.BoSequencerGain.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerGain.Set(value)
    @property
    def BoSequencerGain(self) -> "DoubleFeature":
        """
        Sets the sequencer sets global Gain.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerGain_get(self)

    __swig_setmethods__['BoSequencerHeight'] = lambda self, value: self.BoSequencerHeight.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerHeight.Set(value)
    @property
    def BoSequencerHeight(self) -> "IntegerFeature":
        """
        Sets the Sequencers height of the image provided by the device (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerHeight_get(self)

    __swig_setmethods__['BoSequencerIOSelector'] = lambda self, value: self.BoSequencerIOSelector.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerIOSelector.Set(value)
    @property
    def BoSequencerIOSelector(self) -> "CBoSequencerIOSelector":
        """
        Selects the Sequencers output lines.
        Return: A CBoSequencerIOSelector object to control the value.
        possible values:
        - SequencerOutput0 - Sequencer Output 0 is selected.
        - SequencerOutput1 - Sequencer Output 1 is selected.
        - SequencerOutput2 - Sequencer Output 2 is selected.
        """
        return _neoapi.FeatureAccess_BoSequencerIOSelector_get(self)

    __swig_setmethods__['BoSequencerIOStatus'] = lambda self, value: self.BoSequencerIOStatus.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerIOStatus.Set(value)
    @property
    def BoSequencerIOStatus(self) -> "BoolFeature":
        """
        Returns the current status of the selected Sequencer output.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerIOStatus_get(self)

    __swig_setmethods__['BoSequencerIsRunning'] = lambda self, value: self.BoSequencerIsRunning.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerIsRunning.Set(value)
    @property
    def BoSequencerIsRunning(self) -> "BoolFeature":
        """
        Returns if the sequencer is running.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerIsRunning_get(self)

    __swig_setmethods__['BoSequencerLoops'] = lambda self, value: self.BoSequencerLoops.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerLoops.Set(value)
    @property
    def BoSequencerLoops(self) -> "IntegerFeature":
        """
        Sets the number of Loops for the sequencer sets.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerLoops_get(self)

    __swig_setmethods__['BoSequencerMode'] = lambda self, value: self.BoSequencerMode.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerMode.Set(value)
    @property
    def BoSequencerMode(self) -> "CBoSequencerMode":
        """
        Specifies the running mode of the sequencer.
        Return: A CBoSequencerMode object to control the value.
        possible values:
        - FreeRunning - The running mode free running is selected.
        - FreeRunningInitTrigger - The running mode free running init trigger is selected.
        - FreeRunningInitTriggerOnce - The running mode free running init trigger once is selected.
        - FreeRunningOnce - The running mode free running once is selected.
        - SingleStepTrigger - The running mode single step trigger is selected.
        - SingleStepTriggerOnce - The running mode single step trigger once is selected.
        """
        return _neoapi.FeatureAccess_BoSequencerMode_get(self)

    __swig_setmethods__['BoSequencerNumberOfSets'] = lambda self, value: self.BoSequencerNumberOfSets.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerNumberOfSets.Set(value)
    @property
    def BoSequencerNumberOfSets(self) -> "IntegerFeature":
        """
        Sets the number of sets to configure.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerNumberOfSets_get(self)

    __swig_setmethods__['BoSequencerOffsetX'] = lambda self, value: self.BoSequencerOffsetX.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerOffsetX.Set(value)
    @property
    def BoSequencerOffsetX(self) -> "IntegerFeature":
        """
        Sets the Offset X for the selected sequencer set.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerOffsetX_get(self)

    __swig_setmethods__['BoSequencerOffsetY'] = lambda self, value: self.BoSequencerOffsetY.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerOffsetY.Set(value)
    @property
    def BoSequencerOffsetY(self) -> "IntegerFeature":
        """
        Sets the Offset Y for the selected sequencer set.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerOffsetY_get(self)

    __swig_setmethods__['BoSequencerSensorDigitizationTaps'] = lambda self, value: self.BoSequencerSensorDigitizationTaps.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSensorDigitizationTaps.Set(value)
    @property
    def BoSequencerSensorDigitizationTaps(self) -> "CBoSequencerSensorDigitizationTaps":
        """
        Sets the number of digitized samples outputted simultaneously by the camera A/D conversion stage for the sequencer.
        Return: A CBoSequencerSensorDigitizationTaps object to control the value.
        possible values:
        - Four - 4 Taps
        - One - 1 Tap
        - OneAndThree - 2 Taps, One and Three
        - OneAndTwo - 2 Taps, One and Two
        """
        return _neoapi.FeatureAccess_BoSequencerSensorDigitizationTaps_get(self)

    __swig_setmethods__['BoSequencerSetActive'] = lambda self, value: self.BoSequencerSetActive.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSetActive.Set(value)
    @property
    def BoSequencerSetActive(self) -> "IntegerFeature":
        """
        Returns the index of the active set of the running sequencer.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerSetActive_get(self)

    __swig_setmethods__['BoSequencerSetNumberOfSets'] = lambda self, value: self.BoSequencerSetNumberOfSets.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSetNumberOfSets.Set(value)
    @property
    def BoSequencerSetNumberOfSets(self) -> "IntegerFeature":
        """
        Sets the number of sets to configure.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerSetNumberOfSets_get(self)

    __swig_setmethods__['BoSequencerSetReadOutTime'] = lambda self, value: self.BoSequencerSetReadOutTime.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSetReadOutTime.Set(value)
    @property
    def BoSequencerSetReadOutTime(self) -> "IntegerFeature":
        """
        Sets the sequencer sets Read Out Time in us for the current format settings.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerSetReadOutTime_get(self)

    __swig_setmethods__['BoSequencerSetRepeats'] = lambda self, value: self.BoSequencerSetRepeats.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSetRepeats.Set(value)
    @property
    def BoSequencerSetRepeats(self) -> "IntegerFeature":
        """
        Sets the number of repeats of a single parameter set.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerSetRepeats_get(self)

    __swig_setmethods__['BoSequencerSetSelector'] = lambda self, value: self.BoSequencerSetSelector.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerSetSelector.Set(value)
    @property
    def BoSequencerSetSelector(self) -> "IntegerFeature":
        """
        Selects the sequencer set to configure.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerSetSelector_get(self)

    __swig_setmethods__['BoSequencerStart'] = lambda self, value: self.BoSequencerStart.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerStart.Set(value)
    @property
    def BoSequencerStart(self) -> "CBoSequencerStart":
        """
        Starts or stopps the configured sequence.
        Return: A CBoSequencerStart object to control the value.
        possible values:
        - Off - Disables the configured sequence.
        - On - Enables the configured sequence.
        """
        return _neoapi.FeatureAccess_BoSequencerStart_get(self)

    __swig_setmethods__['BoSequencerWidth'] = lambda self, value: self.BoSequencerWidth.Set(value.value) if isinstance(value, BaseFeature) else self.BoSequencerWidth.Set(value)
    @property
    def BoSequencerWidth(self) -> "IntegerFeature":
        """
        Sets the Sequencers width of the image provided by the device (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BoSequencerWidth_get(self)

    __swig_setmethods__['BrightnessAutoNominalValue'] = lambda self, value: self.BrightnessAutoNominalValue.Set(value.value) if isinstance(value, BaseFeature) else self.BrightnessAutoNominalValue.Set(value)
    @property
    def BrightnessAutoNominalValue(self) -> "DoubleFeature":
        """
        Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BrightnessAutoNominalValue_get(self)

    __swig_setmethods__['BrightnessAutoPriority'] = lambda self, value: self.BrightnessAutoPriority.Set(value.value) if isinstance(value, BaseFeature) else self.BrightnessAutoPriority.Set(value)
    @property
    def BrightnessAutoPriority(self) -> "CBrightnessAutoPriority":
        """
        Sets the highest priority auto feature to adjust the brightness.
        Return: A CBrightnessAutoPriority object to control the value.
        possible values:
        - ExposureAuto - ExposureAuto has highest priority and will be modified first.
        - GainAuto - Gain Auto has highest priority and will be modified first.
        """
        return _neoapi.FeatureAccess_BrightnessAutoPriority_get(self)

    __swig_setmethods__['BrightnessCorrection'] = lambda self, value: self.BrightnessCorrection.Set(value.value) if isinstance(value, BaseFeature) else self.BrightnessCorrection.Set(value)
    @property
    def BrightnessCorrection(self) -> "CBrightnessCorrection":
        """
        Enables the Brightness Correction. Brightness Correction is available for binning only.
        Return: A CBrightnessCorrection object to control the value.
        possible values:
        - Off - Brightness Correction is off.
        - On - Brightness Correction is on.
        """
        return _neoapi.FeatureAccess_BrightnessCorrection_get(self)

    __swig_setmethods__['BrightnessCorrectionFactor'] = lambda self, value: self.BrightnessCorrectionFactor.Set(value.value) if isinstance(value, BaseFeature) else self.BrightnessCorrectionFactor.Set(value)
    @property
    def BrightnessCorrectionFactor(self) -> "DoubleFeature":
        """
        Indicates the factor of brightness correction in binning.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_BrightnessCorrectionFactor_get(self)

    __swig_setmethods__['CLFVALLowTime'] = lambda self, value: self.CLFVALLowTime.Set(value.value) if isinstance(value, BaseFeature) else self.CLFVALLowTime.Set(value)
    @property
    def CLFVALLowTime(self) -> "IntegerFeature":
        """
        Controls the low time in Clock Cycles for the Frame Valid signal between two frames.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CLFVALLowTime_get(self)

    __swig_setmethods__['CLLVALLowTime'] = lambda self, value: self.CLLVALLowTime.Set(value.value) if isinstance(value, BaseFeature) else self.CLLVALLowTime.Set(value)
    @property
    def CLLVALLowTime(self) -> "IntegerFeature":
        """
        Controls the low time in Clock Cycles for the Line Valid signal between two lines.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CLLVALLowTime_get(self)

    __swig_setmethods__['CLMCRC'] = lambda self, value: self.CLMCRC.Set(value.value) if isinstance(value, BaseFeature) else self.CLMCRC.Set(value)
    @property
    def CLMCRC(self) -> "IntegerFeature":
        """
        Controls the number of retransmissions allowed when a message channel message times out.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CLMCRC_get(self)

    __swig_setmethods__['CLMCTT'] = lambda self, value: self.CLMCTT.Set(value.value) if isinstance(value, BaseFeature) else self.CLMCTT.Set(value)
    @property
    def CLMCTT(self) -> "IntegerFeature":
        """
        Provides the transmission timeout value in milliseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CLMCTT_get(self)

    __swig_setmethods__['CalibrationAngleOfPolarizationOffset'] = lambda self, value: self.CalibrationAngleOfPolarizationOffset.Set(value.value) if isinstance(value, BaseFeature) else self.CalibrationAngleOfPolarizationOffset.Set(value)
    @property
    def CalibrationAngleOfPolarizationOffset(self) -> "DoubleFeature":
        """
        Adds a calibration offset to compensate for an individual "roll" angle of the camera, introduced by mounting tolerances. The offset is added to all type of output data that incorporates an angle, like false color representation and angle of polarization data. The offset is without effect to raw data and to degree of linear polarization data.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CalibrationAngleOfPolarizationOffset_get(self)

    __swig_setmethods__['CalibrationEnable'] = lambda self, value: self.CalibrationEnable.Set(value.value) if isinstance(value, BaseFeature) else self.CalibrationEnable.Set(value)
    @property
    def CalibrationEnable(self) -> "BoolFeature":
        """
        Activates the calibration of the four polarized light channels by applying matrix calculations and an angle offset.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CalibrationEnable_get(self)

    __swig_setmethods__['CalibrationMatrixValue'] = lambda self, value: self.CalibrationMatrixValue.Set(value.value) if isinstance(value, BaseFeature) else self.CalibrationMatrixValue.Set(value)
    @property
    def CalibrationMatrixValue(self) -> "DoubleFeature":
        """
        Represents the value of the selected gain factor inside the calibration matrix.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CalibrationMatrixValue_get(self)

    __swig_setmethods__['CalibrationMatrixValueSelector'] = lambda self, value: self.CalibrationMatrixValueSelector.Set(value.value) if isinstance(value, BaseFeature) else self.CalibrationMatrixValueSelector.Set(value)
    @property
    def CalibrationMatrixValueSelector(self) -> "CCalibrationMatrixValueSelector":
        """
        Selects the gain factor of the selected calibration matrix.
        Return: A CCalibrationMatrixValueSelector object to control the value.
        possible values:
        - Gain00 - Gain 0,0 of the selected calibration matrix.
        - Gain01 - Gain 0,1 of the selected calibration matrix.
        - Gain02 - Gain 0,2 of the selected calibration matrix.
        - Gain03 - Gain 0,3 of the selected calibration matrix.
        - Gain10 - Gain 1,0 of the selected calibration matrix.
        - Gain11 - Gain 1,1 of the selected calibration matrix.
        - Gain12 - Gain 1,2 of the selected calibration matrix.
        - Gain13 - Gain 1.3 of the selected calibration matrix.
        - Gain20 - Gain 2.0 of the selected calibration matrix.
        - Gain21 - Gain 2.1 of the selected calibration matrix.
        - Gain22 - Gain 2.2 of the selected calibration matrix.
        - Gain23 - Gain 2.3 of the selected calibration matrix.
        """
        return _neoapi.FeatureAccess_CalibrationMatrixValueSelector_get(self)

    __swig_setmethods__['ChunkActionRequestID'] = lambda self, value: self.ChunkActionRequestID.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkActionRequestID.Set(value)
    @property
    def ChunkActionRequestID(self) -> "IntegerFeature":
        """
        Returns the request ID of the action command that triggered the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkActionRequestID_get(self)

    __swig_setmethods__['ChunkActionSourceIP'] = lambda self, value: self.ChunkActionSourceIP.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkActionSourceIP.Set(value)
    @property
    def ChunkActionSourceIP(self) -> "IntegerFeature":
        """
        Returns the IP Adress of the action command source that triggered the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkActionSourceIP_get(self)

    __swig_setmethods__['ChunkBinningRegion0'] = lambda self, value: self.ChunkBinningRegion0.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkBinningRegion0.Set(value)
    @property
    def ChunkBinningRegion0(self) -> "IntegerFeature":
        """
        Returns the number of horizontal and vertical photo-sensitive cells to combine together calculated in camera.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkBinningRegion0_get(self)

    __swig_setmethods__['ChunkBinningSensor'] = lambda self, value: self.ChunkBinningSensor.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkBinningSensor.Set(value)
    @property
    def ChunkBinningSensor(self) -> "IntegerFeature":
        """
        Returns the number of horizontal and vertical photo-sensitive cells to combine together calculated in sensor.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkBinningSensor_get(self)

    __swig_setmethods__['ChunkEnable'] = lambda self, value: self.ChunkEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkEnable.Set(value)
    @property
    def ChunkEnable(self) -> "BoolFeature":
        """
        Enables the inclusion of the selected Chunk data in the payload of the image.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkEnable_get(self)

    __swig_setmethods__['ChunkModeActive'] = lambda self, value: self.ChunkModeActive.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkModeActive.Set(value)
    @property
    def ChunkModeActive(self) -> "BoolFeature":
        """
        Activates the inclusion of Chunk data in the transmitted payload.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkModeActive_get(self)

    __swig_setmethods__['ChunkSelector'] = lambda self, value: self.ChunkSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkSelector.Set(value)
    @property
    def ChunkSelector(self) -> "CChunkSelector":
        """
        Selects which Chunk to enable or control.
        Return: A CChunkSelector object to control the value.
        possible values:
        - Binning - Binning AVAILABLE: Always
        - BinningHorizontal - Binning Horizontal
        - BinningVertical - Binning Vertical
        - BlackLevel - Black Level
        - BoSequencerEnable - BoSequencer Enable
        - ComponentID - Component ID
        - ComponentIDValue - Component ID Value
        - CounterValue - Counter Value
        - DecimationHorizontal - Decimation Horizontal
        - DecimationVertical - Decimation Vertical
        - DeviceTemperature - Device Temperature. AVAILABLE: Always
        - EncoderStatusValue - Encoder Status Value
        - EncoderValue - Encoder Value
        - ExposureTime - Exposure Time
        - FrameID - Frame ID
        - Gain - Gain
        - GroupIDValue - Group ID Value
        - Height - Height
        - Image - Image
        - ImageControl - Image Control. AVAILABLE: Always
        - LinePitch - Line Pitch
        - LineStatusAll - Line Status All
        - OffsetX - Offset X
        - OffsetY - Offset Y
        - PixelDynamicRangeMax - Pixel Dynamic Range Max
        - PixelDynamicRangeMin - Pixel Dynamic Range Min
        - PixelFormat - Pixel Format
        - RegionID - Region ID
        - RegionIDValue - Region ID Value
        - ReverseX - Reverse X
        - ReverseY - Reverse Y
        - Scan3dAxisMax - Scan 3d Axis Max
        - Scan3dAxisMin - Scan 3d Axis Min
        - Scan3dCoordinateOffset - Scan 3d Coordinate Offset
        - Scan3dCoordinateReferenceValue - Scan 3d Coordinate Reference Value
        - Scan3dCoordinateScale - Scan 3d Coordinate Scale
        - Scan3dCoordinateSystem - Scan 3d Coordinate System
        - Scan3dCoordinateSystemReference - Scan 3d Coordinate System Reference
        - Scan3dCoordinateTransformValue - Scan 3d Coordinate Transform Value
        - Scan3dDistanceUnit - Scan 3d Distance Unit
        - Scan3dInvalidDataFlag - Scan 3d Invalid Data Flag
        - Scan3dInvalidDataValue - Scan 3d Invalid Data Value
        - Scan3dOutputMode - Scan 3d Output Mode
        - SequencerSetActive - Sequencer Set Active
        - SourceID - Source ID
        - SourceIDValue - Source ID Value
        - StreamChannelID - Stream Channel ID
        - TimerValue - Timer Value
        - Timestamp - Timestamp
        - TimestampLatchValue - Timestamp Latch Value
        - TransferBlockID - Transfer Block ID
        - TransferQueueCurrentBlockCount - Transfer Queue Current Block Count
        - TransferStreamID - Transfer Stream ID
        - TriggerControl - Trigger Control AVAILABLE: Always.
        - TriggerID - Trigger ID
        - Width - Width
        """
        return _neoapi.FeatureAccess_ChunkSelector_get(self)

    __swig_setmethods__['ChunkTriggerCounter'] = lambda self, value: self.ChunkTriggerCounter.Set(value.value) if isinstance(value, BaseFeature) else self.ChunkTriggerCounter.Set(value)
    @property
    def ChunkTriggerCounter(self) -> "IntegerFeature":
        """
        Returns the number of received trigger at the time of the FrameStart event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ChunkTriggerCounter_get(self)

    __swig_setmethods__['ClConfiguration'] = lambda self, value: self.ClConfiguration.Set(value.value) if isinstance(value, BaseFeature) else self.ClConfiguration.Set(value)
    @property
    def ClConfiguration(self) -> "CClConfiguration":
        """
        This Camera Link specific feature describes the configuration used by the camera. It helps especially when a camera is capable of operation in a non-standard configuration, and when the features PixelSize, SensorDigitizationTaps, and DeviceTapGeometry do not provide enough information for interpretation of the image data provided by the camera.
        Return: A CClConfiguration object to control the value.
        possible values:
        - Base - Standard base configuration described by the Camera Link standard.
        - DualBase - The camera streams the data from multiple taps (that do not fit in the standard base configuration) through two Camera Link base ports. It is responsibility of the application or frame grabber to reconstruct the full image. Only one of the ports (fixed) serves as the "master" for serial communication and triggering.
        - EightyBit - Standard 80-bit configuration with 10 taps of 8 bits or 8 taps of 10 bits, as described by the Camera Link standard.
        - Full - Standard full configuration described by the Camera Link standard.
        - Medium - Standard medium configuration described by the Camera Link standard.
        """
        return _neoapi.FeatureAccess_ClConfiguration_get(self)

    __swig_setmethods__['ClTimeSlotsCount'] = lambda self, value: self.ClTimeSlotsCount.Set(value.value) if isinstance(value, BaseFeature) else self.ClTimeSlotsCount.Set(value)
    @property
    def ClTimeSlotsCount(self) -> "CClTimeSlotsCount":
        """
        This Camera Link specific feature describes the time multiplexing of the camera link connection to transfer more than the configuration allows, in one single clock.
        Return: A CClTimeSlotsCount object to control the value.
        possible values:
        - One - One
        - Three - Three
        - Two - Two
        """
        return _neoapi.FeatureAccess_ClTimeSlotsCount_get(self)

    __swig_setmethods__['ColorTransformationAuto'] = lambda self, value: self.ColorTransformationAuto.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationAuto.Set(value)
    @property
    def ColorTransformationAuto(self) -> "CColorTransformationAuto":
        """
        Controls the mode for automatic adjusting the gains of the active transformation matrix.
        Return: A CColorTransformationAuto object to control the value.
        possible values:
        - Continuous - Color transformation is constantly adjusted by the device.
        - Off - Color transformation is user controlled using the various Colortransformation features.
        - Once - Color transformation is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.
        """
        return _neoapi.FeatureAccess_ColorTransformationAuto_get(self)

    __swig_setmethods__['ColorTransformationEnable'] = lambda self, value: self.ColorTransformationEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationEnable.Set(value)
    @property
    def ColorTransformationEnable(self) -> "BoolFeature":
        """
        Activates the selected Color Transformation module.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ColorTransformationEnable_get(self)

    __swig_setmethods__['ColorTransformationFactoryListSelector'] = lambda self, value: self.ColorTransformationFactoryListSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationFactoryListSelector.Set(value)
    @property
    def ColorTransformationFactoryListSelector(self) -> "CColorTransformationFactoryListSelector":
        """
        Selects the color transformation factory list tuned to the given color temeperature.
        Return: A CColorTransformationFactoryListSelector object to control the value.
        possible values:
        - OptimizedMatrixFor3000K - ColorTransformationFactoryList is connected to the color temperature of 3000K.
        - OptimizedMatrixFor3200K - ColorTransformationFactoryList is connected to the color temperature of 3200K.
        - OptimizedMatrixFor5000K - ColorTransformationFactoryList is connected to the color temperature of 5000K.
        - OptimizedMatrixFor5600K - ColorTransformationFactoryList is connected to the color temperature of 5600K.
        - OptimizedMatrixFor6500K - ColorTransformationFactoryList is connected to the color temperature of 6500K.
        """
        return _neoapi.FeatureAccess_ColorTransformationFactoryListSelector_get(self)

    __swig_setmethods__['ColorTransformationOutputColorSpace'] = lambda self, value: self.ColorTransformationOutputColorSpace.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationOutputColorSpace.Set(value)
    @property
    def ColorTransformationOutputColorSpace(self) -> "StringFeature":
        """
        sRGB Gamma 1: Camera was calibrated for the color space sRGB Gamma 1.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ColorTransformationOutputColorSpace_get(self)

    @property
    def ColorTransformationResetToFactoryList(self) -> "CommandFeature":
        """
        Resets the ColorTransformation to the selected ColorTransformationFactoryList.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ColorTransformationResetToFactoryList_get(self)

    __swig_setmethods__['ColorTransformationSelector'] = lambda self, value: self.ColorTransformationSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationSelector.Set(value)
    @property
    def ColorTransformationSelector(self) -> "CColorTransformationSelector":
        """
        Selects which Color Transformation module is controlled by the various Color Transformation features.
        Return: A CColorTransformationSelector object to control the value.
        possible values:
        - RGBtoRGB - RGB to RGB color transformation.
        - RGBtoYUV - RGB to YUV color transformation.
        """
        return _neoapi.FeatureAccess_ColorTransformationSelector_get(self)

    __swig_setmethods__['ColorTransformationValue'] = lambda self, value: self.ColorTransformationValue.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationValue.Set(value)
    @property
    def ColorTransformationValue(self) -> "DoubleFeature":
        """
        Represents the value of the selected Gain factor or Offset inside the Transformation matrix.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ColorTransformationValue_get(self)

    __swig_setmethods__['ColorTransformationValueSelector'] = lambda self, value: self.ColorTransformationValueSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ColorTransformationValueSelector.Set(value)
    @property
    def ColorTransformationValueSelector(self) -> "CColorTransformationValueSelector":
        """
        Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.
        Return: A CColorTransformationValueSelector object to control the value.
        possible values:
        - Gain00 - Gain 0,0 of the transformation matrix.
        - Gain01 - Gain 0,1 of the transformation matrix.
        - Gain02 - Gain 0,2 of the transformation matrix.
        - Gain10 - Gain 1,0 of the transformation matrix.
        - Gain11 - Gain 1,1 of the transformation matrix.
        - Gain12 - Gain 1,2 of the transformation matrix.
        - Gain20 - Gain 2,0 of the transformation matrix.
        - Gain21 - Gain 2,1 of the transformation matrix.
        - Gain22 - Gain 2,2 of the transformation matrix.
        - Offset0 - Offset 0 of the transformation matrix.
        - Offset1 - Offset 1 of the transformation matrix.
        - Offset2 - Offset 2 of the transformation matrix.
        """
        return _neoapi.FeatureAccess_ColorTransformationValueSelector_get(self)

    __swig_setmethods__['ComponentEnable'] = lambda self, value: self.ComponentEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ComponentEnable.Set(value)
    @property
    def ComponentEnable(self) -> "BoolFeature":
        """
        Controls if the selected component streaming is active.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ComponentEnable_get(self)

    __swig_setmethods__['ComponentSelector'] = lambda self, value: self.ComponentSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ComponentSelector.Set(value)
    @property
    def ComponentSelector(self) -> "CComponentSelector":
        """
        Selects a component to activate/deactivate its data streaming.
        Return: A CComponentSelector object to control the value.
        possible values:
        - Confidence - The acquisition of confidence map of the acquired image is controlled. Confidence data may be binary (0 - invalid) or an integer where 0 is invalid and increasing value is increased confidence in the data in the corresponding pixel. If floating point representation is used the confidence image is normalized to the range [0,1], for integer representation the maximum possible integer represents maximum confidence.
        - Disparity - The acquisition of stereo camera disparity data is controlled. Disparity is a more specific range format approximately inversely proportional to distance. Disparity is typically given in pixel units.
        - Infrared - The acquisition of non-visible infrared light is controlled.
        - Intensity - The acquisition of intensity (monochrome or color) of the visible reflected light is controlled.
        - Multispectral - The acquisition of multiple spectral bands corresponding to various light wavelenghts is controlled.
        - PolarizedRaw - Acquisition of polarized light intensity. The polarizing filters are arranged in a 2-by-2 pattern: 135° and 0° on even lines, 90° and 45° on odd lines. The raw data is unprocessed. AVAILABLE: Always
        - Range - The acquisition of range (distance) data is controlled. The data produced may be only range (2.5D) or a point cloud giving the 3D coordinates depending on the Scan3dControl features.
        - Reflectance - The reflected intensity acquired together with Range in a Linescan3D sensor acquiring a single linescan profile for each exposure of the sensor.
        - Scatter - The acquisition of data measuring how much light is scattered around the reflected light. In processing this is used as an additional intensity image, often together with the standard intensity or reflectance.
        - Ultraviolet - The acquisition of non-visible ultraviolet light is controlled.
        """
        return _neoapi.FeatureAccess_ComponentSelector_get(self)

    __swig_setmethods__['ConcatenationEnable'] = lambda self, value: self.ConcatenationEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ConcatenationEnable.Set(value)
    @property
    def ConcatenationEnable(self) -> "IntegerFeature":
        """
        Enables the Concatenation mode.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ConcatenationEnable_get(self)

    __swig_setmethods__['CounterDuration'] = lambda self, value: self.CounterDuration.Set(value.value) if isinstance(value, BaseFeature) else self.CounterDuration.Set(value)
    @property
    def CounterDuration(self) -> "IntegerFeature":
        """
        Sets the duration (or number of events) before the CounterEnd event is generated.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CounterDuration_get(self)

    __swig_setmethods__['CounterEventActivation'] = lambda self, value: self.CounterEventActivation.Set(value.value) if isinstance(value, BaseFeature) else self.CounterEventActivation.Set(value)
    @property
    def CounterEventActivation(self) -> "CCounterEventActivation":
        """
        Selects the Activation mode Event Source signal.
        Return: A CCounterEventActivation object to control the value.
        possible values:
        - AnyEdge - Counts on the Falling or rising Edge of the selected signal.
        - FallingEdge - Counts on the Falling Edge of the signal.
        - RisingEdge - Counts on the Rising Edge of the signal.
        """
        return _neoapi.FeatureAccess_CounterEventActivation_get(self)

    __swig_setmethods__['CounterEventSource'] = lambda self, value: self.CounterEventSource.Set(value.value) if isinstance(value, BaseFeature) else self.CounterEventSource.Set(value)
    @property
    def CounterEventSource(self) -> "CCounterEventSource":
        """
        Select the events that will be the source to increment the Counter.
        Return: A CCounterEventSource object to control the value.
        possible values:
        - AcquisitionEnd - Counts the number of Acquisition End.
        - AcquisitionStart - Counts the number of Acquisition Start.
        - AcquisitionTrigger - Counts the number of Acquisition Trigger.
        - AcquisitionTriggerMissed - Counts the number of missed Acquisition Start Trigger.
        - Action0 - Counts the number of assertions of the chosen action signal.
        - Action1 - Counts the number of assertions of the chosen action signal.
        - Action2 - Counts the number of assertions of the chosen action signal.
        - Counter0End - Counts the number of Counter End.
        - Counter0Start - Counts the number of Counter Start.
        - Counter1End - Counts the number of Counter End.
        - Counter1Start - Counts the number of Counter Start.
        - Counter2End - Counts the number of Counter End.
        - Counter2Start - Counts the number of Counter Start.
        - Encoder0 - Counts the number of Encoder output pulses.
        - Encoder1 - Counts the number of Encoder output pulses.
        - Encoder2 - Counts the number of Encoder output pulses.
        - ExposureActive - Counts all Exposures. AVAILABLE: Always
        - ExposureEnd - Counts the number of Exposure End.
        - ExposureStart - Counts the number of Exposure Start.
        - FrameBurstEnd - Counts the number of Frame Burst End.
        - FrameBurstStart - Counts the number of Frame Burst Start.
        - FrameEnd - Counts the number of Frame End.
        - FrameStart - Counts the number of Frame Start.
        - FrameTransferSkipped - Counts when a frame transfer skipped. AVAILABLE: Always
        - FrameTrigger - Counts the number of Frame Start Trigger.
        - FrameTriggerMissed - Counts the number of missed Frame Start Trigger.
        - Line0 - Counts the number of transitions on the chosen I/O Line.
        - Line1 - Counts the number of transitions on the chosen I/O Line.
        - Line2 - Counts the number of transitions on the chosen I/O Line.
        - LineEnd - Counts the number of Line End.
        - LineStart - Counts the number of Line Start.
        - LineTrigger - Counts the number of Line Start Trigger.
        - LineTriggerMissed - Counts the number of missed Line Start Trigger.
        - LinkTrigger0 - Counts the number of Link Triggers.
        - LinkTrigger1 - Counts the number of Link Triggers.
        - LinkTrigger2 - Counts the number of Link Triggers.
        - LinkTriggerMissed0 - Counts the number of Link Triggers missed.
        - LinkTriggerMissed1 - Counts the number of Link Triggers missed.
        - LinkTriggerMissed2 - Counts the number of Link Triggers missed.
        - LogicBlock0 - Counts the number of Logic Block output pulses.
        - LogicBlock1 - Counts the number of Logic Block output pulses.
        - LogicBlock2 - Counts the number of Logic Block output pulses.
        - Off - Counter is stopped.
        - SoftwareSignal0 - Counts the number of Software Signal.
        - SoftwareSignal1 - Counts the number of Software Signal.
        - SoftwareSignal2 - Counts the number of Software Signal.
        - Timer0End - Counts the number of Timer End pulses generated.
        - Timer0Start - Counts the number of Timer Start pulses generated.
        - Timer1End - Counts the number of Timer End pulses generated.
        - Timer1Start - Counts the number of Timer Start pulses generated.
        - Timer2End - Counts the number of Timer End pulses generated.
        - Timer2Start - Counts the number of Timer Start pulses generated.
        - TimestampTick - Counts the number of clock ticks of the Timestamp clock. Can be used to create a programmable timer.
        - TriggerSkipped - Counts when a Trigger skipped. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_CounterEventSource_get(self)

    @property
    def CounterReset(self) -> "CommandFeature":
        """
        Does a software reset of the selected Counter and starts it. The counter starts counting events immediately after the reset unless a Counter trigger is active. CounterReset can be used to reset the Counter independently from the CounterResetSource. To disable the counter temporarily, set CounterEventSource to Off.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CounterReset_get(self)

    __swig_setmethods__['CounterResetActivation'] = lambda self, value: self.CounterResetActivation.Set(value.value) if isinstance(value, BaseFeature) else self.CounterResetActivation.Set(value)
    @property
    def CounterResetActivation(self) -> "CCounterResetActivation":
        """
        Selects the Activation mode of the Counter Reset Source signal.
        Return: A CCounterResetActivation object to control the value.
        possible values:
        - AnyEdge - Resets the counter on the Falling or rising Edge of the selected signal.
        - FallingEdge - Resets the counter on the Falling Edge of the signal.
        - LevelHigh - Resets the counter as long as the selected signal level is High.
        - LevelLow - Resets the counter as long as the selected signal level is Low.
        - RisingEdge - Resets the counter on the Rising Edge of the signal.
        """
        return _neoapi.FeatureAccess_CounterResetActivation_get(self)

    __swig_setmethods__['CounterResetSource'] = lambda self, value: self.CounterResetSource.Set(value.value) if isinstance(value, BaseFeature) else self.CounterResetSource.Set(value)
    @property
    def CounterResetSource(self) -> "CCounterResetSource":
        """
        Selects the signals that will be the source to reset the Counter.
        Return: A CCounterResetSource object to control the value.
        possible values:
        - AcquisitionEnd - Resets with the reception of the Acquisition End.
        - AcquisitionStart - Resets with the reception of the Acquisition Start.
        - AcquisitionTrigger - Resets with the reception of the Acquisition Trigger.
        - AcquisitionTriggerMissed - Resets with the reception of the missed Acquisition start trigger.
        - Action0 - Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).
        - Action1 - Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).
        - Action2 - Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).
        - Counter0End - Resets with the reception of the Counter End.
        - Counter0Start - Resets with the reception of the Counter Start.
        - Counter1End - Resets with the reception of the Counter End.
        - Counter1Start - Resets with the reception of the Counter Start.
        - Counter2End - Resets with the reception of the Counter End.
        - Counter2Start - Resets with the reception of the Counter Start.
        - CounterTrigger - Resets with the reception of a trigger on the CounterTriggerSource.
        - Encoder0 - Resets with the reception of the Encoder output signal.
        - Encoder1 - Resets with the reception of the Encoder output signal.
        - Encoder2 - Resets with the reception of the Encoder output signal.
        - ExposureEnd - Resets with the reception of the Exposure End.
        - ExposureStart - Resets with the reception of the Exposure Start.
        - FrameEnd - Resets with the reception of the Frame End.
        - FrameStart - Resets with the reception of the Frame Start.
        - FrameTrigger - Resets with the reception of the Frame Start Trigger.
        - FrameTriggerMissed - Resets with the reception of the missed Frame start trigger.
        - Line0 - Resets by the chosen I/O Line.
        - Line1 - Resets by the chosen I/O Line.
        - Line2 - Resets by the chosen I/O Line.
        - LineEnd - Resets with the reception of the Line End.
        - LineStart - Resets with the reception of the Line Start.
        - LineTrigger - Resets with the reception of the Line Start Trigger.
        - LineTriggerMissed - Resets with the reception of the missed Line start trigger.
        - LinkTrigger0 - Resets on the reception of the chosen Link Trigger (received from the transport layer).
        - LinkTrigger1 - Resets on the reception of the chosen Link Trigger (received from the transport layer).
        - LinkTrigger2 - Resets on the reception of the chosen Link Trigger (received from the transport layer).
        - LogicBlock0 - Resets with the reception of the LogicBlock output signal.
        - LogicBlock1 - Resets with the reception of the LogicBlock output signal.
        - LogicBlock2 - Resets with the reception of the LogicBlock output signal.
        - Off - Disable the Counter Reset trigger.
        - SoftwareSignal0 - Resets on the reception of the Software Signal.
        - SoftwareSignal1 - Resets on the reception of the Software Signal.
        - SoftwareSignal2 - Resets on the reception of the Software Signal.
        - Timer0End - Resets with the reception of the Timer End.
        - Timer0Start - Resets with the reception of the Timer Start.
        - Timer1End - Resets with the reception of the Timer End.
        - Timer1Start - Resets with the reception of the Timer Start.
        - Timer2End - Resets with the reception of the Timer End.
        - Timer2Start - Resets with the reception of the Timer Start.
        - UserOutput0 - Resets by the chosen User Output bit.
        - UserOutput1 - Resets by the chosen User Output bit.
        - UserOutput2 - Resets by the chosen User Output bit.
        """
        return _neoapi.FeatureAccess_CounterResetSource_get(self)

    __swig_setmethods__['CounterSelector'] = lambda self, value: self.CounterSelector.Set(value.value) if isinstance(value, BaseFeature) else self.CounterSelector.Set(value)
    @property
    def CounterSelector(self) -> "CCounterSelector":
        """
        Selects which Counter to configure.
        Return: A CCounterSelector object to control the value.
        possible values:
        - Counter0 - Selects the counter 0.
        - Counter1 - Selects the counter 1.
        - Counter2 - Selects the counter 2.
        """
        return _neoapi.FeatureAccess_CounterSelector_get(self)

    __swig_setmethods__['CounterValue'] = lambda self, value: self.CounterValue.Set(value.value) if isinstance(value, BaseFeature) else self.CounterValue.Set(value)
    @property
    def CounterValue(self) -> "IntegerFeature":
        """
        Reads or writes the current value of the selected Counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CounterValue_get(self)

    __swig_setmethods__['CounterValueAtReset'] = lambda self, value: self.CounterValueAtReset.Set(value.value) if isinstance(value, BaseFeature) else self.CounterValueAtReset.Set(value)
    @property
    def CounterValueAtReset(self) -> "IntegerFeature":
        """
        Reads the value of the selected Counter when it was reset by a trigger or by an explicit CounterReset command.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CounterValueAtReset_get(self)

    __swig_setmethods__['CustomData'] = lambda self, value: self.CustomData.Set(value.value) if isinstance(value, BaseFeature) else self.CustomData.Set(value)
    @property
    def CustomData(self) -> "IntegerFeature":
        """
        Sets one byte of custom special data.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CustomData_get(self)

    __swig_setmethods__['CustomDataConfigurationMode'] = lambda self, value: self.CustomDataConfigurationMode.Set(value.value) if isinstance(value, BaseFeature) else self.CustomDataConfigurationMode.Set(value)
    @property
    def CustomDataConfigurationMode(self) -> "CCustomDataConfigurationMode":
        """
        Controls if the custom data configuration mode is active.
        Return: A CCustomDataConfigurationMode object to control the value.
        possible values:
        - Off - Disables the custom data configuration mode.
        - On - Enables the custom data configuration mode.
        """
        return _neoapi.FeatureAccess_CustomDataConfigurationMode_get(self)

    __swig_setmethods__['CustomDataSelector'] = lambda self, value: self.CustomDataSelector.Set(value.value) if isinstance(value, BaseFeature) else self.CustomDataSelector.Set(value)
    @property
    def CustomDataSelector(self) -> "IntegerFeature":
        """
        Selects the index of the custom data byte array.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_CustomDataSelector_get(self)

    __swig_setmethods__['DecimationHorizontal'] = lambda self, value: self.DecimationHorizontal.Set(value.value) if isinstance(value, BaseFeature) else self.DecimationHorizontal.Set(value)
    @property
    def DecimationHorizontal(self) -> "IntegerFeature":
        """
        Horizontal sub-sampling of the image. This reduces the horizontal resolution (width) of the image by the specified horizontal decimation factor.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DecimationHorizontal_get(self)

    __swig_setmethods__['DecimationHorizontalMode'] = lambda self, value: self.DecimationHorizontalMode.Set(value.value) if isinstance(value, BaseFeature) else self.DecimationHorizontalMode.Set(value)
    @property
    def DecimationHorizontalMode(self) -> "CDecimationHorizontalMode":
        """
        Sets the mode used to reduce the horizontal resolution when DecimationHorizontal is used.
        Return: A CDecimationHorizontalMode object to control the value.
        possible values:
        - Average - The values of a group of N adjacent pixels are averaged.
        - Discard - The value of every Nth pixel is kept, others are discarded.
        """
        return _neoapi.FeatureAccess_DecimationHorizontalMode_get(self)

    __swig_setmethods__['DecimationVertical'] = lambda self, value: self.DecimationVertical.Set(value.value) if isinstance(value, BaseFeature) else self.DecimationVertical.Set(value)
    @property
    def DecimationVertical(self) -> "IntegerFeature":
        """
        Vertical sub-sampling of the image. This reduces the vertical resolution (height) of the image by the specified vertical decimation factor.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DecimationVertical_get(self)

    __swig_setmethods__['DecimationVerticalMode'] = lambda self, value: self.DecimationVerticalMode.Set(value.value) if isinstance(value, BaseFeature) else self.DecimationVerticalMode.Set(value)
    @property
    def DecimationVerticalMode(self) -> "CDecimationVerticalMode":
        """
        Sets the mode used to reduce the Vertical resolution when DecimationVertical is used.
        Return: A CDecimationVerticalMode object to control the value.
        possible values:
        - Average - The values of a group of N adjacent pixels are averaged.
        - Discard - The value of every Nth pixel is kept, others are discarded.
        """
        return _neoapi.FeatureAccess_DecimationVerticalMode_get(self)

    __swig_setmethods__['DefectPixelCorrection'] = lambda self, value: self.DefectPixelCorrection.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelCorrection.Set(value)
    @property
    def DefectPixelCorrection(self) -> "BoolFeature":
        """
        Enables the correction of defect pixels.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DefectPixelCorrection_get(self)

    __swig_setmethods__['DefectPixelListEntryActive'] = lambda self, value: self.DefectPixelListEntryActive.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelListEntryActive.Set(value)
    @property
    def DefectPixelListEntryActive(self) -> "BoolFeature":
        """
        Determines if the pixel correction is active for the selected entry.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DefectPixelListEntryActive_get(self)

    __swig_setmethods__['DefectPixelListEntryPosX'] = lambda self, value: self.DefectPixelListEntryPosX.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelListEntryPosX.Set(value)
    @property
    def DefectPixelListEntryPosX(self) -> "IntegerFeature":
        """
        Sets the X position of the pixel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DefectPixelListEntryPosX_get(self)

    __swig_setmethods__['DefectPixelListEntryPosY'] = lambda self, value: self.DefectPixelListEntryPosY.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelListEntryPosY.Set(value)
    @property
    def DefectPixelListEntryPosY(self) -> "IntegerFeature":
        """
        Sets the Y position of the pixel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DefectPixelListEntryPosY_get(self)

    __swig_setmethods__['DefectPixelListIndex'] = lambda self, value: self.DefectPixelListIndex.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelListIndex.Set(value)
    @property
    def DefectPixelListIndex(self) -> "IntegerFeature":
        """
        Sets the index to the defect pixel correction list.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DefectPixelListIndex_get(self)

    __swig_setmethods__['DefectPixelListSelector'] = lambda self, value: self.DefectPixelListSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DefectPixelListSelector.Set(value)
    @property
    def DefectPixelListSelector(self) -> "CDefectPixelListSelector":
        """
        Selects which Defect Pixel List to control.
        Return: A CDefectPixelListSelector object to control the value.
        possible values:
        - Column - Selects Defect Pixel List for defect columns.
        - Pixel - Selects Defect Pixel List for defect pixels.
        - Row - Selects Defect Pixel List for defect rows.
        """
        return _neoapi.FeatureAccess_DefectPixelListSelector_get(self)

    __swig_setmethods__['DeviceCharacterSet'] = lambda self, value: self.DeviceCharacterSet.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceCharacterSet.Set(value)
    @property
    def DeviceCharacterSet(self) -> "CDeviceCharacterSet":
        """
        Character set used by the strings of the device.
        Return: A CDeviceCharacterSet object to control the value.
        possible values:
        - ASCII - Device use ASCII character set.
        - UTF16 - Device use UTF16 character set. AVAILABLE: Always.
        - UTF8 - Device use UTF8 character set.
        """
        return _neoapi.FeatureAccess_DeviceCharacterSet_get(self)

    __swig_setmethods__['DeviceClockFrequency'] = lambda self, value: self.DeviceClockFrequency.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceClockFrequency.Set(value)
    @property
    def DeviceClockFrequency(self) -> "DoubleFeature":
        """
        Returns the frequency of the selected Clock.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceClockFrequency_get(self)

    __swig_setmethods__['DeviceClockSelector'] = lambda self, value: self.DeviceClockSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceClockSelector.Set(value)
    @property
    def DeviceClockSelector(self) -> "CDeviceClockSelector":
        """
        Selects the clock frequency to access from the device.
        Return: A CDeviceClockSelector object to control the value.
        possible values:
        - CameraLink - Frequency of the Camera Link clock.
        - Sensor - Clock frequency of the image sensor of the camera.
        - SensorDigitization - Clock frequency of the camera A/D conversion stage.
        """
        return _neoapi.FeatureAccess_DeviceClockSelector_get(self)

    __swig_setmethods__['DeviceEventChannelCount'] = lambda self, value: self.DeviceEventChannelCount.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceEventChannelCount.Set(value)
    @property
    def DeviceEventChannelCount(self) -> "IntegerFeature":
        """
        Indicates the number of event channels supported by the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceEventChannelCount_get(self)

    __swig_setmethods__['DeviceFamilyName'] = lambda self, value: self.DeviceFamilyName.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceFamilyName.Set(value)
    @property
    def DeviceFamilyName(self) -> "StringFeature":
        """
        Identifier of the product family of the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceFamilyName_get(self)

    __swig_setmethods__['DeviceFirmwareVersion'] = lambda self, value: self.DeviceFirmwareVersion.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceFirmwareVersion.Set(value)
    @property
    def DeviceFirmwareVersion(self) -> "StringFeature":
        """
        Version of the firmware in the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceFirmwareVersion_get(self)

    __swig_setmethods__['DeviceFrontUARTSource'] = lambda self, value: self.DeviceFrontUARTSource.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceFrontUARTSource.Set(value)
    @property
    def DeviceFrontUARTSource(self) -> "CDeviceFrontUARTSource":
        """
        Source control for frontside UART interface.
        Return: A CDeviceFrontUARTSource object to control the value.
        possible values:
        - OpticControl - Front side UART interface is used for optic control.
        - RS232 - Front side UART interface is used as RS232 interface. Optic control is not possible.
        """
        return _neoapi.FeatureAccess_DeviceFrontUARTSource_get(self)

    __swig_setmethods__['DeviceGenCPVersionMajor'] = lambda self, value: self.DeviceGenCPVersionMajor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceGenCPVersionMajor.Set(value)
    @property
    def DeviceGenCPVersionMajor(self) -> "IntegerFeature":
        """
        Major version of the GenCP protocol supported by the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceGenCPVersionMajor_get(self)

    __swig_setmethods__['DeviceGenCPVersionMinor'] = lambda self, value: self.DeviceGenCPVersionMinor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceGenCPVersionMinor.Set(value)
    @property
    def DeviceGenCPVersionMinor(self) -> "IntegerFeature":
        """
        Minor version of the GenCP protocol supported by the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceGenCPVersionMinor_get(self)

    __swig_setmethods__['DeviceLicense'] = lambda self, value: self.DeviceLicense.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLicense.Set(value)
    @property
    def DeviceLicense(self) -> "CDeviceLicense":
        """
        Returns if the license at the device is valid or not for the license type, selected by the DeviceLicenseTypeSelector feature.
        Return: A CDeviceLicense object to control the value.
        possible values:
        - Invalid - The license is invalid
        - Valid - The license is valid
        """
        return _neoapi.FeatureAccess_DeviceLicense_get(self)

    __swig_setmethods__['DeviceLicenseTypeSelector'] = lambda self, value: self.DeviceLicenseTypeSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLicenseTypeSelector.Set(value)
    @property
    def DeviceLicenseTypeSelector(self) -> "CDeviceLicenseTypeSelector":
        """
        Selects the available License types.
        Return: A CDeviceLicenseTypeSelector object to control the value.
        possible values:
        - eVARuntime - License to execute an applet, generated by VisualApplets
        """
        return _neoapi.FeatureAccess_DeviceLicenseTypeSelector_get(self)

    __swig_setmethods__['DeviceLinkCommandTimeout'] = lambda self, value: self.DeviceLinkCommandTimeout.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkCommandTimeout.Set(value)
    @property
    def DeviceLinkCommandTimeout(self) -> "DoubleFeature":
        """
        Indicates the command timeout of the specified Link. This corresponds to the maximum response time of the device for a command sent on that link.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceLinkCommandTimeout_get(self)

    __swig_setmethods__['DeviceLinkHeartbeatMode'] = lambda self, value: self.DeviceLinkHeartbeatMode.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkHeartbeatMode.Set(value)
    @property
    def DeviceLinkHeartbeatMode(self) -> "CDeviceLinkHeartbeatMode":
        """
        Activate or deactivate the Link's heartbeat.
        Return: A CDeviceLinkHeartbeatMode object to control the value.
        possible values:
        - Off - Disables the Link heartbeat.
        - On - Enables the Link heartbeat.
        """
        return _neoapi.FeatureAccess_DeviceLinkHeartbeatMode_get(self)

    __swig_setmethods__['DeviceLinkHeartbeatTimeout'] = lambda self, value: self.DeviceLinkHeartbeatTimeout.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkHeartbeatTimeout.Set(value)
    @property
    def DeviceLinkHeartbeatTimeout(self) -> "DoubleFeature":
        """
        Controls the current heartbeat timeout of the specific Link.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceLinkHeartbeatTimeout_get(self)

    __swig_setmethods__['DeviceLinkSelector'] = lambda self, value: self.DeviceLinkSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkSelector.Set(value)
    @property
    def DeviceLinkSelector(self) -> "CDeviceLinkSelector":
        """
        Selects which Link of the device to control.
        Return: A CDeviceLinkSelector object to control the value.
        possible values:
        - USB0 - Selects the link at USB interface with index 0
        """
        return _neoapi.FeatureAccess_DeviceLinkSelector_get(self)

    __swig_setmethods__['DeviceLinkSpeed'] = lambda self, value: self.DeviceLinkSpeed.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkSpeed.Set(value)
    @property
    def DeviceLinkSpeed(self) -> "IntegerFeature":
        """
        Indicates the speed of transmission negotiated on the specified Link.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceLinkSpeed_get(self)

    __swig_setmethods__['DeviceLinkThroughputLimit'] = lambda self, value: self.DeviceLinkThroughputLimit.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceLinkThroughputLimit.Set(value)
    @property
    def DeviceLinkThroughputLimit(self) -> "IntegerFeature":
        """
        Limits the maximum bandwidth of the data that will be streamed out by the device on the selected Link. If necessary, delays will be uniformly inserted between transport layer packets in order to control the peak bandwidth.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceLinkThroughputLimit_get(self)

    __swig_setmethods__['DeviceManufacturerInfo'] = lambda self, value: self.DeviceManufacturerInfo.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceManufacturerInfo.Set(value)
    @property
    def DeviceManufacturerInfo(self) -> "StringFeature":
        """
        Manufacturer information about the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceManufacturerInfo_get(self)

    __swig_setmethods__['DeviceManufacturerVersion'] = lambda self, value: self.DeviceManufacturerVersion.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceManufacturerVersion.Set(value)
    @property
    def DeviceManufacturerVersion(self) -> "IntegerFeature":
        """
        Returns the Device Manufacturer Version.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceManufacturerVersion_get(self)

    __swig_setmethods__['DeviceModelName'] = lambda self, value: self.DeviceModelName.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceModelName.Set(value)
    @property
    def DeviceModelName(self) -> "StringFeature":
        """
        Model of the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceModelName_get(self)

    __swig_setmethods__['DeviceRegistersEndianness'] = lambda self, value: self.DeviceRegistersEndianness.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceRegistersEndianness.Set(value)
    @property
    def DeviceRegistersEndianness(self) -> "CDeviceRegistersEndianness":
        """
        Endianness of the registers of the device.
        Return: A CDeviceRegistersEndianness object to control the value.
        possible values:
        - Big - The registers of the device are big endian.
        - Little - The registers of the device are little endian.
        """
        return _neoapi.FeatureAccess_DeviceRegistersEndianness_get(self)

    @property
    def DeviceReset(self) -> "CommandFeature":
        """
        Resets the device to its power up state. After reset, the device must be rediscovered.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceReset_get(self)

    @property
    def DeviceResetToDeliveryState(self) -> "CommandFeature":
        """
        Resets the device to its delivery state.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceResetToDeliveryState_get(self)

    __swig_setmethods__['DeviceSFNCVersionMajor'] = lambda self, value: self.DeviceSFNCVersionMajor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSFNCVersionMajor.Set(value)
    @property
    def DeviceSFNCVersionMajor(self) -> "IntegerFeature":
        """
        Major version of the Standard Features Naming Convention that was used to create the device's GenICam XML.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSFNCVersionMajor_get(self)

    __swig_setmethods__['DeviceSFNCVersionMinor'] = lambda self, value: self.DeviceSFNCVersionMinor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSFNCVersionMinor.Set(value)
    @property
    def DeviceSFNCVersionMinor(self) -> "IntegerFeature":
        """
        Minor version of the Standard Features Naming Convention that was used to create the device's GenICam XML.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSFNCVersionMinor_get(self)

    __swig_setmethods__['DeviceSFNCVersionSubMinor'] = lambda self, value: self.DeviceSFNCVersionSubMinor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSFNCVersionSubMinor.Set(value)
    @property
    def DeviceSFNCVersionSubMinor(self) -> "IntegerFeature":
        """
        Sub minor version of Standard Features Naming Convention that was used to create the device's GenICam XML.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSFNCVersionSubMinor_get(self)

    __swig_setmethods__['DeviceScanType'] = lambda self, value: self.DeviceScanType.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceScanType.Set(value)
    @property
    def DeviceScanType(self) -> "CDeviceScanType":
        """
        Scan type of the sensor of the device.
        Return: A CDeviceScanType object to control the value.
        possible values:
        - Areascan - 2D sensor.
        - Areascan3D - device outputs 2D range image.
        - Linescan - 1D sensor.
        - Linescan3D - device outputs 1D range image.
        """
        return _neoapi.FeatureAccess_DeviceScanType_get(self)

    __swig_setmethods__['DeviceSensorConnected'] = lambda self, value: self.DeviceSensorConnected.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSensorConnected.Set(value)
    @property
    def DeviceSensorConnected(self) -> "BoolFeature":
        """
        Returns if selected sensor is connected.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSensorConnected_get(self)

    __swig_setmethods__['DeviceSensorInitialized'] = lambda self, value: self.DeviceSensorInitialized.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSensorInitialized.Set(value)
    @property
    def DeviceSensorInitialized(self) -> "BoolFeature":
        """
        Returns if selected image sensor is initialized.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSensorInitialized_get(self)

    __swig_setmethods__['DeviceSensorSelector'] = lambda self, value: self.DeviceSensorSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSensorSelector.Set(value)
    @property
    def DeviceSensorSelector(self) -> "CDeviceSensorSelector":
        """
        Selects which sensor is controlled by the various sensor specific features.
        Return: A CDeviceSensorSelector object to control the value.
        possible values:
        - All - All sensors.
        - Left - Left sensor.
        - Right - Right sensor.
        """
        return _neoapi.FeatureAccess_DeviceSensorSelector_get(self)

    __swig_setmethods__['DeviceSensorType'] = lambda self, value: self.DeviceSensorType.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSensorType.Set(value)
    @property
    def DeviceSensorType(self) -> "CDeviceSensorType":
        """
        Specifies the type of the sensor.
        Return: A CDeviceSensorType object to control the value.
        possible values:
        - CCD - The camera sensor is a CCD sensor
        - CMOS - The camera sensor is a CMOS sensor
        """
        return _neoapi.FeatureAccess_DeviceSensorType_get(self)

    __swig_setmethods__['DeviceSensorVersion'] = lambda self, value: self.DeviceSensorVersion.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSensorVersion.Set(value)
    @property
    def DeviceSensorVersion(self) -> "CDeviceSensorVersion":
        """
        Specifies the version of the CMOSIS sensor.
        Return: A CDeviceSensorVersion object to control the value.
        possible values:
        - CMOSIS_CMV2000_V2 - CMV 2000 Sensor, Version 2
        - CMOSIS_CMV2000_V3 - CMV 2000 Sensor, Version 3
        - CMOSIS_CMV4000_V2 - CMV 4000 Sensor, Version 2
        - CMOSIS_CMV4000_V3 - CMV 4000 Sensor, Version 3
        """
        return _neoapi.FeatureAccess_DeviceSensorVersion_get(self)

    __swig_setmethods__['DeviceSerialNumber'] = lambda self, value: self.DeviceSerialNumber.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSerialNumber.Set(value)
    @property
    def DeviceSerialNumber(self) -> "StringFeature":
        """
        Device's serial number. This string is a unique identifier of the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceSerialNumber_get(self)

    __swig_setmethods__['DeviceSerialPortBaudRate'] = lambda self, value: self.DeviceSerialPortBaudRate.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSerialPortBaudRate.Set(value)
    @property
    def DeviceSerialPortBaudRate(self) -> "CDeviceSerialPortBaudRate":
        """
        This feature controls the baud rate used by the selected serial port.
        Return: A CDeviceSerialPortBaudRate object to control the value.
        possible values:
        - Baud115200 - Serial port speed of 115200 baud.
        - Baud19200 - Serial port speed of 19200 baud.
        - Baud230400 - Serial port speed of 230400 baud.
        - Baud38400 - Serial port speed of 38400 baud.
        - Baud460800 - Serial port speed of 460800 baud.
        - Baud57600 - Serial port speed of 57600 baud.
        - Baud921600 - Serial port speed of 921600 baud.
        - Baud9600 - Serial port speed of 9600 baud.
        """
        return _neoapi.FeatureAccess_DeviceSerialPortBaudRate_get(self)

    __swig_setmethods__['DeviceSerialPortSelector'] = lambda self, value: self.DeviceSerialPortSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceSerialPortSelector.Set(value)
    @property
    def DeviceSerialPortSelector(self) -> "CDeviceSerialPortSelector":
        """
        Selects which serial port of the device to control.
        Return: A CDeviceSerialPortSelector object to control the value.
        possible values:
        - CameraLink - Serial port associated to the Camera link connection.
        """
        return _neoapi.FeatureAccess_DeviceSerialPortSelector_get(self)

    __swig_setmethods__['DeviceStreamChannelCount'] = lambda self, value: self.DeviceStreamChannelCount.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceStreamChannelCount.Set(value)
    @property
    def DeviceStreamChannelCount(self) -> "IntegerFeature":
        """
        Indicates the number of streaming channels supported by the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceStreamChannelCount_get(self)

    __swig_setmethods__['DeviceStreamChannelEndianness'] = lambda self, value: self.DeviceStreamChannelEndianness.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceStreamChannelEndianness.Set(value)
    @property
    def DeviceStreamChannelEndianness(self) -> "CDeviceStreamChannelEndianness":
        """
        Endianness of multi-byte pixel data for this stream.
        Return: A CDeviceStreamChannelEndianness object to control the value.
        possible values:
        - Big - Stream channel data is big Endian.
        - Little - Stream channel data is little Endian.
        """
        return _neoapi.FeatureAccess_DeviceStreamChannelEndianness_get(self)

    __swig_setmethods__['DeviceStreamChannelPacketSize'] = lambda self, value: self.DeviceStreamChannelPacketSize.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceStreamChannelPacketSize.Set(value)
    @property
    def DeviceStreamChannelPacketSize(self) -> "IntegerFeature":
        """
        Specifies the stream packet size, in bytes, to send on the selected channel for a Transmitter or specifies the maximum packet size supported by a receiver.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceStreamChannelPacketSize_get(self)

    __swig_setmethods__['DeviceStreamChannelSelector'] = lambda self, value: self.DeviceStreamChannelSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceStreamChannelSelector.Set(value)
    @property
    def DeviceStreamChannelSelector(self) -> "IntegerFeature":
        """
        Selects the stream channel to control.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceStreamChannelSelector_get(self)

    __swig_setmethods__['DeviceStreamChannelType'] = lambda self, value: self.DeviceStreamChannelType.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceStreamChannelType.Set(value)
    @property
    def DeviceStreamChannelType(self) -> "CDeviceStreamChannelType":
        """
        Reports the type of the stream channel.
        Return: A CDeviceStreamChannelType object to control the value.
        possible values:
        - Receiver - Data stream receiver channel.
        - Transmitter - Data stream transmitter channel.
        """
        return _neoapi.FeatureAccess_DeviceStreamChannelType_get(self)

    __swig_setmethods__['DeviceTLType'] = lambda self, value: self.DeviceTLType.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTLType.Set(value)
    @property
    def DeviceTLType(self) -> "CDeviceTLType":
        """
        Transport Layer type of the device.
        Return: A CDeviceTLType object to control the value.
        possible values:
        - CameraLink - Camera Link.
        - CameraLinkHS - Camera Link High Speed.
        - CoaXPress - CoaXPress.
        - Custom - Custom Transport Layer.
        - GigEVision - GigE Vision.
        - USB3Vision - USB3 Vision.
        """
        return _neoapi.FeatureAccess_DeviceTLType_get(self)

    __swig_setmethods__['DeviceTLVersionMajor'] = lambda self, value: self.DeviceTLVersionMajor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTLVersionMajor.Set(value)
    @property
    def DeviceTLVersionMajor(self) -> "IntegerFeature":
        """
        Major version of the Transport Layer of the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTLVersionMajor_get(self)

    __swig_setmethods__['DeviceTLVersionMinor'] = lambda self, value: self.DeviceTLVersionMinor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTLVersionMinor.Set(value)
    @property
    def DeviceTLVersionMinor(self) -> "IntegerFeature":
        """
        Minor version of the Transport Layer of the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTLVersionMinor_get(self)

    __swig_setmethods__['DeviceTLVersionSubMinor'] = lambda self, value: self.DeviceTLVersionSubMinor.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTLVersionSubMinor.Set(value)
    @property
    def DeviceTLVersionSubMinor(self) -> "IntegerFeature":
        """
        Sub minor version of the Transport Layer of the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTLVersionSubMinor_get(self)

    __swig_setmethods__['DeviceTapGeometry'] = lambda self, value: self.DeviceTapGeometry.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTapGeometry.Set(value)
    @property
    def DeviceTapGeometry(self) -> "CDeviceTapGeometry":
        """
        This device tap geometry feature describes the geometrical properties characterizing the taps of a camera as presented at the output of the device.
        Return: A CDeviceTapGeometry object to control the value.
        possible values:
        - Geometry_10X - Geometry_10X
        - Geometry_10X_1Y - Geometry_10X_1Y
        - Geometry_1X - Geometry_1X
        - Geometry_1X10 - Geometry_1X10
        - Geometry_1X10_1Y - Geometry_1X10_1Y
        - Geometry_1X2 - Geometry_1X2
        - Geometry_1X2_1Y - Geometry_1X2_1Y
        - Geometry_1X2_1Y2 - Geometry_1X2_1Y2
        - Geometry_1X2_2YE - Geometry_1X2_2YE
        - Geometry_1X3 - Geometry_1X3
        - Geometry_1X3_1Y - Geometry_1X3_1Y
        - Geometry_1X4 - Geometry_1X4
        - Geometry_1X4_1Y - Geometry_1X4_1Y
        - Geometry_1X8 - Geometry_1X8
        - Geometry_1X8_1Y - Geometry_1X8_1Y
        - Geometry_1X_1Y - Geometry_1X_1Y
        - Geometry_1X_1Y2 - Geometry_1X_1Y2
        - Geometry_1X_2YE - Geometry_1X_2YE
        - Geometry_2X - Geometry_2X
        - Geometry_2X2 - Geometry_2X2
        - Geometry_2X2E - Geometry_2X2E
        - Geometry_2X2E_1Y - Geometry_2X2E_1Y
        - Geometry_2X2E_2YE - Geometry_2X2E_2YE
        - Geometry_2X2M - Geometry_2X2M
        - Geometry_2X2M_1Y - Geometry_2X2M_1Y
        - Geometry_2X2_1Y - Geometry_2X2_1Y
        - Geometry_2XE - Geometry_2XE
        - Geometry_2XE_1Y - Geometry_2XE_1Y
        - Geometry_2XE_1Y2 - Geometry_2XE_1Y2
        - Geometry_2XE_2YE - Geometry_2XE_2YE
        - Geometry_2XM - Geometry_2XM
        - Geometry_2XM_1Y - Geometry_2XM_1Y
        - Geometry_2XM_1Y2 - Geometry_2XM_1Y2
        - Geometry_2XM_2YE - Geometry_2XM_2YE
        - Geometry_2X_1Y - Geometry_2X_1Y
        - Geometry_2X_1Y2 - Geometry_2X_1Y2
        - Geometry_2X_2YE - Geometry_2X_2YE
        - Geometry_3X - Geometry_3X
        - Geometry_3X_1Y - Geometry_3X_1Y
        - Geometry_4X - Geometry_4X
        - Geometry_4X2 - Geometry_4X2
        - Geometry_4X2E - Geometry_4X2E
        - Geometry_4X2E_1Y - Geometry_4X2E_1Y
        - Geometry_4X2_1Y - Geometry_4X2_1Y
        - Geometry_4X_1Y - Geometry_4X_1Y
        - Geometry_8X - Geometry_8X
        - Geometry_8X_1Y - Geometry_8X_1Y
        """
        return _neoapi.FeatureAccess_DeviceTapGeometry_get(self)

    __swig_setmethods__['DeviceTemperature'] = lambda self, value: self.DeviceTemperature.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperature.Set(value)
    @property
    def DeviceTemperature(self) -> "DoubleFeature":
        """
        Device temperature in degrees Celsius (C). It is measured at the location selected by DeviceTemperatureSelector.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTemperature_get(self)

    __swig_setmethods__['DeviceTemperatureExceeded'] = lambda self, value: self.DeviceTemperatureExceeded.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureExceeded.Set(value)
    @property
    def DeviceTemperatureExceeded(self) -> "BoolFeature":
        """
        Returns if the device operates in a critical temperature range.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTemperatureExceeded_get(self)

    __swig_setmethods__['DeviceTemperaturePeltierEnable'] = lambda self, value: self.DeviceTemperaturePeltierEnable.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperaturePeltierEnable.Set(value)
    @property
    def DeviceTemperaturePeltierEnable(self) -> "BoolFeature":
        """
        Enables the Peltier element.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTemperaturePeltierEnable_get(self)

    __swig_setmethods__['DeviceTemperatureSelector'] = lambda self, value: self.DeviceTemperatureSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureSelector.Set(value)
    @property
    def DeviceTemperatureSelector(self) -> "CDeviceTemperatureSelector":
        """
        Selects the location within the device, where the temperature will be measured.
        Return: A CDeviceTemperatureSelector object to control the value.
        possible values:
        - InHouse - Temperature inside the camera housing. AVAILABLE: Always
        - Mainboard - Temperature of the device's mainboard.
        - Sensor - Temperature of the image sensor of the camera.
        """
        return _neoapi.FeatureAccess_DeviceTemperatureSelector_get(self)

    __swig_setmethods__['DeviceTemperatureStatus'] = lambda self, value: self.DeviceTemperatureStatus.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureStatus.Set(value)
    @property
    def DeviceTemperatureStatus(self) -> "CDeviceTemperatureStatus":
        """
        Returns the current temperature status of the device.
        Return: A CDeviceTemperatureStatus object to control the value.
        possible values:
        - Exceeded - The device operates in a critical temperature range.
        - High - The device operates in an increased temperature range.
        - Normal - The device operates in normal temperature range.
        """
        return _neoapi.FeatureAccess_DeviceTemperatureStatus_get(self)

    __swig_setmethods__['DeviceTemperatureStatusTransition'] = lambda self, value: self.DeviceTemperatureStatusTransition.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureStatusTransition.Set(value)
    @property
    def DeviceTemperatureStatusTransition(self) -> "IntegerFeature":
        """
        Sets the temperature threshold for the selected status transition in degrees Celsius.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTemperatureStatusTransition_get(self)

    __swig_setmethods__['DeviceTemperatureStatusTransitionSelector'] = lambda self, value: self.DeviceTemperatureStatusTransitionSelector.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureStatusTransitionSelector.Set(value)
    @property
    def DeviceTemperatureStatusTransitionSelector(self) -> "CDeviceTemperatureStatusTransitionSelector":
        """
        Selects which temperature transition is controlled by the feature DeviceTemperatureStatusTransition.
        Return: A CDeviceTemperatureStatusTransitionSelector object to control the value.
        possible values:
        - ExceededToNormal - Exceeded To Normal
        - HighToExceeded - High To Exceeded
        - NormalToHigh - Normal To High
        """
        return _neoapi.FeatureAccess_DeviceTemperatureStatusTransitionSelector_get(self)

    __swig_setmethods__['DeviceTemperatureUnderrun'] = lambda self, value: self.DeviceTemperatureUnderrun.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceTemperatureUnderrun.Set(value)
    @property
    def DeviceTemperatureUnderrun(self) -> "BoolFeature":
        """
        Returns if the device operates in critical temperature range.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceTemperatureUnderrun_get(self)

    __swig_setmethods__['DeviceType'] = lambda self, value: self.DeviceType.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceType.Set(value)
    @property
    def DeviceType(self) -> "CDeviceType":
        """
        Returns the device type.
        Return: A CDeviceType object to control the value.
        possible values:
        - Peripheral - Controllable device (with no data stream handling).
        - Receiver - Data stream receiver device.
        - Transceiver - Data stream receiver and transmitter device.
        - Transmitter - Data stream transmitter device.
        """
        return _neoapi.FeatureAccess_DeviceType_get(self)

    __swig_setmethods__['DeviceUSB3VisionGUID'] = lambda self, value: self.DeviceUSB3VisionGUID.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceUSB3VisionGUID.Set(value)
    @property
    def DeviceUSB3VisionGUID(self) -> "StringFeature":
        """
        Returns the USB3 Vision unique ID which allows consistent identification of devices.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceUSB3VisionGUID_get(self)

    __swig_setmethods__['DeviceUserID'] = lambda self, value: self.DeviceUserID.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceUserID.Set(value)
    @property
    def DeviceUserID(self) -> "StringFeature":
        """
        User-programmable device identifier.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceUserID_get(self)

    __swig_setmethods__['DeviceVendorName'] = lambda self, value: self.DeviceVendorName.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceVendorName.Set(value)
    @property
    def DeviceVendorName(self) -> "StringFeature":
        """
        Name of the manufacturer of the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceVendorName_get(self)

    __swig_setmethods__['DeviceVersion'] = lambda self, value: self.DeviceVersion.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceVersion.Set(value)
    @property
    def DeviceVersion(self) -> "StringFeature":
        """
        Version of the device.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceVersion_get(self)

    __swig_setmethods__['DeviceVersionControl'] = lambda self, value: self.DeviceVersionControl.Set(value.value) if isinstance(value, BaseFeature) else self.DeviceVersionControl.Set(value)
    @property
    def DeviceVersionControl(self) -> "IntegerFeature":
        """
        Controls the device version.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DeviceVersionControl_get(self)

    __swig_setmethods__['DiscardedEventCounter'] = lambda self, value: self.DiscardedEventCounter.Set(value.value) if isinstance(value, BaseFeature) else self.DiscardedEventCounter.Set(value)
    @property
    def DiscardedEventCounter(self) -> "IntegerFeature":
        """
        Returns the number of discarded events.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_DiscardedEventCounter_get(self)

    __swig_setmethods__['EnergyEfficientEthernetEnable'] = lambda self, value: self.EnergyEfficientEthernetEnable.Set(value.value) if isinstance(value, BaseFeature) else self.EnergyEfficientEthernetEnable.Set(value)
    @property
    def EnergyEfficientEthernetEnable(self) -> "BoolFeature":
        """
        Controls whether the Energy Efficient / Green Ethernet mode (802.3az) in the PHY is activated or not. A device reboot is needed for changes to take effect.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EnergyEfficientEthernetEnable_get(self)

    __swig_setmethods__['EventNotification'] = lambda self, value: self.EventNotification.Set(value.value) if isinstance(value, BaseFeature) else self.EventNotification.Set(value)
    @property
    def EventNotification(self) -> "CEventNotification":
        """
        Activate or deactivate the notification to the host application of the occurrence of the selected Event.
        Return: A CEventNotification object to control the value.
        possible values:
        - Off - The selected Event notification is disabled.
        - On - The selected Event notification is enabled.
        - Once - The selected Event notification is enabled for one event then return to Off state.
        """
        return _neoapi.FeatureAccess_EventNotification_get(self)

    __swig_setmethods__['EventSelector'] = lambda self, value: self.EventSelector.Set(value.value) if isinstance(value, BaseFeature) else self.EventSelector.Set(value)
    @property
    def EventSelector(self) -> "CEventSelector":
        """
        Selects which Event to signal to the host application.
        Return: A CEventSelector object to control the value.
        possible values:
        - AcquisitionEnd - Device just completed the Acquisition of one or many Frames.
        - AcquisitionError - Device just detected an error during the active Acquisition.
        - AcquisitionStart - Device just started the Acquisition of one or many Frames.
        - AcquisitionTransferEnd - Device just completed the transfer of one or many Frames.
        - AcquisitionTransferStart - Device just started the transfer of one or many Frames.
        - AcquisitionTrigger - Device just received a trigger for the Acquisition of one or many Frames.
        - AcquisitionTriggerMissed - Device just missed a trigger for the Acquisition of one or many Frames.
        - Action1 - The event will be generated when an action command has triggered an image in the camera.
        - ActionLate - The event will be generated when a valid scheduled action command is received and is scheduled to be executed at a time that is already past.
        - Counter0End - The event will be generated when counter 0 ends counting.
        - Counter0Start - The event will be generated when counter 0 starts counting.
        - Counter1End - The event will be generated when counter 1 ends counting.
        - Counter1Start - The event will be generated when counter 1 starts counting.
        - DeviceTemperatureStatusChanged - The event will be generated when the status of the internal device temperature has been changed. AVAILABLE: Always
        - Encoder0Restarted - The event will be generated when the Encoder 0 restarts moving.
        - Encoder0Stopped - The event will be generated when the Encoder 0 stops for longer than EncoderTimeout.
        - Encoder1Restarted - The event will be generated when the Encoder 1 restarts moving.
        - Encoder1Stopped - The event will be generated when the Encoder 1 stops for longer than EncoderTimeout.
        - Error - Device just detected an error during the active Acquisition.
        - EventDiscarded - The event will be generated when an event had to be discarded in the camera.
        - EventLost - The event will be generated when an event was lost in the camera. AVAILABLE: Always
        - ExposureEnd - Device just completed the exposure of one Frame (or Line).
        - ExposureStart - Device just started the exposure of one Frame (or Line).
        - FrameBurstEnd - Device just completed the capture of a burst of Frames.
        - FrameBurstStart - Device just started the capture of a burst of Frames.
        - FrameEnd - Device just completed the capture of one Frame.
        - FrameStart - Device just started the capture of one Frame.
        - FrameTransferEnd - Device just completed the transfer of one Frame.
        - FrameTransferSkipped - The event will be generated when the internal camera buffer is overflowed and an image has been lost. AVAILABLE: Always
        - FrameTransferStart - Device just started the transfer of one Frame.
        - FrameTrigger - Device just received a trigger to start the capture of one Frame.
        - FrameTriggerMissed - Device just missed a trigger to start the capture of one Frame.
        - GigEVisionError - Device just detected an error. AVAILABLE: Always
        - GigEVisionHeartbeatTimeOut - The device runs in heartbeat timeout. AVAILABLE: Always
        - Line0AnyEdge - The event will be generated when a Falling or Rising Edge is detected on the Line 0.
        - Line0FallingEdge - The event will be generated when a Falling Edge is detected on the Line 0.
        - Line0RisingEdge - The event will be generated when a Rising Edge is detected on the Line 0.
        - Line1AnyEdge - The event will be generated when a Falling or Rising Edge is detected on the Line 1.
        - Line1FallingEdge - The event will be generated when a Falling Edge is detected on the Line 1.
        - Line1RisingEdge - The event will be generated when a Rising Edge is detected on the Line 1.
        - Line2FallingEdge - The event will be generated when a Falling Edge is detected on the Line 2. AVAILABLE: Always
        - Line2RisingEdge - The event will be generated when a Rising Edge is detected on the Line 2. AVAILABLE: Always
        - Line3FallingEdge - The event will be generated when a Falling Edge is detected on the Line 3. AVAILABLE: Always
        - Line3RisingEdge - The event will be generated when a Rising Edge is detected on the Line 3. AVAILABLE: Always
        - Line4FallingEdge - The event will be generated when a Falling Edge is detected on the Line 4. AVAILABLE: Always
        - Line4RisingEdge - The event will be generated when a Rising Edge is detected on the Line 4. AVAILABLE: Always
        - Line5FallingEdge - The event will be generated when a Falling Edge is detected on the Line 5. AVAILABLE: Always
        - Line5RisingEdge - The event will be generated when a Rising Edge is detected on the Line 5. AVAILABLE: Always
        - Line6FallingEdge - The event will be generated when a Falling Edge is detected on the Line 6. AVAILABLE: Always
        - Line6RisingEdge - The event will be generated when a Rising Edge is detected on the Line 6. AVAILABLE: Always
        - Line7FallingEdge - The event will be generated when a Falling Edge is detected on the Line 7. AVAILABLE: Always
        - Line7RisingEdge - The event will be generated when a Rising Edge is detected on the Line 7. AVAILABLE: Always
        - LineEnd - Device just completed the capture of one Line.
        - LineStart - Device just started the capture of one Line.
        - LineTrigger - Device just received a trigger to start the capture of one Line.
        - LineTriggerMissed - Device just missed a trigger to start the capture of one Line.
        - LinkSpeedChange - The event will be generated when the link speed has changed.
        - LinkTrigger0 - The event will be generated when a Rising Edge is detected on the LinkTrigger 0.
        - LinkTrigger1 - The event will be generated when a Rising Edge is detected on the LinkTrigger 1.
        - PhysicalConnection0Down - The event will be generated when a Link down at ethernet interface 0 detect.
        - PhysicalConnection0Up - The event will be generated when a Link up at ethernet interface 0 detect.
        - PhysicalConnection1Down - The event will be generated when a Link down at ethernet interface 1 detect.
        - PhysicalConnection1Up - The event will be generated when a Link up at ethernet interface 1 detect.
        - PrimaryApplicationSwitch - The event will be generated when a primary application switchover has been granted (GigE Vision Specific).
        - PtpServoStatusChanged - The event will be generated when the status of the internal PTP servo has been changed. AVAILABLE: Always.
        - PtpStatusChanged - The event will be generated when the status of the internal PTP state machine has been changed. AVAILABLE: Always.
        - SequencerSetChange - Device sequencer set has changed.
        - Stream0TransferBlockEnd - Device just completed the transfer of one Block.
        - Stream0TransferBlockStart - Device just started the transfer of one Block.
        - Stream0TransferBlockTrigger - Device just received a trigger to start the transfer of one Block.
        - Stream0TransferBurstEnd - Device just completed the transfer of a burst of Blocks.
        - Stream0TransferBurstStart - Device just started the transfer of a burst of Blocks.
        - Stream0TransferEnd - Device just completed the transfer of one or many Blocks.
        - Stream0TransferOverflow - Device transfer queue overflowed.
        - Stream0TransferPause - Device just paused the transfer.
        - Stream0TransferResume - Device just resumed the transfer.
        - Stream0TransferStart - Device just started the transfer of one or many Blocks.
        - Test - The test event will be generated when the device receives the TestEventGenerate command (EventNotification for the Test event is always On).
        - Timer0End - The event will be generated when Timer 0 ends counting.
        - Timer0Start - The event will be generated when Timer 0 starts counting.
        - Timer1End - The event will be generated when Timer 1 ends counting.
        - Timer1Start - The event will be generated when Timer 1 starts counting.
        - Timer2End - The event will be generated when Timer 2 ends counting.
        - Timer3End - The event will be generated when Timer 3 ends counting.
        - TransferBufferFull - The event will be generated when no internal camera buffer is available. AVAILABLE: Always
        - TransferBufferReady - The event will be generated when an internal camera buffer is available again. AVAILABLE: Always
        - TriggerOverlapped - Trigger Overlapped. AVAILABLE: Always
        - TriggerReady - The event will be generated when the camera is able to process an incoming trigger signal. AVAILABLE: Always
        - TriggerSkipped - The event will be generated when camera reject an incoming trigger signal. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_EventSelector_get(self)

    __swig_setmethods__['EventSensor1ConcatenationAvailable'] = lambda self, value: self.EventSensor1ConcatenationAvailable.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ConcatenationAvailable.Set(value)
    @property
    def EventSensor1ConcatenationAvailable(self) -> "IntegerFeature":
        """
        EventSensor1ConcatenationAvailableTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ConcatenationAvailable_get(self)

    __swig_setmethods__['EventSensor1ConcatenationAvailableTimestamp'] = lambda self, value: self.EventSensor1ConcatenationAvailableTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ConcatenationAvailableTimestamp.Set(value)
    @property
    def EventSensor1ConcatenationAvailableTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Concatenation Available Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_get(self)

    __swig_setmethods__['EventSensor1ConcatenationEmpty'] = lambda self, value: self.EventSensor1ConcatenationEmpty.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ConcatenationEmpty.Set(value)
    @property
    def EventSensor1ConcatenationEmpty(self) -> "IntegerFeature":
        """
        EventSensor1ConcatenationEmptyTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ConcatenationEmpty_get(self)

    __swig_setmethods__['EventSensor1ConcatenationEmptyTimestamp'] = lambda self, value: self.EventSensor1ConcatenationEmptyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ConcatenationEmptyTimestamp.Set(value)
    @property
    def EventSensor1ConcatenationEmptyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Concatenation Empty Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_get(self)

    __swig_setmethods__['EventSensor1ExposureEnd'] = lambda self, value: self.EventSensor1ExposureEnd.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ExposureEnd.Set(value)
    @property
    def EventSensor1ExposureEnd(self) -> "IntegerFeature":
        """
        EventSensor1ExposureEndTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ExposureEnd_get(self)

    __swig_setmethods__['EventSensor1ExposureEndTimestamp'] = lambda self, value: self.EventSensor1ExposureEndTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ExposureEndTimestamp.Set(value)
    @property
    def EventSensor1ExposureEndTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Exposure End Event. It can be used to determine precisely when the event occured.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ExposureEndTimestamp_get(self)

    __swig_setmethods__['EventSensor1ExposureStart'] = lambda self, value: self.EventSensor1ExposureStart.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ExposureStart.Set(value)
    @property
    def EventSensor1ExposureStart(self) -> "IntegerFeature":
        """
        EventSensor1ExposureStartTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ExposureStart_get(self)

    __swig_setmethods__['EventSensor1ExposureStartTimestamp'] = lambda self, value: self.EventSensor1ExposureStartTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ExposureStartTimestamp.Set(value)
    @property
    def EventSensor1ExposureStartTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Exposure Start Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ExposureStartTimestamp_get(self)

    __swig_setmethods__['EventSensor1ReadoutEnd'] = lambda self, value: self.EventSensor1ReadoutEnd.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ReadoutEnd.Set(value)
    @property
    def EventSensor1ReadoutEnd(self) -> "IntegerFeature":
        """
        EventSensor1ReadoutReadoutTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ReadoutEnd_get(self)

    __swig_setmethods__['EventSensor1ReadoutEndTimestamp'] = lambda self, value: self.EventSensor1ReadoutEndTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ReadoutEndTimestamp.Set(value)
    @property
    def EventSensor1ReadoutEndTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Readout End Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ReadoutEndTimestamp_get(self)

    __swig_setmethods__['EventSensor1ReadoutStart'] = lambda self, value: self.EventSensor1ReadoutStart.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ReadoutStart.Set(value)
    @property
    def EventSensor1ReadoutStart(self) -> "IntegerFeature":
        """
        EventSensor1ReadoutStartTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ReadoutStart_get(self)

    __swig_setmethods__['EventSensor1ReadoutStartTimestamp'] = lambda self, value: self.EventSensor1ReadoutStartTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1ReadoutStartTimestamp.Set(value)
    @property
    def EventSensor1ReadoutStartTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Readout Start Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1ReadoutStartTimestamp_get(self)

    __swig_setmethods__['EventSensor1TriggerReady'] = lambda self, value: self.EventSensor1TriggerReady.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1TriggerReady.Set(value)
    @property
    def EventSensor1TriggerReady(self) -> "IntegerFeature":
        """
        EventSensor1TriggerReadyTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1TriggerReady_get(self)

    __swig_setmethods__['EventSensor1TriggerReadyTimestamp'] = lambda self, value: self.EventSensor1TriggerReadyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1TriggerReadyTimestamp.Set(value)
    @property
    def EventSensor1TriggerReadyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Trigger Ready Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1TriggerReadyTimestamp_get(self)

    __swig_setmethods__['EventSensor1TriggerSkipped'] = lambda self, value: self.EventSensor1TriggerSkipped.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1TriggerSkipped.Set(value)
    @property
    def EventSensor1TriggerSkipped(self) -> "IntegerFeature":
        """
        EventSensor1TriggerSkippedTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1TriggerSkipped_get(self)

    __swig_setmethods__['EventSensor1TriggerSkippedTimestamp'] = lambda self, value: self.EventSensor1TriggerSkippedTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor1TriggerSkippedTimestamp.Set(value)
    @property
    def EventSensor1TriggerSkippedTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 1 Trigger Skipped Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor1TriggerSkippedTimestamp_get(self)

    __swig_setmethods__['EventSensor2ConcatenationAvailable'] = lambda self, value: self.EventSensor2ConcatenationAvailable.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ConcatenationAvailable.Set(value)
    @property
    def EventSensor2ConcatenationAvailable(self) -> "IntegerFeature":
        """
        EventSensor2ConcatenationAvailableTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ConcatenationAvailable_get(self)

    __swig_setmethods__['EventSensor2ConcatenationAvailableTimestamp'] = lambda self, value: self.EventSensor2ConcatenationAvailableTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ConcatenationAvailableTimestamp.Set(value)
    @property
    def EventSensor2ConcatenationAvailableTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Concatenation Available Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_get(self)

    __swig_setmethods__['EventSensor2ConcatenationEmpty'] = lambda self, value: self.EventSensor2ConcatenationEmpty.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ConcatenationEmpty.Set(value)
    @property
    def EventSensor2ConcatenationEmpty(self) -> "IntegerFeature":
        """
        EventSensor2ConcatenationEmptyTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ConcatenationEmpty_get(self)

    __swig_setmethods__['EventSensor2ConcatenationEmptyTimestamp'] = lambda self, value: self.EventSensor2ConcatenationEmptyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ConcatenationEmptyTimestamp.Set(value)
    @property
    def EventSensor2ConcatenationEmptyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Concatenation Empty Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_get(self)

    __swig_setmethods__['EventSensor2ExposureEnd'] = lambda self, value: self.EventSensor2ExposureEnd.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ExposureEnd.Set(value)
    @property
    def EventSensor2ExposureEnd(self) -> "IntegerFeature":
        """
        EventSensor2ExposureEndTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ExposureEnd_get(self)

    __swig_setmethods__['EventSensor2ExposureEndTimestamp'] = lambda self, value: self.EventSensor2ExposureEndTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ExposureEndTimestamp.Set(value)
    @property
    def EventSensor2ExposureEndTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Exposure End Event. It can be used to determine precisely when the event occured.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ExposureEndTimestamp_get(self)

    __swig_setmethods__['EventSensor2ExposureStart'] = lambda self, value: self.EventSensor2ExposureStart.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ExposureStart.Set(value)
    @property
    def EventSensor2ExposureStart(self) -> "IntegerFeature":
        """
        EventSensor2ExposureStartTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ExposureStart_get(self)

    __swig_setmethods__['EventSensor2ExposureStartTimestamp'] = lambda self, value: self.EventSensor2ExposureStartTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ExposureStartTimestamp.Set(value)
    @property
    def EventSensor2ExposureStartTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Exposure Start Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ExposureStartTimestamp_get(self)

    __swig_setmethods__['EventSensor2ReadoutEnd'] = lambda self, value: self.EventSensor2ReadoutEnd.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ReadoutEnd.Set(value)
    @property
    def EventSensor2ReadoutEnd(self) -> "IntegerFeature":
        """
        EventSensor2ReadoutEndTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ReadoutEnd_get(self)

    __swig_setmethods__['EventSensor2ReadoutEndTimestamp'] = lambda self, value: self.EventSensor2ReadoutEndTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ReadoutEndTimestamp.Set(value)
    @property
    def EventSensor2ReadoutEndTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Readout End Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ReadoutEndTimestamp_get(self)

    __swig_setmethods__['EventSensor2ReadoutStart'] = lambda self, value: self.EventSensor2ReadoutStart.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ReadoutStart.Set(value)
    @property
    def EventSensor2ReadoutStart(self) -> "IntegerFeature":
        """
        EventSensor2ReadoutStartTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ReadoutStart_get(self)

    __swig_setmethods__['EventSensor2ReadoutStartTimestamp'] = lambda self, value: self.EventSensor2ReadoutStartTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2ReadoutStartTimestamp.Set(value)
    @property
    def EventSensor2ReadoutStartTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Readout Start Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2ReadoutStartTimestamp_get(self)

    __swig_setmethods__['EventSensor2TriggerReady'] = lambda self, value: self.EventSensor2TriggerReady.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2TriggerReady.Set(value)
    @property
    def EventSensor2TriggerReady(self) -> "IntegerFeature":
        """
        EventSensor2TriggerReadyTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2TriggerReady_get(self)

    __swig_setmethods__['EventSensor2TriggerReadyTimestamp'] = lambda self, value: self.EventSensor2TriggerReadyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2TriggerReadyTimestamp.Set(value)
    @property
    def EventSensor2TriggerReadyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Trigger Ready Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2TriggerReadyTimestamp_get(self)

    __swig_setmethods__['EventSensor2TriggerSkipped'] = lambda self, value: self.EventSensor2TriggerSkipped.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2TriggerSkipped.Set(value)
    @property
    def EventSensor2TriggerSkipped(self) -> "IntegerFeature":
        """
        EventSensor2TriggerSkippedTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2TriggerSkipped_get(self)

    __swig_setmethods__['EventSensor2TriggerSkippedTimestamp'] = lambda self, value: self.EventSensor2TriggerSkippedTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensor2TriggerSkippedTimestamp.Set(value)
    @property
    def EventSensor2TriggerSkippedTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor 2 Trigger Skipped Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensor2TriggerSkippedTimestamp_get(self)

    __swig_setmethods__['EventSensorInitializationFailed'] = lambda self, value: self.EventSensorInitializationFailed.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensorInitializationFailed.Set(value)
    @property
    def EventSensorInitializationFailed(self) -> "IntegerFeature":
        """
        EventSensorInitializationFailedTimestamp
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensorInitializationFailed_get(self)

    __swig_setmethods__['EventSensorInitializationFailedTimestamp'] = lambda self, value: self.EventSensorInitializationFailedTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventSensorInitializationFailedTimestamp.Set(value)
    @property
    def EventSensorInitializationFailedTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the Sensor Initialization Failed Event. It can be used to determine precisely when the event occurred.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventSensorInitializationFailedTimestamp_get(self)

    __swig_setmethods__['EventboSerialUART0ReadReady'] = lambda self, value: self.EventboSerialUART0ReadReady.Set(value.value) if isinstance(value, BaseFeature) else self.EventboSerialUART0ReadReady.Set(value)
    @property
    def EventboSerialUART0ReadReady(self) -> "IntegerFeature":
        """
        Returns the unique Identifier of the bo Serial UART0 Read Ready type of Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventboSerialUART0ReadReady_get(self)

    __swig_setmethods__['EventboSerialUART0ReadReadyTimestamp'] = lambda self, value: self.EventboSerialUART0ReadReadyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventboSerialUART0ReadReadyTimestamp.Set(value)
    @property
    def EventboSerialUART0ReadReadyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the bo Serial UART0 Read Ready Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventboSerialUART0ReadReadyTimestamp_get(self)

    __swig_setmethods__['EventboSerialUART1ReadReady'] = lambda self, value: self.EventboSerialUART1ReadReady.Set(value.value) if isinstance(value, BaseFeature) else self.EventboSerialUART1ReadReady.Set(value)
    @property
    def EventboSerialUART1ReadReady(self) -> "IntegerFeature":
        """
        Returns the unique Identifier of the bo Serial UART1 Read Ready type of Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventboSerialUART1ReadReady_get(self)

    __swig_setmethods__['EventboSerialUART1ReadReadyTimestamp'] = lambda self, value: self.EventboSerialUART1ReadReadyTimestamp.Set(value.value) if isinstance(value, BaseFeature) else self.EventboSerialUART1ReadReadyTimestamp.Set(value)
    @property
    def EventboSerialUART1ReadReadyTimestamp(self) -> "IntegerFeature":
        """
        Returns the Timestamp of the bo Serial UART1 Read Ready Event.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_EventboSerialUART1ReadReadyTimestamp_get(self)

    __swig_setmethods__['ExposureAuto'] = lambda self, value: self.ExposureAuto.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureAuto.Set(value)
    @property
    def ExposureAuto(self) -> "CExposureAuto":
        """
        Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific.
        Return: A CExposureAuto object to control the value.
        possible values:
        - Continuous - Exposure duration is constantly adapted by the device to maximize the dynamic range.
        - Off - Exposure duration is user controlled using ExposureTime.
        - Once - Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state.
        """
        return _neoapi.FeatureAccess_ExposureAuto_get(self)

    __swig_setmethods__['ExposureAutoMaxValue'] = lambda self, value: self.ExposureAutoMaxValue.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureAutoMaxValue.Set(value)
    @property
    def ExposureAutoMaxValue(self) -> "DoubleFeature":
        """
        Sets the maximal value of ExposureTime calculable by exposure auto algorithm.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureAutoMaxValue_get(self)

    __swig_setmethods__['ExposureAutoMinValue'] = lambda self, value: self.ExposureAutoMinValue.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureAutoMinValue.Set(value)
    @property
    def ExposureAutoMinValue(self) -> "DoubleFeature":
        """
        Sets the minimal value of ExposureTime calculable by exposure auto algorithm.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureAutoMinValue_get(self)

    __swig_setmethods__['ExposureLinesOffsetEven'] = lambda self, value: self.ExposureLinesOffsetEven.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureLinesOffsetEven.Set(value)
    @property
    def ExposureLinesOffsetEven(self) -> "IntegerFeature":
        """
        Sets the offset correction value that the camera applies to each even line in the "Exposure Lines" region when it is located on an even line.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureLinesOffsetEven_get(self)

    __swig_setmethods__['ExposureLinesOffsetOdd'] = lambda self, value: self.ExposureLinesOffsetOdd.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureLinesOffsetOdd.Set(value)
    @property
    def ExposureLinesOffsetOdd(self) -> "IntegerFeature":
        """
        Sets the offset correction value that the camera applies to each odd line in the "Exposure Lines" region when it is located on an even line.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureLinesOffsetOdd_get(self)

    __swig_setmethods__['ExposureMode'] = lambda self, value: self.ExposureMode.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureMode.Set(value)
    @property
    def ExposureMode(self) -> "CExposureMode":
        """
        Sets the operation mode of the Exposure.
        Return: A CExposureMode object to control the value.
        possible values:
        - Off - Disables the Exposure and let the shutter open.
        - Timed - Timed exposure. The exposure duration time is set using the ExposureTime or ExposureAuto features and the exposure starts with the FrameStart or LineStart.
        - TriggerControlled - Uses one or more trigger signal(s) to control the exposure duration independently from the current Frame or Line triggers. See ExposureStart, ExposureEnd and ExposureActive of the TriggerSelector feature.
        - TriggerWidth - Uses the width of the current Frame or Line trigger signal(s) pulse to control the exposure duration. Note that if the Frame or Line TriggerActivation is RisingEdge or LevelHigh, the exposure duration will be the time the trigger stays High. If TriggerActivation is FallingEdge or LevelLow, the exposure time will last as long as the trigger stays Low.
        """
        return _neoapi.FeatureAccess_ExposureMode_get(self)

    __swig_setmethods__['ExposureTime'] = lambda self, value: self.ExposureTime.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureTime.Set(value)
    @property
    def ExposureTime(self) -> "DoubleFeature":
        """
        Sets the Exposure time when ExposureMode is Timed and ExposureAuto is Off. This controls the duration where the photosensitive cells are exposed to light.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureTime_get(self)

    __swig_setmethods__['ExposureTimeGapMax'] = lambda self, value: self.ExposureTimeGapMax.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureTimeGapMax.Set(value)
    @property
    def ExposureTimeGapMax(self) -> "DoubleFeature":
        """
        Returns the maximum value of the exposure time gap.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureTimeGapMax_get(self)

    __swig_setmethods__['ExposureTimeGapMin'] = lambda self, value: self.ExposureTimeGapMin.Set(value.value) if isinstance(value, BaseFeature) else self.ExposureTimeGapMin.Set(value)
    @property
    def ExposureTimeGapMin(self) -> "DoubleFeature":
        """
        Returns the minimum value of the exposure time gap.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ExposureTimeGapMin_get(self)

    __swig_setmethods__['FixedPatternNoiseCorrection'] = lambda self, value: self.FixedPatternNoiseCorrection.Set(value.value) if isinstance(value, BaseFeature) else self.FixedPatternNoiseCorrection.Set(value)
    @property
    def FixedPatternNoiseCorrection(self) -> "BoolFeature":
        """
        Enables the Fixed Pattern Noise Correction.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FixedPatternNoiseCorrection_get(self)

    __swig_setmethods__['FocalLength'] = lambda self, value: self.FocalLength.Set(value.value) if isinstance(value, BaseFeature) else self.FocalLength.Set(value)
    @property
    def FocalLength(self) -> "DoubleFeature":
        """
        Focal length in millimeters (mm).
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FocalLength_get(self)

    @property
    def FocalLengthInitialize(self) -> "CommandFeature":
        """
        Initializes the focal length and makes it ready for use. The focal length position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FocalLengthInitialize_get(self)

    __swig_setmethods__['FocalLengthStatus'] = lambda self, value: self.FocalLengthStatus.Set(value.value) if isinstance(value, BaseFeature) else self.FocalLengthStatus.Set(value)
    @property
    def FocalLengthStatus(self) -> "CFocalLengthStatus":
        """
        Reads the status of the focal length.
        Return: A CFocalLengthStatus object to control the value.
        possible values:
        - Busy - Busy
        - Error - Error
        - NotConnected - Not Connected
        - NotInitialized - Not Initialized
        - NotSupported - Not Supported
        - Ready - Ready
        """
        return _neoapi.FeatureAccess_FocalLengthStatus_get(self)

    __swig_setmethods__['FocalPower'] = lambda self, value: self.FocalPower.Set(value.value) if isinstance(value, BaseFeature) else self.FocalPower.Set(value)
    @property
    def FocalPower(self) -> "DoubleFeature":
        """
        Focal power (in diopters/dpt) is mostly used for liquid lenses and indicates how much a liquid lens focuses.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FocalPower_get(self)

    @property
    def FocusInitialize(self) -> "CommandFeature":
        """
        Initializes the focus and makes it ready for use. The focus position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FocusInitialize_get(self)

    __swig_setmethods__['FocusStatus'] = lambda self, value: self.FocusStatus.Set(value.value) if isinstance(value, BaseFeature) else self.FocusStatus.Set(value)
    @property
    def FocusStatus(self) -> "CFocusStatus":
        """
        Reads the status of the focus.
        Return: A CFocusStatus object to control the value.
        possible values:
        - Busy - Busy
        - Error - Error
        - NotConnected - Not Connected
        - NotInitialized - Not Initialized
        - NotSupported - Not Supported
        - Ready - Ready
        """
        return _neoapi.FeatureAccess_FocusStatus_get(self)

    __swig_setmethods__['FocusStepper'] = lambda self, value: self.FocusStepper.Set(value.value) if isinstance(value, BaseFeature) else self.FocusStepper.Set(value)
    @property
    def FocusStepper(self) -> "IntegerFeature":
        """
        FocusStepper controls the stepper value of the Focus, e.g. ObjectSensorDistance or FocalPower. 0 is the closest focus.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FocusStepper_get(self)

    __swig_setmethods__['FrameCounter'] = lambda self, value: self.FrameCounter.Set(value.value) if isinstance(value, BaseFeature) else self.FrameCounter.Set(value)
    @property
    def FrameCounter(self) -> "IntegerFeature":
        """
        Sets the frame counter. The frame counter will be incremented with every image taken by the camera. It can be manipulated by writing the features value.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_FrameCounter_get(self)

    __swig_setmethods__['GVSPConfigurationBlockID64Bit'] = lambda self, value: self.GVSPConfigurationBlockID64Bit.Set(value.value) if isinstance(value, BaseFeature) else self.GVSPConfigurationBlockID64Bit.Set(value)
    @property
    def GVSPConfigurationBlockID64Bit(self) -> "BoolFeature":
        """
        Enables the 64 bit block ID length.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GVSPConfigurationBlockID64Bit_get(self)

    __swig_setmethods__['Gain'] = lambda self, value: self.Gain.Set(value.value) if isinstance(value, BaseFeature) else self.Gain.Set(value)
    @property
    def Gain(self) -> "DoubleFeature":
        """
        Controls the selected gain as an absolute physical value. This is an amplification factor applied to the video signal.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Gain_get(self)

    __swig_setmethods__['GainAuto'] = lambda self, value: self.GainAuto.Set(value.value) if isinstance(value, BaseFeature) else self.GainAuto.Set(value)
    @property
    def GainAuto(self) -> "CGainAuto":
        """
        Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.
        Return: A CGainAuto object to control the value.
        possible values:
        - Continuous - Gain is constantly adjusted by the device.
        - Off - Gain is User controlled using Gain.
        - Once - Gain is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.
        """
        return _neoapi.FeatureAccess_GainAuto_get(self)

    __swig_setmethods__['GainAutoMaxValue'] = lambda self, value: self.GainAutoMaxValue.Set(value.value) if isinstance(value, BaseFeature) else self.GainAutoMaxValue.Set(value)
    @property
    def GainAutoMaxValue(self) -> "DoubleFeature":
        """
        Sets the maximal value of Gain calculable by gain auto algorithm.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GainAutoMaxValue_get(self)

    __swig_setmethods__['GainAutoMinValue'] = lambda self, value: self.GainAutoMinValue.Set(value.value) if isinstance(value, BaseFeature) else self.GainAutoMinValue.Set(value)
    @property
    def GainAutoMinValue(self) -> "DoubleFeature":
        """
        Sets the minimal value of Gain calculable by gain auto algorithm.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GainAutoMinValue_get(self)

    __swig_setmethods__['GainSelector'] = lambda self, value: self.GainSelector.Set(value.value) if isinstance(value, BaseFeature) else self.GainSelector.Set(value)
    @property
    def GainSelector(self) -> "CGainSelector":
        """
        Selects which Gain is controlled by the various Gain features.
        Return: A CGainSelector object to control the value.
        possible values:
        - All - Gain will be applied to all channels or taps.
        - AnalogAll - Gain will be applied to all analog channels or taps.
        - AnalogBlue - Gain will be applied to the blue analog channel.
        - AnalogGreen - Gain will be applied to the green analog channel.
        - AnalogRed - Gain will be applied to the red analog channel.
        - AnalogTap1 - Analog gain will be applied to Tap 1.
        - AnalogTap2 - Analog gain will be applied to Tap 2.
        - AnalogU - Gain will be applied to U analog channel.
        - AnalogV - Gain will be applied to V analog channel.
        - AnalogY - Gain will be applied to Y analog channel.
        - Blue - Gain will be applied to the blue channel.
        - DigitalAll - Gain will be applied to all digital channels or taps.
        - DigitalBlue - Gain will be applied to the blue digital channel.
        - DigitalGreen - Gain will be applied to the green digital channel.
        - DigitalRed - Gain will be applied to the red digital channel.
        - DigitalTap1 - Digital gain will be applied to Tap 1.
        - DigitalTap2 - Digital gain will be applied to Tap 2.
        - DigitalU - Gain will be applied to U digital channel.
        - DigitalV - Gain will be applied to V digital channel.
        - DigitalY - Gain will be applied to Y digital channel.
        - Green - Gain will be applied to the green channel.
        - GreenBlue - Gain will be applied to the green blue channel. AVAILABLE: Always
        - GreenRed - Gain will be applied to the green red channel. AVAILABLE: Always
        - Red - Gain will be applied to the red channel.
        - Tap1 - Gain will be applied to Tap 1.
        - Tap2 - Gain will be applied to Tap 2.
        - U - Gain will be applied to U channel.
        - V - Gain will be applied to V channel.
        - Y - Gain will be applied to Y channel.
        """
        return _neoapi.FeatureAccess_GainSelector_get(self)

    __swig_setmethods__['Gamma'] = lambda self, value: self.Gamma.Set(value.value) if isinstance(value, BaseFeature) else self.Gamma.Set(value)
    @property
    def Gamma(self) -> "DoubleFeature":
        """
        Controls the gamma correction of pixel intensity. This is typically used to compensate for non-linearity of the display system (such as CRT).
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Gamma_get(self)

    __swig_setmethods__['GevCCP'] = lambda self, value: self.GevCCP.Set(value.value) if isinstance(value, BaseFeature) else self.GevCCP.Set(value)
    @property
    def GevCCP(self) -> "CGevCCP":
        """
        Controls the device access privilege of an application.
        Return: A CGevCCP object to control the value.
        possible values:
        - ControlAccess - Control Access
        - ControlAccessSwitchoverActive - Control Access Switchover Active
        - ExclusiveAccess - Exclusive Access
        - OpenAccess - Open Access
        """
        return _neoapi.FeatureAccess_GevCCP_get(self)

    __swig_setmethods__['GevCurrentDefaultGateway'] = lambda self, value: self.GevCurrentDefaultGateway.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentDefaultGateway.Set(value)
    @property
    def GevCurrentDefaultGateway(self) -> "IntegerFeature":
        """
        Reports the default gateway IP address of the given logical link.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentDefaultGateway_get(self)

    __swig_setmethods__['GevCurrentIPAddress'] = lambda self, value: self.GevCurrentIPAddress.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentIPAddress.Set(value)
    @property
    def GevCurrentIPAddress(self) -> "IntegerFeature":
        """
        Reports the IP address for the given logical link.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentIPAddress_get(self)

    __swig_setmethods__['GevCurrentIPConfigurationDHCP'] = lambda self, value: self.GevCurrentIPConfigurationDHCP.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentIPConfigurationDHCP.Set(value)
    @property
    def GevCurrentIPConfigurationDHCP(self) -> "BoolFeature":
        """
        Controls whether the DHCP IP configuration scheme is activated on the given logical link.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentIPConfigurationDHCP_get(self)

    __swig_setmethods__['GevCurrentIPConfigurationLLA'] = lambda self, value: self.GevCurrentIPConfigurationLLA.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentIPConfigurationLLA.Set(value)
    @property
    def GevCurrentIPConfigurationLLA(self) -> "BoolFeature":
        """
        Controls whether the Link Local Address IP configuration scheme is activated on the given logical link.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentIPConfigurationLLA_get(self)

    __swig_setmethods__['GevCurrentIPConfigurationPersistentIP'] = lambda self, value: self.GevCurrentIPConfigurationPersistentIP.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentIPConfigurationPersistentIP.Set(value)
    @property
    def GevCurrentIPConfigurationPersistentIP(self) -> "BoolFeature":
        """
        Controls whether the PersistentIP configuration scheme is activated on the given logical link.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentIPConfigurationPersistentIP_get(self)

    __swig_setmethods__['GevCurrentSubnetMask'] = lambda self, value: self.GevCurrentSubnetMask.Set(value.value) if isinstance(value, BaseFeature) else self.GevCurrentSubnetMask.Set(value)
    @property
    def GevCurrentSubnetMask(self) -> "IntegerFeature":
        """
        Reports the subnet mask of the given logical link.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevCurrentSubnetMask_get(self)

    __swig_setmethods__['GevDiscoveryAckDelay'] = lambda self, value: self.GevDiscoveryAckDelay.Set(value.value) if isinstance(value, BaseFeature) else self.GevDiscoveryAckDelay.Set(value)
    @property
    def GevDiscoveryAckDelay(self) -> "IntegerFeature":
        """
        Indicates the maximum randomized delay the device will wait to acknowledge a discovery command.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevDiscoveryAckDelay_get(self)

    __swig_setmethods__['GevFirstURL'] = lambda self, value: self.GevFirstURL.Set(value.value) if isinstance(value, BaseFeature) else self.GevFirstURL.Set(value)
    @property
    def GevFirstURL(self) -> "StringFeature":
        """
        Indicates the first URL to the GenICam XML device description file. The First URL is used as the first choice by the application to retrieve the GenICam XML device description file.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevFirstURL_get(self)

    __swig_setmethods__['GevGVCPExtendedStatusCodes'] = lambda self, value: self.GevGVCPExtendedStatusCodes.Set(value.value) if isinstance(value, BaseFeature) else self.GevGVCPExtendedStatusCodes.Set(value)
    @property
    def GevGVCPExtendedStatusCodes(self) -> "BoolFeature":
        """
        Enables the generation of extended status codes.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevGVCPExtendedStatusCodes_get(self)

    __swig_setmethods__['GevGVCPExtendedStatusCodesSelector'] = lambda self, value: self.GevGVCPExtendedStatusCodesSelector.Set(value.value) if isinstance(value, BaseFeature) else self.GevGVCPExtendedStatusCodesSelector.Set(value)
    @property
    def GevGVCPExtendedStatusCodesSelector(self) -> "CGevGVCPExtendedStatusCodesSelector":
        """
        Selects the GigE Vision version to control extended status codes for.
        Return: A CGevGVCPExtendedStatusCodesSelector object to control the value.
        possible values:
        - Version1_1 - Version 1 1
        - Version2_0 - Version 2 0
        """
        return _neoapi.FeatureAccess_GevGVCPExtendedStatusCodesSelector_get(self)

    __swig_setmethods__['GevGVCPPendingAck'] = lambda self, value: self.GevGVCPPendingAck.Set(value.value) if isinstance(value, BaseFeature) else self.GevGVCPPendingAck.Set(value)
    @property
    def GevGVCPPendingAck(self) -> "BoolFeature":
        """
        Enables the generation of PENDING_ACK.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevGVCPPendingAck_get(self)

    __swig_setmethods__['GevIPConfigurationStatus'] = lambda self, value: self.GevIPConfigurationStatus.Set(value.value) if isinstance(value, BaseFeature) else self.GevIPConfigurationStatus.Set(value)
    @property
    def GevIPConfigurationStatus(self) -> "CGevIPConfigurationStatus":
        """
        Reports the current IP configuration status.
        Return: A CGevIPConfigurationStatus object to control the value.
        possible values:
        - DHCP - DHCP
        - ForceIP - Force IP
        - LLA - LLA
        - None - None
        - PersistentIP - Persistent IP
        """
        return _neoapi.FeatureAccess_GevIPConfigurationStatus_get(self)

    __swig_setmethods__['GevInterfaceSelector'] = lambda self, value: self.GevInterfaceSelector.Set(value.value) if isinstance(value, BaseFeature) else self.GevInterfaceSelector.Set(value)
    @property
    def GevInterfaceSelector(self) -> "IntegerFeature":
        """
        Selects which logical link to control.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevInterfaceSelector_get(self)

    __swig_setmethods__['GevMACAddress'] = lambda self, value: self.GevMACAddress.Set(value.value) if isinstance(value, BaseFeature) else self.GevMACAddress.Set(value)
    @property
    def GevMACAddress(self) -> "IntegerFeature":
        """
        MAC address of the logical link.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMACAddress_get(self)

    __swig_setmethods__['GevMCDA'] = lambda self, value: self.GevMCDA.Set(value.value) if isinstance(value, BaseFeature) else self.GevMCDA.Set(value)
    @property
    def GevMCDA(self) -> "IntegerFeature":
        """
        Controls the destination IP address for the message channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMCDA_get(self)

    __swig_setmethods__['GevMCPHostPort'] = lambda self, value: self.GevMCPHostPort.Set(value.value) if isinstance(value, BaseFeature) else self.GevMCPHostPort.Set(value)
    @property
    def GevMCPHostPort(self) -> "IntegerFeature":
        """
        Controls the port to which the device must send messages. Setting this value to 0 closes the message channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMCPHostPort_get(self)

    __swig_setmethods__['GevMCRC'] = lambda self, value: self.GevMCRC.Set(value.value) if isinstance(value, BaseFeature) else self.GevMCRC.Set(value)
    @property
    def GevMCRC(self) -> "IntegerFeature":
        """
        Controls the number of retransmissions allowed when a message channel message times out.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMCRC_get(self)

    __swig_setmethods__['GevMCSP'] = lambda self, value: self.GevMCSP.Set(value.value) if isinstance(value, BaseFeature) else self.GevMCSP.Set(value)
    @property
    def GevMCSP(self) -> "IntegerFeature":
        """
        This feature indicates the source port for the message channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMCSP_get(self)

    __swig_setmethods__['GevMCTT'] = lambda self, value: self.GevMCTT.Set(value.value) if isinstance(value, BaseFeature) else self.GevMCTT.Set(value)
    @property
    def GevMCTT(self) -> "IntegerFeature":
        """
        Provides the transmission timeout value in milliseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevMCTT_get(self)

    __swig_setmethods__['GevPAUSEFrameReception'] = lambda self, value: self.GevPAUSEFrameReception.Set(value.value) if isinstance(value, BaseFeature) else self.GevPAUSEFrameReception.Set(value)
    @property
    def GevPAUSEFrameReception(self) -> "BoolFeature":
        """
        Controls whether incoming PAUSE Frames are handled on the given logical link.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPAUSEFrameReception_get(self)

    __swig_setmethods__['GevPAUSEFrameTransmission'] = lambda self, value: self.GevPAUSEFrameTransmission.Set(value.value) if isinstance(value, BaseFeature) else self.GevPAUSEFrameTransmission.Set(value)
    @property
    def GevPAUSEFrameTransmission(self) -> "BoolFeature":
        """
        Controls whether PAUSE Frames can be generated on the given logical link.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPAUSEFrameTransmission_get(self)

    __swig_setmethods__['GevPersistentDefaultGateway'] = lambda self, value: self.GevPersistentDefaultGateway.Set(value.value) if isinstance(value, BaseFeature) else self.GevPersistentDefaultGateway.Set(value)
    @property
    def GevPersistentDefaultGateway(self) -> "IntegerFeature":
        """
        Controls the persistent default gateway for this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPersistentDefaultGateway_get(self)

    __swig_setmethods__['GevPersistentIPAddress'] = lambda self, value: self.GevPersistentIPAddress.Set(value.value) if isinstance(value, BaseFeature) else self.GevPersistentIPAddress.Set(value)
    @property
    def GevPersistentIPAddress(self) -> "IntegerFeature":
        """
        Controls the Persistent IP address for this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPersistentIPAddress_get(self)

    __swig_setmethods__['GevPersistentSubnetMask'] = lambda self, value: self.GevPersistentSubnetMask.Set(value.value) if isinstance(value, BaseFeature) else self.GevPersistentSubnetMask.Set(value)
    @property
    def GevPersistentSubnetMask(self) -> "IntegerFeature":
        """
        Controls the Persistent subnet mask associated with the Persistent IP address on this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPersistentSubnetMask_get(self)

    __swig_setmethods__['GevPrimaryApplicationIPAddress'] = lambda self, value: self.GevPrimaryApplicationIPAddress.Set(value.value) if isinstance(value, BaseFeature) else self.GevPrimaryApplicationIPAddress.Set(value)
    @property
    def GevPrimaryApplicationIPAddress(self) -> "IntegerFeature":
        """
        Returns the address of the primary application.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPrimaryApplicationIPAddress_get(self)

    __swig_setmethods__['GevPrimaryApplicationSocket'] = lambda self, value: self.GevPrimaryApplicationSocket.Set(value.value) if isinstance(value, BaseFeature) else self.GevPrimaryApplicationSocket.Set(value)
    @property
    def GevPrimaryApplicationSocket(self) -> "IntegerFeature":
        """
        Returns the UDP source port of the primary application.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPrimaryApplicationSocket_get(self)

    __swig_setmethods__['GevPrimaryApplicationSwitchoverKey'] = lambda self, value: self.GevPrimaryApplicationSwitchoverKey.Set(value.value) if isinstance(value, BaseFeature) else self.GevPrimaryApplicationSwitchoverKey.Set(value)
    @property
    def GevPrimaryApplicationSwitchoverKey(self) -> "IntegerFeature":
        """
        Controls the key to use to authenticate primary application switchover requests.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevPrimaryApplicationSwitchoverKey_get(self)

    __swig_setmethods__['GevSCCFGUnconditionalStreaming'] = lambda self, value: self.GevSCCFGUnconditionalStreaming.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCCFGUnconditionalStreaming.Set(value)
    @property
    def GevSCCFGUnconditionalStreaming(self) -> "BoolFeature":
        """
        Enables the camera to continue to stream, for this stream channel, if its control channel is closed or regardless of the reception of any ICMP messages (such as destination unreachable messages).
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCCFGUnconditionalStreaming_get(self)

    __swig_setmethods__['GevSCDA'] = lambda self, value: self.GevSCDA.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCDA.Set(value)
    @property
    def GevSCDA(self) -> "IntegerFeature":
        """
        Controls the destination IP address of the selected stream channel to which a GVSP transmitter must send data stream or the destination IP address from which a GVSP receiver may receive data stream.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCDA_get(self)

    __swig_setmethods__['GevSCFTD'] = lambda self, value: self.GevSCFTD.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCFTD.Set(value)
    @property
    def GevSCFTD(self) -> "IntegerFeature":
        """
        Indicates the delay in timestamp counter unit to insert between each block (image) for the selected Stream Channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCFTD_get(self)

    __swig_setmethods__['GevSCPD'] = lambda self, value: self.GevSCPD.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPD.Set(value)
    @property
    def GevSCPD(self) -> "IntegerFeature":
        """
        Controls the delay (in GEV timestamp counter unit) to insert between each packet for this stream channel. This can be used as a crude flow-control mechanism if the application or the network infrastructure cannot keep up with the packets coming from the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPD_get(self)

    __swig_setmethods__['GevSCPHostPort'] = lambda self, value: self.GevSCPHostPort.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPHostPort.Set(value)
    @property
    def GevSCPHostPort(self) -> "IntegerFeature":
        """
        Controls the port of the selected channel to which a GVSP transmitter must send data stream or the port from which a GVSP receiver may receive data stream. Setting this value to 0 closes the stream channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPHostPort_get(self)

    __swig_setmethods__['GevSCPInterfaceIndex'] = lambda self, value: self.GevSCPInterfaceIndex.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPInterfaceIndex.Set(value)
    @property
    def GevSCPInterfaceIndex(self) -> "IntegerFeature":
        """
        Index of the logical link to use.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPInterfaceIndex_get(self)

    __swig_setmethods__['GevSCPSDoNotFragment'] = lambda self, value: self.GevSCPSDoNotFragment.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPSDoNotFragment.Set(value)
    @property
    def GevSCPSDoNotFragment(self) -> "BoolFeature":
        """
        The state of this feature is copied into the "do not fragment" bit of IP header of each stream packet. It can be used by the application to prevent IP fragmentation of packets on the stream channel.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPSDoNotFragment_get(self)

    __swig_setmethods__['GevSCPSFireTestPacket'] = lambda self, value: self.GevSCPSFireTestPacket.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPSFireTestPacket.Set(value)
    @property
    def GevSCPSFireTestPacket(self) -> "BoolFeature":
        """
        Sends a test packet. When this feature is set, the device will fire one test packet.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPSFireTestPacket_get(self)

    __swig_setmethods__['GevSCPSPacketSize'] = lambda self, value: self.GevSCPSPacketSize.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCPSPacketSize.Set(value)
    @property
    def GevSCPSPacketSize(self) -> "IntegerFeature":
        """
        This GigE Vision specific feature corresponds to DeviceStreamChannelPacketSize and should be kept in sync with it. It specifies the stream packet size, in bytes, to send on the selected channel for a GVSP transmitter or specifies the maximum packet size supported by a GVSP receiver.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCPSPacketSize_get(self)

    __swig_setmethods__['GevSCSP'] = lambda self, value: self.GevSCSP.Set(value.value) if isinstance(value, BaseFeature) else self.GevSCSP.Set(value)
    @property
    def GevSCSP(self) -> "IntegerFeature":
        """
        Indicates the source port of the stream channel.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSCSP_get(self)

    __swig_setmethods__['GevSecondURL'] = lambda self, value: self.GevSecondURL.Set(value.value) if isinstance(value, BaseFeature) else self.GevSecondURL.Set(value)
    @property
    def GevSecondURL(self) -> "StringFeature":
        """
        Indicates the second URL to the GenICam XML device description file. This URL is an alternative if the application was unsuccessful to retrieve the device description file using the first URL.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSecondURL_get(self)

    __swig_setmethods__['GevStreamChannelSelector'] = lambda self, value: self.GevStreamChannelSelector.Set(value.value) if isinstance(value, BaseFeature) else self.GevStreamChannelSelector.Set(value)
    @property
    def GevStreamChannelSelector(self) -> "IntegerFeature":
        """
        Selects the stream channel to control.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevStreamChannelSelector_get(self)

    __swig_setmethods__['GevSupportedOption'] = lambda self, value: self.GevSupportedOption.Set(value.value) if isinstance(value, BaseFeature) else self.GevSupportedOption.Set(value)
    @property
    def GevSupportedOption(self) -> "BoolFeature":
        """
        Returns if the selected GEV option is supported.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_GevSupportedOption_get(self)

    __swig_setmethods__['GevSupportedOptionSelector'] = lambda self, value: self.GevSupportedOptionSelector.Set(value.value) if isinstance(value, BaseFeature) else self.GevSupportedOptionSelector.Set(value)
    @property
    def GevSupportedOptionSelector(self) -> "CGevSupportedOptionSelector":
        """
        Selects the GEV option to interrogate for existing support.
        Return: A CGevSupportedOptionSelector object to control the value.
        possible values:
        - Action - Action
        - CCPApplicationSocket - CCP Application Socket
        - CommandsConcatenation - Commands Concatenation
        - DiscoveryAckDelay - Discovery Ack Delay
        - DiscoveryAckDelayWritable - Discovery Ack Delay Writable
        - DynamicLAG - Dynamic LAG
        - Event - Event
        - EventData - Event Data
        - ExtendedStatusCodes - Extended Status Codes
        - ExtendedStatusCodesVersion2_0 - Extended Status Codes Version 2 0
        - HeartbeatDisable - Heartbeat Disable
        - IEEE1588 - IEEE 1588. AVAILABLE: (DeviceTLVersionMajor >= 2)
        - IPConfigurationDHCP - IP Configuration DHCP
        - IPConfigurationLLA - IP Configuration LLA
        - IPConfigurationPersistentIP - IP Configuration Persistent IP
        - LinkSpeed - Link Speed
        - ManifestTable - Manifest Table
        - MessageChannelSourceSocket - Message Channel Source Socket
        - MultiLink - Multi Link
        - PAUSEFrameGeneration - PAUSE Frame Generation
        - PAUSEFrameReception - PAUSE Frame Reception
        - PacketResend - Packet Resend
        - PendingAck - Pending Ack
        - PrimaryApplicationSwitchover - Primary Application Switchover
        - Ptp - Ptp
        - ScheduledAction - Scheduled Action
        - SerialNumber - Serial Number
        - SingleLink - Single Link
        - StandardIDMode - Standard ID Mode
        - StaticLAG - Static LAG
        - StreamChannel0AllInTransmission - Stream Channel 0 All In Transmission
        - StreamChannel0BigAndLittleEndian - Stream Channel 0 Big And Little Endian
        - StreamChannel0ExtendedChunkData - Stream Channel 0 Extended Chunk Data
        - StreamChannel0IPReassembly - Stream Channel 0 IP Reassembly
        - StreamChannel0MultiZone - Stream Channel 0 Multi Zone
        - StreamChannel0PacketResendDestination - Stream Channel 0 Packet Resend Destination
        - StreamChannel0UnconditionalStreaming - Stream Channel 0 Unconditional Streaming
        - StreamChannel1AllInTransmission - Stream Channel 1 All In Transmission
        - StreamChannel1BigAndLittleEndian - Stream Channel 1 Big And Little Endian
        - StreamChannel1ExtendedChunkData - Stream Channel 1 Extended Chunk Data
        - StreamChannel1IPReassembly - Stream Channel 1 IP Reassembly
        - StreamChannel1MultiZone - Stream Channel 1 Multi Zone
        - StreamChannel1PacketResendDestination - Stream Channel 1 Packet Resend Destination
        - StreamChannel1UnconditionalStreaming - Stream Channel 1 Unconditional Streaming
        - StreamChannel2AllInTransmission - Stream Channel 2 All In Transmission
        - StreamChannel2BigAndLittleEndian - Stream Channel 2 Big And Little Endian
        - StreamChannel2ExtendedChunkData - Stream Channel 2 Extended Chunk Data
        - StreamChannel2IPReassembly - Stream Channel 2 IP Reassembly
        - StreamChannel2MultiZone - Stream Channel 2 Multi Zone
        - StreamChannel2PacketResendDestination - Stream Channel 2 Packet Resend Destination
        - StreamChannel2UnconditionalStreaming - Stream Channel 2 Unconditional Streaming
        - StreamChannelSourceSocket - Stream Channel Source Socket
        - TestData - Test Data
        - UnconditionalAction - Unconditional Action
        - UserDefinedName - User Defined Name
        - WriteMem - Write Mem
        """
        return _neoapi.FeatureAccess_GevSupportedOptionSelector_get(self)

    __swig_setmethods__['HDREnable'] = lambda self, value: self.HDREnable.Set(value.value) if isinstance(value, BaseFeature) else self.HDREnable.Set(value)
    @property
    def HDREnable(self) -> "BoolFeature":
        """
        Enables the High Dynamic Range mode of the camera.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDREnable_get(self)

    __swig_setmethods__['HDREnableTriggerAutoMode'] = lambda self, value: self.HDREnableTriggerAutoMode.Set(value.value) if isinstance(value, BaseFeature) else self.HDREnableTriggerAutoMode.Set(value)
    @property
    def HDREnableTriggerAutoMode(self) -> "BoolFeature":
        """
        Enables the TriggerAutoMode mode for HDR Mode of the camera.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDREnableTriggerAutoMode_get(self)

    __swig_setmethods__['HDRExposureRatio'] = lambda self, value: self.HDRExposureRatio.Set(value.value) if isinstance(value, BaseFeature) else self.HDRExposureRatio.Set(value)
    @property
    def HDRExposureRatio(self) -> "IntegerFeature":
        """
        Sets the ratio of the total exposure time for the selected slope.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRExposureRatio_get(self)

    __swig_setmethods__['HDRExposureRatioPercent'] = lambda self, value: self.HDRExposureRatioPercent.Set(value.value) if isinstance(value, BaseFeature) else self.HDRExposureRatioPercent.Set(value)
    @property
    def HDRExposureRatioPercent(self) -> "DoubleFeature":
        """
        Returns the ratio of the total exposure time for the selected slope expressed in percent.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRExposureRatioPercent_get(self)

    __swig_setmethods__['HDRExposureTimeBrightArea'] = lambda self, value: self.HDRExposureTimeBrightArea.Set(value.value) if isinstance(value, BaseFeature) else self.HDRExposureTimeBrightArea.Set(value)
    @property
    def HDRExposureTimeBrightArea(self) -> "DoubleFeature":
        """
        Returns the exposure time for bright areas of image. This value represents the short exposure time, which is derived from (long) ExposureTime divided by HDRExposureTimeRatio.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRExposureTimeBrightArea_get(self)

    __swig_setmethods__['HDRExposureTimeDarkArea'] = lambda self, value: self.HDRExposureTimeDarkArea.Set(value.value) if isinstance(value, BaseFeature) else self.HDRExposureTimeDarkArea.Set(value)
    @property
    def HDRExposureTimeDarkArea(self) -> "DoubleFeature":
        """
        Returns the exposure time for dark areas of image. This value represents the long exposure timea and is equal to the specified value of the standard feature ExposureTime.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRExposureTimeDarkArea_get(self)

    __swig_setmethods__['HDRExposureTimeRatio'] = lambda self, value: self.HDRExposureTimeRatio.Set(value.value) if isinstance(value, BaseFeature) else self.HDRExposureTimeRatio.Set(value)
    @property
    def HDRExposureTimeRatio(self) -> "IntegerFeature":
        """
        Sets the exposure time ratio for HDR mode. Valid values are only power-of-two numbers. The feature will snap to next/previous valid value when current value is incremented/decremented, else it will round to nearest valid value.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRExposureTimeRatio_get(self)

    __swig_setmethods__['HDRGainBrightArea'] = lambda self, value: self.HDRGainBrightArea.Set(value.value) if isinstance(value, BaseFeature) else self.HDRGainBrightArea.Set(value)
    @property
    def HDRGainBrightArea(self) -> "IntegerFeature":
        """
        Returns the sensor gain for bright areas of image. This value represents the lower gain used as offset for the HDR image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRGainBrightArea_get(self)

    __swig_setmethods__['HDRGainDarkArea'] = lambda self, value: self.HDRGainDarkArea.Set(value.value) if isinstance(value, BaseFeature) else self.HDRGainDarkArea.Set(value)
    @property
    def HDRGainDarkArea(self) -> "IntegerFeature":
        """
        Returns the sensor gain for dark areas of image. This value represents the higher gain, which is derived from lower gain and HDRGainRatio.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRGainDarkArea_get(self)

    __swig_setmethods__['HDRGainRatio'] = lambda self, value: self.HDRGainRatio.Set(value.value) if isinstance(value, BaseFeature) else self.HDRGainRatio.Set(value)
    @property
    def HDRGainRatio(self) -> "DoubleFeature":
        """
        Returns the gain ratio for HDR mode.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRGainRatio_get(self)

    __swig_setmethods__['HDRGainRatioSelector'] = lambda self, value: self.HDRGainRatioSelector.Set(value.value) if isinstance(value, BaseFeature) else self.HDRGainRatioSelector.Set(value)
    @property
    def HDRGainRatioSelector(self) -> "CHDRGainRatioSelector":
        """
        Selects the gain ratio for HDR mode.
        Return: A CHDRGainRatioSelector object to control the value.
        possible values:
        - Gain12_0dB - Sets HDR gain ratio to dynamic range of 12.0dB.
        - Gain2_5dB - Sets HDR gain ratio to dynamic range of 2.5dB.
        - Gain3_5dB - Sets HDR gain ratio to dynamic range of 3.5dB.
        - Gain6_0dB - Sets HDR gain ratio to dynamic range of 6.0dB.
        - Gain9_5dB - Sets HDR gain ratio to dynamic range of 9.5dB.
        - Off - Sets HDR gain ratio to dynamic range of 0dB.
        """
        return _neoapi.FeatureAccess_HDRGainRatioSelector_get(self)

    __swig_setmethods__['HDRIndex'] = lambda self, value: self.HDRIndex.Set(value.value) if isinstance(value, BaseFeature) else self.HDRIndex.Set(value)
    @property
    def HDRIndex(self) -> "IntegerFeature":
        """
        Selects the index of the HDR element to access.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRIndex_get(self)

    __swig_setmethods__['HDRPotentialAbs'] = lambda self, value: self.HDRPotentialAbs.Set(value.value) if isinstance(value, BaseFeature) else self.HDRPotentialAbs.Set(value)
    @property
    def HDRPotentialAbs(self) -> "IntegerFeature":
        """
        Sets the saturation threshold of the selected slope.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRPotentialAbs_get(self)

    __swig_setmethods__['HDRProcessingEnable'] = lambda self, value: self.HDRProcessingEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HDRProcessingEnable.Set(value)
    @property
    def HDRProcessingEnable(self) -> "BoolFeature":
        """
        Enables the calculation of an interleaved HDR image of the sensor to an HDR image. If this feature is disabled while HDR is enabled the interleaved HDR image of the sensor will be output.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRProcessingEnable_get(self)

    __swig_setmethods__['HDRProcessingSmoothingEnable'] = lambda self, value: self.HDRProcessingSmoothingEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HDRProcessingSmoothingEnable.Set(value)
    @property
    def HDRProcessingSmoothingEnable(self) -> "BoolFeature":
        """
        Enables smoothing of normalized neighbor pixels in HDR mode.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRProcessingSmoothingEnable_get(self)

    __swig_setmethods__['HDRProcessingThresholdMax'] = lambda self, value: self.HDRProcessingThresholdMax.Set(value.value) if isinstance(value, BaseFeature) else self.HDRProcessingThresholdMax.Set(value)
    @property
    def HDRProcessingThresholdMax(self) -> "IntegerFeature":
        """
        Specifies the upper threshold to determine valid pixels for HDR processing.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRProcessingThresholdMax_get(self)

    __swig_setmethods__['HDRProcessingThresholdMin'] = lambda self, value: self.HDRProcessingThresholdMin.Set(value.value) if isinstance(value, BaseFeature) else self.HDRProcessingThresholdMin.Set(value)
    @property
    def HDRProcessingThresholdMin(self) -> "IntegerFeature":
        """
        Specifies the lower threshold to determine valid pixels for HDR processing.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRProcessingThresholdMin_get(self)

    __swig_setmethods__['HDRSplitviewEnable'] = lambda self, value: self.HDRSplitviewEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HDRSplitviewEnable.Set(value)
    @property
    def HDRSplitviewEnable(self) -> "BoolFeature":
        """
        Enables the split view of interleaved HDR image.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRSplitviewEnable_get(self)

    __swig_setmethods__['HDRTonemappingCurveGradient'] = lambda self, value: self.HDRTonemappingCurveGradient.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingCurveGradient.Set(value)
    @property
    def HDRTonemappingCurveGradient(self) -> "DoubleFeature":
        """
        Sets the gradient at selected grid point for HDR tone-mapping transfer curve.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurveGradient_get(self)

    __swig_setmethods__['HDRTonemappingCurveGridpoint'] = lambda self, value: self.HDRTonemappingCurveGridpoint.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingCurveGridpoint.Set(value)
    @property
    def HDRTonemappingCurveGridpoint(self) -> "IntegerFeature":
        """
        Sets the grid point for HDR tone-mapping transfer curve.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurveGridpoint_get(self)

    __swig_setmethods__['HDRTonemappingCurveGridpointIndex'] = lambda self, value: self.HDRTonemappingCurveGridpointIndex.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingCurveGridpointIndex.Set(value)
    @property
    def HDRTonemappingCurveGridpointIndex(self) -> "IntegerFeature":
        """
        Sets the index of grid point for the user-defined tone-mapping curve.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurveGridpointIndex_get(self)

    __swig_setmethods__['HDRTonemappingCurveOffset'] = lambda self, value: self.HDRTonemappingCurveOffset.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingCurveOffset.Set(value)
    @property
    def HDRTonemappingCurveOffset(self) -> "IntegerFeature":
        """
        Sets the offset at selected grid point for HDR tone-mapping transfer curve.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurveOffset_get(self)

    __swig_setmethods__['HDRTonemappingCurvePresetSelector'] = lambda self, value: self.HDRTonemappingCurvePresetSelector.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingCurvePresetSelector.Set(value)
    @property
    def HDRTonemappingCurvePresetSelector(self) -> "CHDRTonemappingCurvePresetSelector":
        """
        Selects the predefined transfer curve for global tone-mapping of the calculated HDR image.
        Return: A CHDRTonemappingCurvePresetSelector object to control the value.
        possible values:
        - Preset1 - The HDR tone-mapping preset for a steep logarithmic transfer curve will be used.
        - Preset2 - The HDR tone-mapping preset for a middle steep logarithmic transfer curve will be used.
        - Preset3 - The HDR tone-mapping preset for a slight logarithmic transfer curve will be used.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurvePresetSelector_get(self)

    @property
    def HDRTonemappingCurveResetToPreset(self) -> "CommandFeature":
        """
        Resets the tone-mapping curve to the selected HDRTonemappingCurvePreset.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingCurveResetToPreset_get(self)

    __swig_setmethods__['HDRTonemappingEnable'] = lambda self, value: self.HDRTonemappingEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingEnable.Set(value)
    @property
    def HDRTonemappingEnable(self) -> "BoolFeature":
        """
        Enables the tone-mapping of calculated HDR image. If this feature is deactivated HDR pixels are only cropped to width of specified output pixelformat and HDR information will be lost..
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingEnable_get(self)

    __swig_setmethods__['HDRTonemappingMax'] = lambda self, value: self.HDRTonemappingMax.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingMax.Set(value)
    @property
    def HDRTonemappingMax(self) -> "IntegerFeature":
        """
        Specifies the statistical maximal pixel value for local tone-mapping of the calculated HDR image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingMax_get(self)

    __swig_setmethods__['HDRTonemappingMean'] = lambda self, value: self.HDRTonemappingMean.Set(value.value) if isinstance(value, BaseFeature) else self.HDRTonemappingMean.Set(value)
    @property
    def HDRTonemappingMean(self) -> "IntegerFeature":
        """
        Specifies the statistical mean value for local tone-mapping of the calculated HDR image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HDRTonemappingMean_get(self)

    __swig_setmethods__['HQModeEnable'] = lambda self, value: self.HQModeEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HQModeEnable.Set(value)
    @property
    def HQModeEnable(self) -> "BoolFeature":
        """
        Enables the HQ Mode of the camera with lower sensor frequency.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HQModeEnable_get(self)

    __swig_setmethods__['Height'] = lambda self, value: self.Height.Set(value.value) if isinstance(value, BaseFeature) else self.Height.Set(value)
    @property
    def Height(self) -> "IntegerFeature":
        """
        Height of the image provided by the device (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Height_get(self)

    __swig_setmethods__['HeightMax'] = lambda self, value: self.HeightMax.Set(value.value) if isinstance(value, BaseFeature) else self.HeightMax.Set(value)
    @property
    def HeightMax(self) -> "IntegerFeature":
        """
        Maximum height of the image (in pixels). This dimension is calculated after vertical binning, decimation or any other function changing the vertical dimension of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HeightMax_get(self)

    __swig_setmethods__['HighConversionGain'] = lambda self, value: self.HighConversionGain.Set(value.value) if isinstance(value, BaseFeature) else self.HighConversionGain.Set(value)
    @property
    def HighConversionGain(self) -> "DoubleFeature":
        """
        Returns the high conversion gain of the sensor.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HighConversionGain_get(self)

    __swig_setmethods__['HighConversionGainEnable'] = lambda self, value: self.HighConversionGainEnable.Set(value.value) if isinstance(value, BaseFeature) else self.HighConversionGainEnable.Set(value)
    @property
    def HighConversionGainEnable(self) -> "BoolFeature":
        """
        Enables the high conversion gain mode inside the sensor.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_HighConversionGainEnable_get(self)

    __swig_setmethods__['ImageCompressionBitrate'] = lambda self, value: self.ImageCompressionBitrate.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionBitrate.Set(value)
    @property
    def ImageCompressionBitrate(self) -> "DoubleFeature":
        """
        Control the rate of the produced compressed stream.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ImageCompressionBitrate_get(self)

    __swig_setmethods__['ImageCompressionJPEGFormatOption'] = lambda self, value: self.ImageCompressionJPEGFormatOption.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionJPEGFormatOption.Set(value)
    @property
    def ImageCompressionJPEGFormatOption(self) -> "CImageCompressionJPEGFormatOption":
        """
        When JPEG is selected as the compression format, a device might optionally offer better control over JPEG-specific options through this feature.
        Return: A CImageCompressionJPEGFormatOption object to control the value.
        possible values:
        - BaselineOptimized - Provides optimized color and slightly better compression than baseline standard by using custom Huffman tables optimized after statistical analysis of the image content.
        - BaselineStandard - Indicates this is a baseline sequential (single-scan) DCT-based JPEG.
        - Lossless - Selects lossless JPEG compression based on a predictive coding model.
        - Progressive - Indicates this is a progressive (multi-scan) DCT-based JPEG.
        """
        return _neoapi.FeatureAccess_ImageCompressionJPEGFormatOption_get(self)

    __swig_setmethods__['ImageCompressionMode'] = lambda self, value: self.ImageCompressionMode.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionMode.Set(value)
    @property
    def ImageCompressionMode(self) -> "CImageCompressionMode":
        """
        Enable a specific image compression mode as the base mode for image transfer. Optionally, chunk data can be appended to the compressed image.
        Return: A CImageCompressionMode object to control the value.
        possible values:
        - H264 - H.264 compression is selected.
        - JPEG - JPEG compression is selected.
        - JPEG2000 - JPEG 2000 compression is selected.
        - Off - Default value. Image compression is disabled. Images are transmitted uncompressed.
        """
        return _neoapi.FeatureAccess_ImageCompressionMode_get(self)

    __swig_setmethods__['ImageCompressionQuality'] = lambda self, value: self.ImageCompressionQuality.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionQuality.Set(value)
    @property
    def ImageCompressionQuality(self) -> "IntegerFeature":
        """
        Control the quality of the produced compressed stream.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ImageCompressionQuality_get(self)

    __swig_setmethods__['ImageCompressionRateOption'] = lambda self, value: self.ImageCompressionRateOption.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionRateOption.Set(value)
    @property
    def ImageCompressionRateOption(self) -> "CImageCompressionRateOption":
        """
        Two rate controlling options are offered: fixed bit rate or fixed quality. The exact implementation to achieve one or the other is vendor-specific.
        Return: A CImageCompressionRateOption object to control the value.
        possible values:
        - FixBitrate - Output stream follows a constant bit rate. Allows easy bandwidth management on the link.
        - FixQuality - Output stream has a constant image quality. Can be used when image processing algorithms are sensitive to image degradation caused by excessive data compression.
        """
        return _neoapi.FeatureAccess_ImageCompressionRateOption_get(self)

    __swig_setmethods__['ImageCompressionVersion'] = lambda self, value: self.ImageCompressionVersion.Set(value.value) if isinstance(value, BaseFeature) else self.ImageCompressionVersion.Set(value)
    @property
    def ImageCompressionVersion(self) -> "StringFeature":
        """
        Describe the Version of Image Compression implementation.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ImageCompressionVersion_get(self)

    @property
    def ImageData(self) -> "RegisterFeature":
        """
        Returns the data of the image. The size of the image itself is given in the Length element of the feature. The start address is stored in the element Address of the feature.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ImageData_get(self)

    __swig_setmethods__['ImageDataEnable'] = lambda self, value: self.ImageDataEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ImageDataEnable.Set(value)
    @property
    def ImageDataEnable(self) -> "BoolFeature":
        """
        Enables the feature ImageData. If it is switch off the feature ImageData is not available.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ImageDataEnable_get(self)

    __swig_setmethods__['InterfaceSpeedMode'] = lambda self, value: self.InterfaceSpeedMode.Set(value.value) if isinstance(value, BaseFeature) else self.InterfaceSpeedMode.Set(value)
    @property
    def InterfaceSpeedMode(self) -> "CInterfaceSpeedMode":
        """
        Returns the interface speed mode as string.
        Return: A CInterfaceSpeedMode object to control the value.
        possible values:
        - Ethernet100Mbps - Interface speed mode is 100 Mbps.
        - Ethernet10Gbps - Operation at 10 Gbps. AVAILABLE: Always.
        - Ethernet1Gbps - Interface speed mode is 1 Gbps.
        - Ethernet2_5Gbps - Operation at 2.5 Gbps. AVAILABLE: Always.
        - Ethernet5Gbps - Operation at 5 Gbps. AVAILABLE: Always.
        - FullSpeed - USB Operation at 12 Mbps
        - HighSpeed - USB Operation at 480 Mbps
        - LowSpeed - USB Operation at 1.5 Mbps
        - SuperSpeed - USB Operation at 5 Gbps
        """
        return _neoapi.FeatureAccess_InterfaceSpeedMode_get(self)

    __swig_setmethods__['LUTContent'] = lambda self, value: self.LUTContent.Set(value.value) if isinstance(value, BaseFeature) else self.LUTContent.Set(value)
    @property
    def LUTContent(self) -> "CLUTContent":
        """
        Specifies the content of the selected LUT.
        Return: A CLUTContent object to control the value.
        possible values:
        - Gamma - The LUT Values are calculated in an automatically way related to the value of the feature Gamma.
        - UserdefinedLUT - The LUT is defined and editable with the features LUTIndex and LUTValue.
        """
        return _neoapi.FeatureAccess_LUTContent_get(self)

    __swig_setmethods__['LUTEnable'] = lambda self, value: self.LUTEnable.Set(value.value) if isinstance(value, BaseFeature) else self.LUTEnable.Set(value)
    @property
    def LUTEnable(self) -> "BoolFeature":
        """
        Activates the selected LUT.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LUTEnable_get(self)

    __swig_setmethods__['LUTIndex'] = lambda self, value: self.LUTIndex.Set(value.value) if isinstance(value, BaseFeature) else self.LUTIndex.Set(value)
    @property
    def LUTIndex(self) -> "IntegerFeature":
        """
        Control the index (offset) of the coefficient to access in the selected LUT.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LUTIndex_get(self)

    __swig_setmethods__['LUTSelector'] = lambda self, value: self.LUTSelector.Set(value.value) if isinstance(value, BaseFeature) else self.LUTSelector.Set(value)
    @property
    def LUTSelector(self) -> "CLUTSelector":
        """
        Selects which LUT to control.
        Return: A CLUTSelector object to control the value.
        possible values:
        - Blue - Selects the Blue LUT.
        - Green - Selects the Green LUT.
        - Luminance - Selects the Luminance LUT.
        - Red - Selects the Red LUT.
        """
        return _neoapi.FeatureAccess_LUTSelector_get(self)

    __swig_setmethods__['LUTValue'] = lambda self, value: self.LUTValue.Set(value.value) if isinstance(value, BaseFeature) else self.LUTValue.Set(value)
    @property
    def LUTValue(self) -> "IntegerFeature":
        """
        Returns the Value at entry LUTIndex of the LUT selected by LUTSelector.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LUTValue_get(self)

    __swig_setmethods__['LineDebouncerHighTime'] = lambda self, value: self.LineDebouncerHighTime.Set(value.value) if isinstance(value, BaseFeature) else self.LineDebouncerHighTime.Set(value)
    @property
    def LineDebouncerHighTime(self) -> "DoubleFeature":
        """
        Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineDebouncerHighTime_get(self)

    __swig_setmethods__['LineDebouncerHighTimeAbs'] = lambda self, value: self.LineDebouncerHighTimeAbs.Set(value.value) if isinstance(value, BaseFeature) else self.LineDebouncerHighTimeAbs.Set(value)
    @property
    def LineDebouncerHighTimeAbs(self) -> "DoubleFeature":
        """
        Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineDebouncerHighTimeAbs_get(self)

    __swig_setmethods__['LineDebouncerLowTime'] = lambda self, value: self.LineDebouncerLowTime.Set(value.value) if isinstance(value, BaseFeature) else self.LineDebouncerLowTime.Set(value)
    @property
    def LineDebouncerLowTime(self) -> "DoubleFeature":
        """
        Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineDebouncerLowTime_get(self)

    __swig_setmethods__['LineDebouncerLowTimeAbs'] = lambda self, value: self.LineDebouncerLowTimeAbs.Set(value.value) if isinstance(value, BaseFeature) else self.LineDebouncerLowTimeAbs.Set(value)
    @property
    def LineDebouncerLowTimeAbs(self) -> "DoubleFeature":
        """
        Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineDebouncerLowTimeAbs_get(self)

    __swig_setmethods__['LineFormat'] = lambda self, value: self.LineFormat.Set(value.value) if isinstance(value, BaseFeature) else self.LineFormat.Set(value)
    @property
    def LineFormat(self) -> "CLineFormat":
        """
        Controls the current electrical format of the selected physical input or output Line.
        Return: A CLineFormat object to control the value.
        possible values:
        - LVDS - The Line is currently accepting or sending LVDS level signals.
        - NoConnect - The Line is not connected.
        - OpenDrain - The Line is Open Drain (or Open Collector).
        - OpenSource - The Line is Open Source. AVAILABLE: (LineMode[LineSelector] = Output)
        - OptoCoupled - The Line is opto-coupled.
        - PushPull - The Line is Push Pull. AVAILABLE: (LineMode[LineSelector] = Output)
        - RS422 - The Line is currently accepting or sending RS422 level signals.
        - TTL - The Line is currently accepting or sending TTL level signals.
        - TriState - The Line is currently in Tri-State mode (Not driven).
        """
        return _neoapi.FeatureAccess_LineFormat_get(self)

    __swig_setmethods__['LineInverter'] = lambda self, value: self.LineInverter.Set(value.value) if isinstance(value, BaseFeature) else self.LineInverter.Set(value)
    @property
    def LineInverter(self) -> "BoolFeature":
        """
        Controls the inversion of the signal of the selected input or output Line.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineInverter_get(self)

    __swig_setmethods__['LineLengthMin'] = lambda self, value: self.LineLengthMin.Set(value.value) if isinstance(value, BaseFeature) else self.LineLengthMin.Set(value)
    @property
    def LineLengthMin(self) -> "IntegerFeature":
        """
        Returns the minimal length of a line internal reading by the camera in pixels.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineLengthMin_get(self)

    __swig_setmethods__['LineMode'] = lambda self, value: self.LineMode.Set(value.value) if isinstance(value, BaseFeature) else self.LineMode.Set(value)
    @property
    def LineMode(self) -> "CLineMode":
        """
        Controls if the physical Line is used to Input or Output a signal.
        Return: A CLineMode object to control the value.
        possible values:
        - Input - The selected physical line is used to Input an electrical signal.
        - Output - The selected physical line is used to Output an electrical signal.
        """
        return _neoapi.FeatureAccess_LineMode_get(self)

    __swig_setmethods__['LinePWMConfigurationMode'] = lambda self, value: self.LinePWMConfigurationMode.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMConfigurationMode.Set(value)
    @property
    def LinePWMConfigurationMode(self) -> "CLinePWMConfigurationMode":
        """
        Enables the line PWM configuration mode.
        Return: A CLinePWMConfigurationMode object to control the value.
        possible values:
        - Off - Disables the line PWM configuration mode.
        - On - Enables the line PWM configuration mode.
        """
        return _neoapi.FeatureAccess_LinePWMConfigurationMode_get(self)

    __swig_setmethods__['LinePWMDuration'] = lambda self, value: self.LinePWMDuration.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMDuration.Set(value)
    @property
    def LinePWMDuration(self) -> "IntegerFeature":
        """
        Sets the duration in microseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMDuration_get(self)

    __swig_setmethods__['LinePWMDutyCycle'] = lambda self, value: self.LinePWMDutyCycle.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMDutyCycle.Set(value)
    @property
    def LinePWMDutyCycle(self) -> "IntegerFeature":
        """
        Sets the duty cycle in percent.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMDutyCycle_get(self)

    __swig_setmethods__['LinePWMMaxDuration'] = lambda self, value: self.LinePWMMaxDuration.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMMaxDuration.Set(value)
    @property
    def LinePWMMaxDuration(self) -> "IntegerFeature":
        """
        Sets the maximum duration in microseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMMaxDuration_get(self)

    __swig_setmethods__['LinePWMMaxDutyCycle'] = lambda self, value: self.LinePWMMaxDutyCycle.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMMaxDutyCycle.Set(value)
    @property
    def LinePWMMaxDutyCycle(self) -> "IntegerFeature":
        """
        Sets the maximal duty cycle in percent.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMMaxDutyCycle_get(self)

    __swig_setmethods__['LinePWMMode'] = lambda self, value: self.LinePWMMode.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMMode.Set(value)
    @property
    def LinePWMMode(self) -> "CLinePWMMode":
        """
        Enables the line PWM configuration mode.
        Return: A CLinePWMMode object to control the value.
        possible values:
        - FixedFrequency - The selected output line generate a fixed frequency of pulses starting with every transition from 0 to 1 and stopping with every transition from 1 to 0.
        - Off - The PWM Mode is off. The selected output line acts as a normal output.
        - OnePulse - The selected output line generates one pulse with every transition from 0 to 1.
        """
        return _neoapi.FeatureAccess_LinePWMMode_get(self)

    __swig_setmethods__['LinePWMOffTime'] = lambda self, value: self.LinePWMOffTime.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMOffTime.Set(value)
    @property
    def LinePWMOffTime(self) -> "IntegerFeature":
        """
        Returns the off time included in the PWM Period in microseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMOffTime_get(self)

    __swig_setmethods__['LinePWMPeriodTime'] = lambda self, value: self.LinePWMPeriodTime.Set(value.value) if isinstance(value, BaseFeature) else self.LinePWMPeriodTime.Set(value)
    @property
    def LinePWMPeriodTime(self) -> "IntegerFeature":
        """
        Returns the period time calculated of the given Duration and Duty Cycle in microseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LinePWMPeriodTime_get(self)

    __swig_setmethods__['LineSelector'] = lambda self, value: self.LineSelector.Set(value.value) if isinstance(value, BaseFeature) else self.LineSelector.Set(value)
    @property
    def LineSelector(self) -> "CLineSelector":
        """
        Selects the physical line (or pin) of the external device connector or the virtual line of the Transport Layer to configure.
        Return: A CLineSelector object to control the value.
        possible values:
        - CC1 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.
        - CC2 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.
        - CC3 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.
        - CC4 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.
        - Line0 - Index of the physical line and associated I/O control block to use.
        - Line1 - Index of the physical line and associated I/O control block to use.
        - Line2 - Index of the physical line and associated I/O control block to use.
        - Line3 - Index of the physical line and associated I/O control block to use. AVAILABLE: Always
        - Line4 - Index of the physical line and associated I/O control block to use. AVAILABLE: Always
        - Line5 - Index of the physical line and associated I/O control block to use. AVAILABLE: Always
        - Line6 - Index of the physical line and associated I/O control block to use. AVAILABLE: Always
        - Line7 - Index of the physical line and associated I/O control block to use. AVAILABLE: Always
        - LinkTrigger0 - Index of the virtual line going on the Transport layer to use.
        - LinkTrigger1 - Index of the virtual line going on the Transport layer to use.
        - LinkTrigger2 - Index of the virtual line going on the Transport layer to use.
        """
        return _neoapi.FeatureAccess_LineSelector_get(self)

    __swig_setmethods__['LineSource'] = lambda self, value: self.LineSource.Set(value.value) if isinstance(value, BaseFeature) else self.LineSource.Set(value)
    @property
    def LineSource(self) -> "CLineSource":
        """
        Selects which internal acquisition or I/O source signal to output on the selected Line. LineMode must be Output.
        Return: A CLineSource object to control the value.
        possible values:
        - AcquisitionActive - Device is currently doing an acquisition of one or many Frames.
        - AcquisitionTrigger - Device is currently waiting for a trigger for the capture of one or many Frames.
        - AcquisitionTriggerMissed - Device has missed an Acquisition start trigger.
        - AcquisitionTriggerWait - Device is currently waiting for a trigger for the capture of one or many Frames.
        - Counter0Active - The chosen counter is in active state (counting).
        - Counter1Active - The chosen counter is in active state (counting).
        - Counter2Active - The chosen counter is in active state (counting).
        - Encoder0 - The chosen Encoder Output state.
        - Encoder1 - The chosen Encoder Output state.
        - Encoder2 - The chosen Encoder Output state.
        - ExposureActive - Device is doing the exposure of a Frame (or Line).
        - FrameActive - Device is currently doing the capture of a Frame.
        - FrameTrigger - Device is currently waiting for a Frame start trigger.
        - FrameTriggerMissed - Device has missed a Frame start trigger.
        - FrameTriggerWait - Device is currently waiting for a Frame start trigger.
        - Line0 - Device is currently waiting for signal of input line 0. AVAILABLE: Always
        - Line1 - Device is currently waiting for signal of input line 10. AVAILABLE: Always
        - LineActive - Device is currently doing the capture of a Line.
        - LineTrigger - Device is currently waiting for a Line start trigger.
        - LineTriggerMissed - Device has missed a Line start trigger.
        - LineTriggerWait - Device is currently waiting for a Line start trigger.
        - LogicBlock0 - The choosen Logic Block output state.
        - LogicBlock1 - The choosen Logic Block output state.
        - LogicBlock2 - The choosen Logic Block output state.
        - Off - Line output is disabled (Tri-State).
        - ReadoutActive - Device is doing the readout of a Frame. AVAILABLE: Always
        - SequencerOutput0 - The chosen Sequencer Output is in active state.
        - SequencerOutput1 - The chosen Sequencer Output is in active state.
        - SequencerOutput2 - The chosen Sequencer Output is in active state.
        - SoftwareSignal0 - The choosen Software Signal output state.
        - SoftwareSignal1 - The choosen Software Signal output state.
        - SoftwareSignal2 - The choosen Software Signal output state.
        - Stream0TransferActive - Transfer on the stream is active.
        - Stream0TransferOverflow - Transfer on the stream is in overflow.
        - Stream0TransferPaused - Transfer on the stream is paused.
        - Stream0TransferStopped - Transfer on the stream is stopped.
        - Stream0TransferStopping - Transfer on the stream is stopping.
        - Stream1TransferActive - Transfer on the stream is active.
        - Stream1TransferOverflow - Transfer on the stream is in overflow.
        - Stream1TransferPaused - Transfer on the stream is paused.
        - Stream1TransferStopped - Transfer on the stream is stopped.
        - Stream1TransferStopping - Transfer on the stream is stopping.
        - Timer0Active - The chosen Timer is in active state.
        - Timer1Active - The chosen Timer is in active state.
        - Timer2Active - The chosen Timer is in active state.
        - Timer3Active - The chosen Timer is in active state. AVAILABLE: Always
        - TriggerOverlapped - Mark Overlapped.
        - TriggerReady - Device is ready for trigger. AVAILABLE: Always
        - TriggerSkipped - Trigger Skipped.
        - UserOutput0 - The chosen User Output Bit state as defined by its current UserOutputValue.
        - UserOutput1 - The chosen User Output Bit state as defined by its current UserOutputValue.
        - UserOutput2 - The chosen User Output Bit state as defined by its current UserOutputValue.
        - UserOutput3 - The chosen User Output Bit state as defined by its current UserOutputValue. AVAILABLE: Always
        - UserOutput4 - The chosen User Output Bit state as defined by its current UserOutputValue. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_LineSource_get(self)

    __swig_setmethods__['LineStatus'] = lambda self, value: self.LineStatus.Set(value.value) if isinstance(value, BaseFeature) else self.LineStatus.Set(value)
    @property
    def LineStatus(self) -> "BoolFeature":
        """
        Returns the current status of the selected input or output Line.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineStatus_get(self)

    __swig_setmethods__['LineStatusAll'] = lambda self, value: self.LineStatusAll.Set(value.value) if isinstance(value, BaseFeature) else self.LineStatusAll.Set(value)
    @property
    def LineStatusAll(self) -> "IntegerFeature":
        """
        Returns the current status of all available Line signals at time of polling in a single bitfield.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LineStatusAll_get(self)

    __swig_setmethods__['LostEventCounter'] = lambda self, value: self.LostEventCounter.Set(value.value) if isinstance(value, BaseFeature) else self.LostEventCounter.Set(value)
    @property
    def LostEventCounter(self) -> "IntegerFeature":
        """
        Returns the number of lost events.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_LostEventCounter_get(self)

    __swig_setmethods__['MedianFilterEnable'] = lambda self, value: self.MedianFilterEnable.Set(value.value) if isinstance(value, BaseFeature) else self.MedianFilterEnable.Set(value)
    @property
    def MedianFilterEnable(self) -> "BoolFeature":
        """
        Enables the Median filter.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MedianFilterEnable_get(self)

    __swig_setmethods__['MemoryActivePart'] = lambda self, value: self.MemoryActivePart.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryActivePart.Set(value)
    @property
    def MemoryActivePart(self) -> "CMemoryActivePart":
        """
        Returns the active memory part to write the images in.
        Return: A CMemoryActivePart object to control the value.
        possible values:
        - Part_1 - Part 1 is the active memory part.
        - Part_2 - Part 2 is the active memory part.
        - Part_3 - Part 3 is the active memory part.
        - Part_4 - Part 4 is the active memory part.
        """
        return _neoapi.FeatureAccess_MemoryActivePart_get(self)

    __swig_setmethods__['MemoryFilledBlocks'] = lambda self, value: self.MemoryFilledBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryFilledBlocks.Set(value)
    @property
    def MemoryFilledBlocks(self) -> "IntegerFeature":
        """
        Returns the number of filled memory blocks.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryFilledBlocks_get(self)

    __swig_setmethods__['MemoryFreeBlocks'] = lambda self, value: self.MemoryFreeBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryFreeBlocks.Set(value)
    @property
    def MemoryFreeBlocks(self) -> "IntegerFeature":
        """
        Returns the number of free memory blocks.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryFreeBlocks_get(self)

    __swig_setmethods__['MemoryMaxBlocks'] = lambda self, value: self.MemoryMaxBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryMaxBlocks.Set(value)
    @property
    def MemoryMaxBlocks(self) -> "IntegerFeature":
        """
        Returns the maximum number of available memory blocks.It depends on partial scan features, pixelformat and selected acquisition format.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryMaxBlocks_get(self)

    __swig_setmethods__['MemoryMode'] = lambda self, value: self.MemoryMode.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryMode.Set(value)
    @property
    def MemoryMode(self) -> "CMemoryMode":
        """
        Controls the mode to use the memory.
        Return: A CMemoryMode object to control the value.
        possible values:
        - Active - The memory is configured and in use.
        - Burst - The selected memory part will be written and read simultaneously. The memory will be read when MemoryPartFilledBlocks are available.
        - Config - Configuration of internal memory to store images is active.
        - Off - No images are stored in this mode.
        """
        return _neoapi.FeatureAccess_MemoryMode_get(self)

    __swig_setmethods__['MemoryPartActiveBlock'] = lambda self, value: self.MemoryPartActiveBlock.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartActiveBlock.Set(value)
    @property
    def MemoryPartActiveBlock(self) -> "IntegerFeature":
        """
        Returns the index of the actual used memory block.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartActiveBlock_get(self)

    __swig_setmethods__['MemoryPartBlocks'] = lambda self, value: self.MemoryPartBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartBlocks.Set(value)
    @property
    def MemoryPartBlocks(self) -> "IntegerFeature":
        """
        Sest the number of available memory blocks in the selected memory part.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartBlocks_get(self)

    __swig_setmethods__['MemoryPartFilledBlocks'] = lambda self, value: self.MemoryPartFilledBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartFilledBlocks.Set(value)
    @property
    def MemoryPartFilledBlocks(self) -> "IntegerFeature":
        """
        Returns the number of filled memory blocks in the selected memory part.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartFilledBlocks_get(self)

    __swig_setmethods__['MemoryPartFreeBlocks'] = lambda self, value: self.MemoryPartFreeBlocks.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartFreeBlocks.Set(value)
    @property
    def MemoryPartFreeBlocks(self) -> "IntegerFeature":
        """
        Returns the number of free memory blocks in the selected memory part.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartFreeBlocks_get(self)

    @property
    def MemoryPartIncrementSoftware(self) -> "CommandFeature":
        """
        Writes to the command switch the active memory part incremental.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartIncrementSoftware_get(self)

    __swig_setmethods__['MemoryPartIncrementSource'] = lambda self, value: self.MemoryPartIncrementSource.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartIncrementSource.Set(value)
    @property
    def MemoryPartIncrementSource(self) -> "CMemoryPartIncrementSource":
        """
        Selects the source to switch the active memory part.
        Return: A CMemoryPartIncrementSource object to control the value.
        possible values:
        - Line1 - Selects line 1 as source to switch the active memory part.
        - Software - Selects the command MemoryPartIncrementSoftware as source to switch the active memory part.
        """
        return _neoapi.FeatureAccess_MemoryPartIncrementSource_get(self)

    __swig_setmethods__['MemoryPartMode'] = lambda self, value: self.MemoryPartMode.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartMode.Set(value)
    @property
    def MemoryPartMode(self) -> "CMemoryPartMode":
        """
        Selects the mode to use for the selected memory part.
        Return: A CMemoryPartMode object to control the value.
        possible values:
        - Cyclic - The selected memory part will be written cyclic. The oldest image will be overwritten as first.
        - Once - The selected memory part will be written once without overrun. No images will be overwritten.
        """
        return _neoapi.FeatureAccess_MemoryPartMode_get(self)

    __swig_setmethods__['MemoryPartPreviewRatio'] = lambda self, value: self.MemoryPartPreviewRatio.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartPreviewRatio.Set(value)
    @property
    def MemoryPartPreviewRatio(self) -> "IntegerFeature":
        """
        Sets the ratio of preview images transmitted to host. A Value of 0 means no images are transmitted. A Value of 1 means every image will be transmitted and so on.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_MemoryPartPreviewRatio_get(self)

    __swig_setmethods__['MemoryPartSelector'] = lambda self, value: self.MemoryPartSelector.Set(value.value) if isinstance(value, BaseFeature) else self.MemoryPartSelector.Set(value)
    @property
    def MemoryPartSelector(self) -> "CMemoryPartSelector":
        """
        Selects on of the available memory parts.
        Return: A CMemoryPartSelector object to control the value.
        possible values:
        - Part_1 - Selects memory part 1.
        - Part_2 - Selects memory part 2.
        - Part_3 - Selects memory part 3.
        - Part_4 - Selects memory part 4.
        """
        return _neoapi.FeatureAccess_MemoryPartSelector_get(self)

    __swig_setmethods__['OffsetX'] = lambda self, value: self.OffsetX.Set(value.value) if isinstance(value, BaseFeature) else self.OffsetX.Set(value)
    @property
    def OffsetX(self) -> "IntegerFeature":
        """
        Horizontal offset from the origin to the region of interest (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OffsetX_get(self)

    __swig_setmethods__['OffsetY'] = lambda self, value: self.OffsetY.Set(value.value) if isinstance(value, BaseFeature) else self.OffsetY.Set(value)
    @property
    def OffsetY(self) -> "IntegerFeature":
        """
        Vertical offset from the origin to the region of interest (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OffsetY_get(self)

    @property
    def OpticControllerDisconnect(self) -> "CommandFeature":
        """
        Prepares the optic controller for removal.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerDisconnect_get(self)

    __swig_setmethods__['OpticControllerFamilyName'] = lambda self, value: self.OpticControllerFamilyName.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerFamilyName.Set(value)
    @property
    def OpticControllerFamilyName(self) -> "StringFeature":
        """
        Name of the device family of the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerFamilyName_get(self)

    __swig_setmethods__['OpticControllerFirmwareVersion'] = lambda self, value: self.OpticControllerFirmwareVersion.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerFirmwareVersion.Set(value)
    @property
    def OpticControllerFirmwareVersion(self) -> "StringFeature":
        """
        Version of the firmware in the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerFirmwareVersion_get(self)

    @property
    def OpticControllerInitialize(self) -> "CommandFeature":
        """
        Initializes the selected optic controller and makes it ready for use.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerInitialize_get(self)

    __swig_setmethods__['OpticControllerModelName'] = lambda self, value: self.OpticControllerModelName.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerModelName.Set(value)
    @property
    def OpticControllerModelName(self) -> "StringFeature":
        """
        Model name of the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerModelName_get(self)

    __swig_setmethods__['OpticControllerSelector'] = lambda self, value: self.OpticControllerSelector.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerSelector.Set(value)
    @property
    def OpticControllerSelector(self) -> "COpticControllerSelector":
        """
        Selects which optic controller to configure.
        Return: A COpticControllerSelector object to control the value.
        possible values:
        - OpticController0 - Selects Optic Controller 0.
        - OpticController1 - Selects Optic Controller 1.
        """
        return _neoapi.FeatureAccess_OpticControllerSelector_get(self)

    __swig_setmethods__['OpticControllerSerialNumber'] = lambda self, value: self.OpticControllerSerialNumber.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerSerialNumber.Set(value)
    @property
    def OpticControllerSerialNumber(self) -> "StringFeature":
        """
        Serial number of the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerSerialNumber_get(self)

    __swig_setmethods__['OpticControllerStatus'] = lambda self, value: self.OpticControllerStatus.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerStatus.Set(value)
    @property
    def OpticControllerStatus(self) -> "COpticControllerStatus":
        """
        Reads the status of the optic controller.
        Return: A COpticControllerStatus object to control the value.
        possible values:
        - Busy - The optic controller executes a feature access/command.
        - Error - The optic controller encountered an error.
        - NotConnected - The optic contoller is physically not connected.
        - NotInitialized - The optic controller is not initialized.
        - NotSupported - The optic controller is physically connected but not supported.
        - Ready - The optic controller is ready to use.
        """
        return _neoapi.FeatureAccess_OpticControllerStatus_get(self)

    __swig_setmethods__['OpticControllerTemperature'] = lambda self, value: self.OpticControllerTemperature.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerTemperature.Set(value)
    @property
    def OpticControllerTemperature(self) -> "DoubleFeature":
        """
        Temperature of the optic controller in degrees Celsius (C).
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerTemperature_get(self)

    __swig_setmethods__['OpticControllerThermalCompensation'] = lambda self, value: self.OpticControllerThermalCompensation.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerThermalCompensation.Set(value)
    @property
    def OpticControllerThermalCompensation(self) -> "BoolFeature":
        """
        Enables the thermal compensation of the optic controller.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerThermalCompensation_get(self)

    __swig_setmethods__['OpticControllerVendorName'] = lambda self, value: self.OpticControllerVendorName.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerVendorName.Set(value)
    @property
    def OpticControllerVendorName(self) -> "StringFeature":
        """
        Name of the manufacturer of the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerVendorName_get(self)

    __swig_setmethods__['OpticControllerVersion'] = lambda self, value: self.OpticControllerVersion.Set(value.value) if isinstance(value, BaseFeature) else self.OpticControllerVersion.Set(value)
    @property
    def OpticControllerVersion(self) -> "StringFeature":
        """
        Version of the optic controller.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_OpticControllerVersion_get(self)

    __swig_setmethods__['PIN'] = lambda self, value: self.PIN.Set(value.value) if isinstance(value, BaseFeature) else self.PIN.Set(value)
    @property
    def PIN(self) -> "IntegerFeature":
        """
        PIN to unlock the camera stream.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PIN_get(self)

    __swig_setmethods__['PartialScanEnabled'] = lambda self, value: self.PartialScanEnabled.Set(value.value) if isinstance(value, BaseFeature) else self.PartialScanEnabled.Set(value)
    @property
    def PartialScanEnabled(self) -> "CPartialScanEnabled":
        """
        Enables the partial scan readout.
        Return: A CPartialScanEnabled object to control the value.
        possible values:
        - Off - Off
        - On - On
        """
        return _neoapi.FeatureAccess_PartialScanEnabled_get(self)

    __swig_setmethods__['PayloadSize'] = lambda self, value: self.PayloadSize.Set(value.value) if isinstance(value, BaseFeature) else self.PayloadSize.Set(value)
    @property
    def PayloadSize(self) -> "IntegerFeature":
        """
        Provides the number of bytes transferred for each data buffer or chunk on the stream channel. This includes any end-of-line, end-of-frame statistics or other stamp data. This is the total size of data payload for a data block.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PayloadSize_get(self)

    __swig_setmethods__['PhysicalPixelSizeX'] = lambda self, value: self.PhysicalPixelSizeX.Set(value.value) if isinstance(value, BaseFeature) else self.PhysicalPixelSizeX.Set(value)
    @property
    def PhysicalPixelSizeX(self) -> "DoubleFeature":
        """
        Returns the physical pixel size X in um.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PhysicalPixelSizeX_get(self)

    __swig_setmethods__['PhysicalPixelSizeY'] = lambda self, value: self.PhysicalPixelSizeY.Set(value.value) if isinstance(value, BaseFeature) else self.PhysicalPixelSizeY.Set(value)
    @property
    def PhysicalPixelSizeY(self) -> "DoubleFeature":
        """
        Returns the physical pixel size Y in um.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PhysicalPixelSizeY_get(self)

    __swig_setmethods__['PixelCorrectionEnable'] = lambda self, value: self.PixelCorrectionEnable.Set(value.value) if isinstance(value, BaseFeature) else self.PixelCorrectionEnable.Set(value)
    @property
    def PixelCorrectionEnable(self) -> "BoolFeature":
        """
        Enables the dark pixel and warm pixel correction.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PixelCorrectionEnable_get(self)

    __swig_setmethods__['PixelCorrectionThreshold'] = lambda self, value: self.PixelCorrectionThreshold.Set(value.value) if isinstance(value, BaseFeature) else self.PixelCorrectionThreshold.Set(value)
    @property
    def PixelCorrectionThreshold(self) -> "IntegerFeature":
        """
        Sets the threshold for Pixel correction.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PixelCorrectionThreshold_get(self)

    __swig_setmethods__['PixelFormat'] = lambda self, value: self.PixelFormat.Set(value.value) if isinstance(value, BaseFeature) else self.PixelFormat.Set(value)
    @property
    def PixelFormat(self) -> "CPixelFormat":
        """
        Format of the pixels provided by the device. It represents all the information provided by PixelSize, PixelColorFilter combined in a single feature.
        Return: A CPixelFormat object to control the value.
        possible values:
        - B10 - Blue 10-bit
        - B12 - Blue 12-bit
        - B16 - Blue 16-bit
        - B8 - Blue 8-bit
        - BGR10 - Blue-Green-Red 10-bit unpacked
        - BGR10p - Blue-Green-Red 10-bit packed
        - BGR12 - Blue-Green-Red 12-bit unpacked
        - BGR12p - Blue-Green-Red 12-bit packed
        - BGR14 - Blue-Green-Red 14-bit unpacked
        - BGR16 - Blue-Green-Red 16-bit
        - BGR565p - Blue-Green-Red 5/6/5-bit packed
        - BGR8 - Blue-Green-Red 8-bit
        - BGRa10 - Blue-Green-Red-alpha 10-bit unpacked
        - BGRa10p - Blue-Green-Red-alpha 10-bit packed
        - BGRa12 - Blue-Green-Red-alpha 12-bit unpacked
        - BGRa12p - Blue-Green-Red-alpha 12-bit packed
        - BGRa14 - Blue-Green-Red-alpha 14-bit unpacked
        - BGRa16 - Blue-Green-Red-alpha 16-bit
        - BGRa8 - Blue-Green-Red-alpha 8-bit
        - BayerBG10 - Bayer Blue-Green 10-bit unpacked
        - BayerBG10p - Bayer Blue-Green 10-bit packed
        - BayerBG12 - Bayer Blue-Green 12-bit unpacked
        - BayerBG12p - Bayer Blue-Green 12-bit packed
        - BayerBG14 - Bayer Blue-Green 14-bit
        - BayerBG14p - Bayer Blue-Green 14-bit packed
        - BayerBG16 - Bayer Blue-Green 16-bit
        - BayerBG4p - Bayer Blue-Green 4-bit packed
        - BayerBG8 - Bayer Blue-Green 8-bit
        - BayerGB10 - Bayer Green-Blue 10-bit unpacked
        - BayerGB10Packed - Bayer Green Blue 10 bit packed.
        - BayerGB10p - Bayer Green-Blue 10-bit packed
        - BayerGB12 - Bayer Green-Blue 12-bit unpacked
        - BayerGB12Packed - Bayer Green Blue 12 bit packed.
        - BayerGB12p - Bayer Green-Blue 12-bit packed
        - BayerGB14 - Bayer Green-Blue 14-bit
        - BayerGB14p - Bayer Green-Blue 14-bit packed
        - BayerGB16 - Bayer Green-Blue 16-bit
        - BayerGB4p - Bayer Green-Blue 4-bit packed
        - BayerGB8 - Bayer Green-Blue 8-bit
        - BayerGR10 - Bayer Green-Red 10-bit unpacked
        - BayerGR10p - Bayer Green-Red 10-bit packed
        - BayerGR12 - Bayer Green-Red 12-bit unpacked
        - BayerGR12p - Bayer Green-Red 12-bit packed
        - BayerGR14 - Bayer Green-Red 14-bit
        - BayerGR14p - Bayer Green-Red 14-bit packed
        - BayerGR16 - Bayer Green-Red 16-bit
        - BayerGR4p - Bayer Green-Red 4-bit packed
        - BayerGR8 - Bayer Green-Red 8-bit
        - BayerRG10 - Bayer Red-Green 10-bit unpacked
        - BayerRG10Packed - Bayer Red Green 10 bit packed.
        - BayerRG10p - Bayer Red-Green 10-bit packed
        - BayerRG12 - Bayer Red-Green 12-bit unpacked
        - BayerRG12Packed - Bayer Red Green 12 bit packed.
        - BayerRG12p - Bayer Red-Green 12-bit packed
        - BayerRG14 - Bayer Red-Green 14-bit
        - BayerRG14p - Bayer Red-Green 14-bit packed
        - BayerRG16 - Bayer Red-Green 16-bit
        - BayerRG4p - Bayer Red-Green 4-bit packed
        - BayerRG8 - Bayer Red-Green 8-bit
        - BiColorBGRG10 - Bi-color Blue/Green - Red/Green 10-bit unpacked
        - BiColorBGRG10p - Bi-color Blue/Green - Red/Green 10-bit packed
        - BiColorBGRG12 - Bi-color Blue/Green - Red/Green 12-bit unpacked
        - BiColorBGRG12p - Bi-color Blue/Green - Red/Green 12-bit packed
        - BiColorBGRG8 - Bi-color Blue/Green - Red/Green 8-bit
        - BiColorRGBG10 - Bi-color Red/Green - Blue/Green 10-bit unpacked
        - BiColorRGBG10p - Bi-color Red/Green - Blue/Green 10-bit packed
        - BiColorRGBG12 - Bi-color Red/Green - Blue/Green 12-bit unpacked
        - BiColorRGBG12p - Bi-color Red/Green - Blue/Green 12-bit packed
        - BiColorRGBG8 - Bi-color Red/Green - Blue/Green 8-bit
        - Confidence1 - Confidence 1-bit unpacked
        - Confidence16 - Confidence 16-bit
        - Confidence1p - Confidence 1-bit packed
        - Confidence32f - Confidence 32-bit floating point
        - Confidence8 - Confidence 8-bit
        - Coord3D_A10p - 3D coordinate A 10-bit packed
        - Coord3D_A12p - 3D coordinate A 12-bit packed
        - Coord3D_A16 - 3D coordinate A 16-bit
        - Coord3D_A32f - 3D coordinate A 32-bit floating point
        - Coord3D_A8 - 3D coordinate A 8-bit
        - Coord3D_ABC10p - 3D coordinate A-B-C 10-bit packed
        - Coord3D_ABC10p_Planar - 3D coordinate A-B-C 10-bit packed planar
        - Coord3D_ABC12p - 3D coordinate A-B-C 12-bit packed
        - Coord3D_ABC12p_Planar - 3D coordinate A-B-C 12-bit packed planar
        - Coord3D_ABC16 - 3D coordinate A-B-C 16-bit
        - Coord3D_ABC16_Planar - 3D coordinate A-B-C 16-bit planar
        - Coord3D_ABC32f - 3D coordinate A-B-C 32-bit floating point
        - Coord3D_ABC32f_Planar - 3D coordinate A-B-C 32-bit floating point planar
        - Coord3D_ABC8 - 3D coordinate A-B-C 8-bit
        - Coord3D_ABC8_Planar - 3D coordinate A-B-C 8-bit planar
        - Coord3D_AC10p - 3D coordinate A-C 10-bit packed
        - Coord3D_AC10p_Planar - 3D coordinate A-C 10-bit packed planar
        - Coord3D_AC12p - 3D coordinate A-C 12-bit packed
        - Coord3D_AC12p_Planar - 3D coordinate A-C 12-bit packed planar
        - Coord3D_AC16 - 3D coordinate A-C 16-bit
        - Coord3D_AC16_Planar - 3D coordinate A-C 16-bit planar
        - Coord3D_AC32f - 3D coordinate A-C 32-bit floating point
        - Coord3D_AC32f_Planar - 3D coordinate A-C 32-bit floating point planar
        - Coord3D_AC8 - 3D coordinate A-C 8-bit
        - Coord3D_AC8_Planar - 3D coordinate A-C 8-bit planar
        - Coord3D_B10p - 3D coordinate B 10-bit packed
        - Coord3D_B12p - 3D coordinate B 12-bit packed
        - Coord3D_B16 - 3D coordinate B 16-bit
        - Coord3D_B32f - 3D coordinate B 32-bit floating point
        - Coord3D_B8 - 3D coordinate B 8-bit
        - Coord3D_C10p - 3D coordinate C 10-bit packed
        - Coord3D_C12p - 3D coordinate C 12-bit packed
        - Coord3D_C16 - 3D coordinate C 16-bit
        - Coord3D_C32f - 3D coordinate C 32-bit floating point
        - Coord3D_C8 - 3D coordinate C 8-bit
        - Data16 - Data 16-bit
        - Data16s - Data 16-bit signed
        - Data32 - Data 32-bit
        - Data32f - Data 32-bit floating point
        - Data32s - Data 32-bit signed
        - Data64 - Data 64-bit
        - Data64f - Data 64-bit floating point
        - Data64s - Data 64-bit signed
        - Data8 - Data 8-bit
        - Data8s - Data 8-bit signed
        - G10 - Green 10-bit
        - G12 - Green 12-bit
        - G16 - Green 16-bit
        - G8 - Green 8-bit
        - Mono10 - Monochrome 10-bit unpacked
        - Mono10Packed - Mono 10 bit packed. AVAILABLE: Always.
        - Mono10p - Monochrome 10-bit packed
        - Mono12 - Monochrome 12-bit unpacked
        - Mono12Packed - Mono 12 bit packed. AVAILABLE: Always.
        - Mono12p - Monochrome 12-bit packed
        - Mono14 - Monochrome 14-bit unpacked
        - Mono14p - Monochrome 14-bit packed
        - Mono16 - Monochrome 16-bit
        - Mono1p - Monochrome 1-bit packed
        - Mono2p - Monochrome 2-bit packed
        - Mono32 - Monochrome 32-bit
        - Mono4p - Monochrome 4-bit packed
        - Mono8 - Monochrome 8-bit
        - Mono8s - Monochrome 8-bit signed
        - R10 - Red 10-bit
        - R12 - Red 12-bit
        - R16 - Red 16-bit
        - R8 - Red 8-bit
        - RGB10 - Red-Green-Blue 10-bit unpacked
        - RGB10_Planar - Red-Green-Blue 10-bit unpacked planar
        - RGB10p - Red-Green-Blue 10-bit packed
        - RGB10p32 - Red-Green-Blue 10-bit packed into 32-bit
        - RGB12 - Red-Green-Blue 12-bit unpacked
        - RGB12_Planar - Red-Green-Blue 12-bit unpacked planar
        - RGB12p - Red-Green-Blue 12-bit packed
        - RGB14 - Red-Green-Blue 14-bit unpacked
        - RGB16 - Red-Green-Blue 16-bit
        - RGB16_Planar - Red-Green-Blue 16-bit planar
        - RGB565p - Red-Green-Blue 5/6/5-bit packed
        - RGB8 - Red-Green-Blue 8-bit
        - RGB8_Planar - Red-Green-Blue 8-bit planar
        - RGBa10 - Red-Green-Blue-alpha 10-bit unpacked
        - RGBa10p - Red-Green-Blue-alpha 10-bit packed
        - RGBa12 - Red-Green-Blue-alpha 12-bit unpacked
        - RGBa12p - Red-Green-Blue-alpha 12-bit packed
        - RGBa14 - Red-Green-Blue-alpha 14-bit unpacked
        - RGBa16 - Red-Green-Blue-alpha 16-bit
        - RGBa8 - Red-Green-Blue-alpha 8-bit
        - SCF1WBWG10 - Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked
        - SCF1WBWG10p - Sparse Color Filter #1 White-Blue-White-Green 10-bit packed
        - SCF1WBWG12 - Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked
        - SCF1WBWG12p - Sparse Color Filter #1 White-Blue-White-Green 12-bit packed
        - SCF1WBWG14 - Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked
        - SCF1WBWG16 - Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked
        - SCF1WBWG8 - Sparse Color Filter #1 White-Blue-White-Green 8-bit
        - SCF1WGWB10 - Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked
        - SCF1WGWB10p - Sparse Color Filter #1 White-Green-White-Blue 10-bit packed
        - SCF1WGWB12 - Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked
        - SCF1WGWB12p - Sparse Color Filter #1 White-Green-White-Blue 12-bit packed
        - SCF1WGWB14 - Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked
        - SCF1WGWB16 - Sparse Color Filter #1 White-Green-White-Blue 16-bit
        - SCF1WGWB8 - Sparse Color Filter #1 White-Green-White-Blue 8-bit
        - SCF1WGWR10 - Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked
        - SCF1WGWR10p - Sparse Color Filter #1 White-Green-White-Red 10-bit packed
        - SCF1WGWR12 - Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked
        - SCF1WGWR12p - Sparse Color Filter #1 White-Green-White-Red 12-bit packed
        - SCF1WGWR14 - Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked
        - SCF1WGWR16 - Sparse Color Filter #1 White-Green-White-Red 16-bit
        - SCF1WGWR8 - Sparse Color Filter #1 White-Green-White-Red 8-bit
        - SCF1WRWG10 - Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked
        - SCF1WRWG10p - Sparse Color Filter #1 White-Red-White-Green 10-bit packed
        - SCF1WRWG12 - Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked
        - SCF1WRWG12p - Sparse Color Filter #1 White-Red-White-Green 12-bit packed
        - SCF1WRWG14 - Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked
        - SCF1WRWG16 - Sparse Color Filter #1 White-Red-White-Green 16-bit
        - SCF1WRWG8 - Sparse Color Filter #1 White-Red-White-Green 8-bit
        - YCbCr10_CbYCr - YCbCr 4:4:4 10-bit unpacked
        - YCbCr10p_CbYCr - YCbCr 4:4:4 10-bit packed
        - YCbCr12_CbYCr - YCbCr 4:4:4 12-bit unpacked
        - YCbCr12p_CbYCr - YCbCr 4:4:4 12-bit packed
        - YCbCr2020_10_CbYCr - YCbCr 4:4:4 10-bit unpacked BT.2020
        - YCbCr2020_10p_CbYCr - YCbCr 4:4:4 10-bit packed BT.2020
        - YCbCr2020_12_CbYCr - YCbCr 4:4:4 12-bit unpacked BT.2020
        - YCbCr2020_12p_CbYCr - YCbCr 4:4:4 12-bit packed BT.2020
        - YCbCr2020_411_8_CbYYCrYY - YCbCr 4:1:1 8-bit BT.2020
        - YCbCr2020_422_10 - YCbCr 4:2:2 10-bit unpacked BT.2020
        - YCbCr2020_422_10_CbYCrY - YCbCr 4:2:2 10-bit unpacked BT.2020
        - YCbCr2020_422_10p - YCbCr 4:2:2 10-bit packed BT.2020
        - YCbCr2020_422_10p_CbYCrY - YCbCr 4:2:2 10-bit packed BT.2020
        - YCbCr2020_422_12 - YCbCr 4:2:2 12-bit unpacked BT.2020
        - YCbCr2020_422_12_CbYCrY - YCbCr 4:2:2 12-bit unpacked BT.2020
        - YCbCr2020_422_12p - YCbCr 4:2:2 12-bit packed BT.2020
        - YCbCr2020_422_12p_CbYCrY - YCbCr 4:2:2 12-bit packed BT.2020
        - YCbCr2020_422_8 - YCbCr 4:2:2 8-bit BT.2020
        - YCbCr2020_422_8_CbYCrY - YCbCr 4:2:2 8-bit BT.2020
        - YCbCr2020_8_CbYCr - YCbCr 4:4:4 8-bit BT.2020
        - YCbCr411_8 - YCbCr 4:1:1 8-bit
        - YCbCr411_8_CbYYCrYY - YCbCr 4:1:1 8-bit
        - YCbCr420_8_YY_CbCr_Semiplanar - YCbCr 4:2:0 8-bit YY/CbCr Semiplanar
        - YCbCr420_8_YY_CrCb_Semiplanar - YCbCr 4:2:0 8-bit YY/CrCb Semiplanar
        - YCbCr422_10 - YCbCr 4:2:2 10-bit unpacked
        - YCbCr422_10_CbYCrY - YCbCr 4:2:2 10-bit unpacked
        - YCbCr422_10p - YCbCr 4:2:2 10-bit packed
        - YCbCr422_10p_CbYCrY - YCbCr 4:2:2 10-bit packed
        - YCbCr422_12 - YCbCr 4:2:2 12-bit unpacked
        - YCbCr422_12_CbYCrY - YCbCr 4:2:2 12-bit unpacked
        - YCbCr422_12p - YCbCr 4:2:2 12-bit packed
        - YCbCr422_12p_CbYCrY - YCbCr 4:2:2 12-bit packed
        - YCbCr422_8 - YCbCr 4:2:2 8-bit
        - YCbCr422_8_CbYCrY - YCbCr 4:2:2 8-bit
        - YCbCr422_8_YY_CbCr_Semiplanar - YCbCr 4:2:2 8-bit YY/CbCr Semiplanar
        - YCbCr422_8_YY_CrCb_Semiplanar - YCbCr 4:2:2 8-bit YY/CrCb Semiplanar
        - YCbCr601_10_CbYCr - YCbCr 4:4:4 10-bit unpacked BT.601
        - YCbCr601_10p_CbYCr - YCbCr 4:4:4 10-bit packed BT.601
        - YCbCr601_12_CbYCr - YCbCr 4:4:4 12-bit unpacked BT.601
        - YCbCr601_12p_CbYCr - YCbCr 4:4:4 12-bit packed BT.601
        - YCbCr601_411_8_CbYYCrYY - YCbCr 4:1:1 8-bit BT.601
        - YCbCr601_422_10 - YCbCr 4:2:2 10-bit unpacked BT.601
        - YCbCr601_422_10_CbYCrY - YCbCr 4:2:2 10-bit unpacked BT.601
        - YCbCr601_422_10p - YCbCr 4:2:2 10-bit packed BT.601
        - YCbCr601_422_10p_CbYCrY - YCbCr 4:2:2 10-bit packed BT.601
        - YCbCr601_422_12 - YCbCr 4:2:2 12-bit unpacked BT.601
        - YCbCr601_422_12_CbYCrY - YCbCr 4:2:2 12-bit unpacked BT.601
        - YCbCr601_422_12p - YCbCr 4:2:2 12-bit packed BT.601
        - YCbCr601_422_12p_CbYCrY - YCbCr 4:2:2 12-bit packed BT.601
        - YCbCr601_422_8 - YCbCr 4:2:2 8-bit BT.601
        - YCbCr601_422_8_CbYCrY - YCbCr 4:2:2 8-bit BT.601
        - YCbCr601_8_CbYCr - YCbCr 4:4:4 8-bit BT.601
        - YCbCr709_10_CbYCr - YCbCr 4:4:4 10-bit unpacked BT.709
        - YCbCr709_10p_CbYCr - YCbCr 4:4:4 10-bit packed BT.709
        - YCbCr709_12_CbYCr - YCbCr 4:4:4 12-bit unpacked BT.709
        - YCbCr709_12p_CbYCr - YCbCr 4:4:4 12-bit packed BT.709
        - YCbCr709_411_8_CbYYCrYY - YCbCr 4:1:1 8-bit BT.709
        - YCbCr709_422_10 - YCbCr 4:2:2 10-bit unpacked BT.709
        - YCbCr709_422_10_CbYCrY - YCbCr 4:2:2 10-bit unpacked BT.709
        - YCbCr709_422_10p - YCbCr 4:2:2 10-bit packed BT.709
        - YCbCr709_422_10p_CbYCrY - YCbCr 4:2:2 10-bit packed BT.709
        - YCbCr709_422_12 - YCbCr 4:2:2 12-bit unpacked BT.709
        - YCbCr709_422_12_CbYCrY - YCbCr 4:2:2 12-bit unpacked BT.709
        - YCbCr709_422_12p - YCbCr 4:2:2 12-bit packed BT.709
        - YCbCr709_422_12p_CbYCrY - YCbCr 4:2:2 12-bit packed BT.709
        - YCbCr709_422_8 - YCbCr 4:2:2 8-bit BT.709
        - YCbCr709_422_8_CbYCrY - YCbCr 4:2:2 8-bit BT.709
        - YCbCr709_8_CbYCr - YCbCr 4:4:4 8-bit BT.709
        - YCbCr8 - YCbCr 4:4:4 8-bit
        - YCbCr8_CbYCr - YCbCr 4:4:4 8-bit
        - YUV411Packed - YUV 411 8 bit packed.
        - YUV411_8 - YUV 411 8 bit. AVAILABLE: Always.
        - YUV411_8_UYYVYY - YUV 4:1:1 8-bit
        - YUV422Packed - YUV 422 8 bit packed.
        - YUV422_8 - YUV 4:2:2 8-bit
        - YUV422_8_UYVY - YUV 4:2:2 8-bit
        - YUV444Packed - YUV 444 8 bit packed.
        - YUV8 - YUV 8 bit. AVAILABLE: Always.
        - YUV8_UYV - YUV 4:4:4 8-bit
        """
        return _neoapi.FeatureAccess_PixelFormat_get(self)

    __swig_setmethods__['PtpClockAccuracy'] = lambda self, value: self.PtpClockAccuracy.Set(value.value) if isinstance(value, BaseFeature) else self.PtpClockAccuracy.Set(value)
    @property
    def PtpClockAccuracy(self) -> "CPtpClockAccuracy":
        """
        Indicates the expected accuracy of the device PTP clock when it is the grandmaster, or in the event it becomes the grandmaster.
        Return: A CPtpClockAccuracy object to control the value.
        possible values:
        - AlternatePTPProfile - Alternate PTP Profile
        - GreaterThan10s - Greater Than 10s
        - Reserved - Reserved
        - Unknown - Unknown
        - Within100ms - Within 100ms
        - Within100ns - Within 100ns
        - Within100us - Within 100us
        - Within10ms - Within 10ms
        - Within10s - Within 10s
        - Within10us - Within 10us
        - Within1ms - Within 1ms
        - Within1s - Within 1s
        - Within1us - Within 1us
        - Within250ms - Within 250ms
        - Within250ns - Within 250ns
        - Within250us - Within 250us
        - Within25ms - Within 25ms
        - Within25ns - Within 25ns
        - Within25us - Within 25us
        - Within2p5ms - Within 2p 5ms
        - Within2p5us - Within 2p5us
        """
        return _neoapi.FeatureAccess_PtpClockAccuracy_get(self)

    __swig_setmethods__['PtpClockID'] = lambda self, value: self.PtpClockID.Set(value.value) if isinstance(value, BaseFeature) else self.PtpClockID.Set(value)
    @property
    def PtpClockID(self) -> "IntegerFeature":
        """
        Returns the latched clock ID of the PTP device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpClockID_get(self)

    __swig_setmethods__['PtpClockOffset'] = lambda self, value: self.PtpClockOffset.Set(value.value) if isinstance(value, BaseFeature) else self.PtpClockOffset.Set(value)
    @property
    def PtpClockOffset(self) -> "IntegerFeature":
        """
        Sets the offset which will be added or subtracted to the cameras internal timestamp.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpClockOffset_get(self)

    __swig_setmethods__['PtpClockOffsetMode'] = lambda self, value: self.PtpClockOffsetMode.Set(value.value) if isinstance(value, BaseFeature) else self.PtpClockOffsetMode.Set(value)
    @property
    def PtpClockOffsetMode(self) -> "CPtpClockOffsetMode":
        """
        Sets the mode to handle PtpClockOffset for command PtpClockOffsetSet.
        Return: A CPtpClockOffsetMode object to control the value.
        possible values:
        - Add - Timestamp Offset will be added to cameras internal timestamp.
        - Sub - Timestamp Offset will be subtracted from cameras internal timestamp.
        """
        return _neoapi.FeatureAccess_PtpClockOffsetMode_get(self)

    @property
    def PtpClockOffsetSet(self) -> "CommandFeature":
        """
        Sets PtpClockOffset active like described in PtpClockOffsetMode.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpClockOffsetSet_get(self)

    @property
    def PtpDataSetLatch(self) -> "CommandFeature":
        """
        Latches the current values from the device's PTP clock data set.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpDataSetLatch_get(self)

    __swig_setmethods__['PtpDriftOffset'] = lambda self, value: self.PtpDriftOffset.Set(value.value) if isinstance(value, BaseFeature) else self.PtpDriftOffset.Set(value)
    @property
    def PtpDriftOffset(self) -> "IntegerFeature":
        """
        Sets the offset which will be added or subtracted to the cameras internal timestamp increment.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpDriftOffset_get(self)

    __swig_setmethods__['PtpDriftOffsetMode'] = lambda self, value: self.PtpDriftOffsetMode.Set(value.value) if isinstance(value, BaseFeature) else self.PtpDriftOffsetMode.Set(value)
    @property
    def PtpDriftOffsetMode(self) -> "CPtpDriftOffsetMode":
        """
        Sets the mode to handle PtpDriftOffset for command PtpDriftOffsetSet.
        Return: A CPtpDriftOffsetMode object to control the value.
        possible values:
        - Add - Drift Offset will be added to cameras internal timestamp increment.
        - Sub - Drift Offset will be subtracted from cameras internal timestamp increment.
        """
        return _neoapi.FeatureAccess_PtpDriftOffsetMode_get(self)

    @property
    def PtpDriftOffsetSet(self) -> "CommandFeature":
        """
        Sets PtpDriftOffset active like described in PtpDriftOffsetMode.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpDriftOffsetSet_get(self)

    __swig_setmethods__['PtpEnable'] = lambda self, value: self.PtpEnable.Set(value.value) if isinstance(value, BaseFeature) else self.PtpEnable.Set(value)
    @property
    def PtpEnable(self) -> "BoolFeature":
        """
        Enables the Precision Time Protocol (PTP).
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpEnable_get(self)

    __swig_setmethods__['PtpGrandmasterClockID'] = lambda self, value: self.PtpGrandmasterClockID.Set(value.value) if isinstance(value, BaseFeature) else self.PtpGrandmasterClockID.Set(value)
    @property
    def PtpGrandmasterClockID(self) -> "IntegerFeature":
        """
        Returns the latched grandmaster clock ID of the PTP device. The grandmaster clock ID is the clock ID of the current grandmaster clock.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpGrandmasterClockID_get(self)

    __swig_setmethods__['PtpKi'] = lambda self, value: self.PtpKi.Set(value.value) if isinstance(value, BaseFeature) else self.PtpKi.Set(value)
    @property
    def PtpKi(self) -> "DoubleFeature":
        """
        Sets ki value of servos pi controller if PtpUseControllerTestSettings = True.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpKi_get(self)

    __swig_setmethods__['PtpKp'] = lambda self, value: self.PtpKp.Set(value.value) if isinstance(value, BaseFeature) else self.PtpKp.Set(value)
    @property
    def PtpKp(self) -> "DoubleFeature":
        """
        Sets kp value of servos pi controller if PtpUseControllerTestSettings = True.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpKp_get(self)

    __swig_setmethods__['PtpMode'] = lambda self, value: self.PtpMode.Set(value.value) if isinstance(value, BaseFeature) else self.PtpMode.Set(value)
    @property
    def PtpMode(self) -> "CPtpMode":
        """
        Selects the PTP clock type the device will act as.
        Return: A CPtpMode object to control the value.
        possible values:
        - Auto - The device uses the IEEE 1588 best master clock algorithm to determine which device is master, and which devices are slaves.
        - Slave - The clock of the device will act as a PTP slave only to align with a master device clock.
        """
        return _neoapi.FeatureAccess_PtpMode_get(self)

    __swig_setmethods__['PtpOffsetFromMaster'] = lambda self, value: self.PtpOffsetFromMaster.Set(value.value) if isinstance(value, BaseFeature) else self.PtpOffsetFromMaster.Set(value)
    @property
    def PtpOffsetFromMaster(self) -> "IntegerFeature":
        """
        Returns the latched offset from the PTP master clock in nanoseconds.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpOffsetFromMaster_get(self)

    __swig_setmethods__['PtpParentClockID'] = lambda self, value: self.PtpParentClockID.Set(value.value) if isinstance(value, BaseFeature) else self.PtpParentClockID.Set(value)
    @property
    def PtpParentClockID(self) -> "IntegerFeature":
        """
        Returns the latched parent clock ID of the PTP device. The parent clock ID is the clock ID of the current master clock.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpParentClockID_get(self)

    __swig_setmethods__['PtpServoStatus'] = lambda self, value: self.PtpServoStatus.Set(value.value) if isinstance(value, BaseFeature) else self.PtpServoStatus.Set(value)
    @property
    def PtpServoStatus(self) -> "CPtpServoStatus":
        """
        Returns the latched state of the clock servo. When the servo is in a locked state, the value returned is 'Locked'. When the servo is in a non-locked state, a device-specific value can be returned to give specific information. If no device-specific value is available to describe the current state of the clock servo, the value should be 'Unknown'.
        Return: A CPtpServoStatus object to control the value.
        possible values:
        - DeviceSpecific - Device - Specific
        - Locked - Locked
        - Unknown - Unknown
        """
        return _neoapi.FeatureAccess_PtpServoStatus_get(self)

    __swig_setmethods__['PtpServoStatusThreshold'] = lambda self, value: self.PtpServoStatusThreshold.Set(value.value) if isinstance(value, BaseFeature) else self.PtpServoStatusThreshold.Set(value)
    @property
    def PtpServoStatusThreshold(self) -> "IntegerFeature":
        """
        Sets the threshold of time difference to Ptp Master Clock for transition PtpServoStatus Unknown to Locked.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpServoStatusThreshold_get(self)

    __swig_setmethods__['PtpStatus'] = lambda self, value: self.PtpStatus.Set(value.value) if isinstance(value, BaseFeature) else self.PtpStatus.Set(value)
    @property
    def PtpStatus(self) -> "CPtpStatus":
        """
        Returns the latched state of the PTP clock.
        Return: A CPtpStatus object to control the value.
        possible values:
        - Disabled - Disabled
        - Faulty - Faulty
        - Initializing - Initializing
        - Listening - Listening
        - Master - Master
        - Passive - Passive
        - PreMaster - Pre Master
        - Slave - Slave
        - Uncalibrated - Uncalibrated
        """
        return _neoapi.FeatureAccess_PtpStatus_get(self)

    __swig_setmethods__['PtpSyncMessageInterval'] = lambda self, value: self.PtpSyncMessageInterval.Set(value.value) if isinstance(value, BaseFeature) else self.PtpSyncMessageInterval.Set(value)
    @property
    def PtpSyncMessageInterval(self) -> "DoubleFeature":
        """
        Returns the latched sync message interval from the PTP master clock in milliseconds.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpSyncMessageInterval_get(self)

    __swig_setmethods__['PtpSyncMessageIntervalStatus'] = lambda self, value: self.PtpSyncMessageIntervalStatus.Set(value.value) if isinstance(value, BaseFeature) else self.PtpSyncMessageIntervalStatus.Set(value)
    @property
    def PtpSyncMessageIntervalStatus(self) -> "CPtpSyncMessageIntervalStatus":
        """
        Returns if the latched sync message interval from the PTP master clock is supported by the device. An unsupported sync message interval may result in PtpServoStatus instability.
        Return: A CPtpSyncMessageIntervalStatus object to control the value.
        possible values:
        - Invalid - Sync message interval is not valid. This may result in PtpServoStatus instability.
        - Valid - Sync message interval is valid and supported by the device.
        """
        return _neoapi.FeatureAccess_PtpSyncMessageIntervalStatus_get(self)

    __swig_setmethods__['PtpTimestampOffset'] = lambda self, value: self.PtpTimestampOffset.Set(value.value) if isinstance(value, BaseFeature) else self.PtpTimestampOffset.Set(value)
    @property
    def PtpTimestampOffset(self) -> "IntegerFeature":
        """
        Sets the offset which will be added or subtracted to the ptp ethernet Rx and/or Tx timestamps.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpTimestampOffset_get(self)

    __swig_setmethods__['PtpTimestampOffsetMode'] = lambda self, value: self.PtpTimestampOffsetMode.Set(value.value) if isinstance(value, BaseFeature) else self.PtpTimestampOffsetMode.Set(value)
    @property
    def PtpTimestampOffsetMode(self) -> "CPtpTimestampOffsetMode":
        """
        Sets the mode to handle PtpTimestampOffset for command PtpTimestampOffsetSet.
        Return: A CPtpTimestampOffsetMode object to control the value.
        possible values:
        - RxAndTxOffset - Timestamp Offset will be used for both Tx and Rx.
        - RxOffset - Timestamp Offset will be used for Rx only.
        - TxOffset - Timestamp Offset will be used for Tx only.
        """
        return _neoapi.FeatureAccess_PtpTimestampOffsetMode_get(self)

    @property
    def PtpTimestampOffsetSet(self) -> "CommandFeature":
        """
        Sets PtpTimestampOffset active like described in PtpTimestampOffsetMode.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpTimestampOffsetSet_get(self)

    __swig_setmethods__['PtpUseControllerTestSettings'] = lambda self, value: self.PtpUseControllerTestSettings.Set(value.value) if isinstance(value, BaseFeature) else self.PtpUseControllerTestSettings.Set(value)
    @property
    def PtpUseControllerTestSettings(self) -> "BoolFeature":
        """
        Uses PtpKp and PtpKi as pi controller values.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_PtpUseControllerTestSettings_get(self)

    __swig_setmethods__['ReadOutBuffering'] = lambda self, value: self.ReadOutBuffering.Set(value.value) if isinstance(value, BaseFeature) else self.ReadOutBuffering.Set(value)
    @property
    def ReadOutBuffering(self) -> "CReadOutBuffering":
        """
        Selects the number of image buffers filled with data of sensor output. If all buffers full the oldest buffer will be overwritten.
        Return: A CReadOutBuffering object to control the value.
        possible values:
        - Buffered - Uses 4 buffers.
        - BufferedImages16 - Uses 16 buffers.
        - BufferedImages8 - Uses 8 buffers.
        - Live - Uses 2 buffers.
        """
        return _neoapi.FeatureAccess_ReadOutBuffering_get(self)

    __swig_setmethods__['ReadOutTime'] = lambda self, value: self.ReadOutTime.Set(value.value) if isinstance(value, BaseFeature) else self.ReadOutTime.Set(value)
    @property
    def ReadOutTime(self) -> "IntegerFeature":
        """
        Returns the Readout Time in us for current format settings.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ReadOutTime_get(self)

    __swig_setmethods__['ReadoutMode'] = lambda self, value: self.ReadoutMode.Set(value.value) if isinstance(value, BaseFeature) else self.ReadoutMode.Set(value)
    @property
    def ReadoutMode(self) -> "CReadoutMode":
        """
        Specifies the operation mode of the readout for the acquisition.
        Return: A CReadoutMode object to control the value.
        possible values:
        - Overlapped - Overlapped Readout.
        - Sequential - Sequential Readout.
        """
        return _neoapi.FeatureAccess_ReadoutMode_get(self)

    __swig_setmethods__['RegionAcquisitionMode'] = lambda self, value: self.RegionAcquisitionMode.Set(value.value) if isinstance(value, BaseFeature) else self.RegionAcquisitionMode.Set(value)
    @property
    def RegionAcquisitionMode(self) -> "CRegionAcquisitionMode":
        """
        Returns the acquisition mode of the regions.
        Return: A CRegionAcquisitionMode object to control the value.
        possible values:
        - Memory - Regions acquisition is in memory.
        - Sensor - Regions acquisition is in sensor.
        """
        return _neoapi.FeatureAccess_RegionAcquisitionMode_get(self)

    __swig_setmethods__['RegionConfigurationMode'] = lambda self, value: self.RegionConfigurationMode.Set(value.value) if isinstance(value, BaseFeature) else self.RegionConfigurationMode.Set(value)
    @property
    def RegionConfigurationMode(self) -> "CRegionConfigurationMode":
        """
        Returns the configuration mode of the regions.
        Return: A CRegionConfigurationMode object to control the value.
        possible values:
        - NonOverlapping - Regions are not allowed to be overlapped.
        - Overlapping - Region can be overlapped.
        """
        return _neoapi.FeatureAccess_RegionConfigurationMode_get(self)

    __swig_setmethods__['RegionMode'] = lambda self, value: self.RegionMode.Set(value.value) if isinstance(value, BaseFeature) else self.RegionMode.Set(value)
    @property
    def RegionMode(self) -> "CRegionMode":
        """
        Controls if the selected Region of interest is active and streaming.
        Return: A CRegionMode object to control the value.
        possible values:
        - Off - Disable the usage of the Region.
        - On - Enable the usage of the Region.
        """
        return _neoapi.FeatureAccess_RegionMode_get(self)

    __swig_setmethods__['RegionSelector'] = lambda self, value: self.RegionSelector.Set(value.value) if isinstance(value, BaseFeature) else self.RegionSelector.Set(value)
    @property
    def RegionSelector(self) -> "CRegionSelector":
        """
        Selects the Region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
        Return: A CRegionSelector object to control the value.
        possible values:
        - All - Selected features will control all the regions at the same time.
        - Region0 - Selected feature will control the region 0.
        - Region1 - Selected feature will control the region 1.
        - Region2 - Selected feature will control the region 2.
        - Region3 - Selected feature will control the region 3.
        - Region4 - Selected feature will control the region 4.
        - Region5 - Selected feature will control the region 5.
        - Region6 - Selected feature will control the region 6.
        - Region7 - Selected feature will control the region 7.
        - Scan3dExtraction0 - Selected feature will control the Scan3dExtraction0 output Region.
        - Scan3dExtraction1 - Selected feature will control the Scan3dExtraction1 output Region.
        - Scan3dExtraction2 - Selected feature will control the Scan3dExtraction2 output Region.
        """
        return _neoapi.FeatureAccess_RegionSelector_get(self)

    __swig_setmethods__['RegionTransferMode'] = lambda self, value: self.RegionTransferMode.Set(value.value) if isinstance(value, BaseFeature) else self.RegionTransferMode.Set(value)
    @property
    def RegionTransferMode(self) -> "CRegionTransferMode":
        """
        Returns the transfer mode of the regions.
        Return: A CRegionTransferMode object to control the value.
        possible values:
        - SeparateImages - Each region is transfer as a separate image.
        - StackedImage - All regions are transfer as one stacked image.
        """
        return _neoapi.FeatureAccess_RegionTransferMode_get(self)

    __swig_setmethods__['RegionVersion'] = lambda self, value: self.RegionVersion.Set(value.value) if isinstance(value, BaseFeature) else self.RegionVersion.Set(value)
    @property
    def RegionVersion(self) -> "StringFeature":
        """
        Returns the Version of Multi ROI implementation.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RegionVersion_get(self)

    __swig_setmethods__['ReverseX'] = lambda self, value: self.ReverseX.Set(value.value) if isinstance(value, BaseFeature) else self.ReverseX.Set(value)
    @property
    def ReverseX(self) -> "BoolFeature":
        """
        Flip horizontally the image sent by the device. The Region of interest is applied after the flipping.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ReverseX_get(self)

    __swig_setmethods__['ReverseY'] = lambda self, value: self.ReverseY.Set(value.value) if isinstance(value, BaseFeature) else self.ReverseY.Set(value)
    @property
    def ReverseY(self) -> "BoolFeature":
        """
        Flip vertically the image sent by the device. The Region of interest is applied after the flipping.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ReverseY_get(self)

    __swig_setmethods__['RxAcknowledgeLength'] = lambda self, value: self.RxAcknowledgeLength.Set(value.value) if isinstance(value, BaseFeature) else self.RxAcknowledgeLength.Set(value)
    @property
    def RxAcknowledgeLength(self) -> "IntegerFeature":
        """
        Controls the length of a serial acknowledge message from RS232 to the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxAcknowledgeLength_get(self)

    __swig_setmethods__['RxDiscardedMessages'] = lambda self, value: self.RxDiscardedMessages.Set(value.value) if isinstance(value, BaseFeature) else self.RxDiscardedMessages.Set(value)
    @property
    def RxDiscardedMessages(self) -> "IntegerFeature":
        """
        Returns the number of discarded messages in receiving direction.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxDiscardedMessages_get(self)

    @property
    def RxFiFo(self) -> "RegisterFeature":
        """
        Returns the received data if available.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxFiFo_get(self)

    __swig_setmethods__['RxFiFoMessageLength'] = lambda self, value: self.RxFiFoMessageLength.Set(value.value) if isinstance(value, BaseFeature) else self.RxFiFoMessageLength.Set(value)
    @property
    def RxFiFoMessageLength(self) -> "IntegerFeature":
        """
        Returns the length of the current received message in the RS232-Rx FIFO and 0 if no message was received.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxFiFoMessageLength_get(self)

    __swig_setmethods__['RxRetryCount'] = lambda self, value: self.RxRetryCount.Set(value.value) if isinstance(value, BaseFeature) else self.RxRetryCount.Set(value)
    @property
    def RxRetryCount(self) -> "IntegerFeature":
        """
        Sets the number of attempts to receive a message if direct receiving was not successful.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxRetryCount_get(self)

    __swig_setmethods__['RxSynchronizationDelay'] = lambda self, value: self.RxSynchronizationDelay.Set(value.value) if isinstance(value, BaseFeature) else self.RxSynchronizationDelay.Set(value)
    @property
    def RxSynchronizationDelay(self) -> "IntegerFeature":
        """
        Sets the maximum delay between to received bytes for recognition of message ends in bit times.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxSynchronizationDelay_get(self)

    __swig_setmethods__['RxSynchronizationDelayNormalized'] = lambda self, value: self.RxSynchronizationDelayNormalized.Set(value.value) if isinstance(value, BaseFeature) else self.RxSynchronizationDelayNormalized.Set(value)
    @property
    def RxSynchronizationDelayNormalized(self) -> "DoubleFeature":
        """
        Sets the maximum delay between to received bytes for recognition of message ends in us.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_RxSynchronizationDelayNormalized_get(self)

    __swig_setmethods__['SIControl'] = lambda self, value: self.SIControl.Set(value.value) if isinstance(value, BaseFeature) else self.SIControl.Set(value)
    @property
    def SIControl(self) -> "CSIControl":
        """
        Controls the streaming operation.
        Return: A CSIControl object to control the value.
        possible values:
        - StreamDisabled - Stream is disabled.
        - StreamEnabled - Stream is enabled.
        """
        return _neoapi.FeatureAccess_SIControl_get(self)

    __swig_setmethods__['SIPayloadFinalTransfer1Size'] = lambda self, value: self.SIPayloadFinalTransfer1Size.Set(value.value) if isinstance(value, BaseFeature) else self.SIPayloadFinalTransfer1Size.Set(value)
    @property
    def SIPayloadFinalTransfer1Size(self) -> "IntegerFeature":
        """
        Returns the size of the first final Payload Transfer.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SIPayloadFinalTransfer1Size_get(self)

    __swig_setmethods__['SIPayloadFinalTransfer2Size'] = lambda self, value: self.SIPayloadFinalTransfer2Size.Set(value.value) if isinstance(value, BaseFeature) else self.SIPayloadFinalTransfer2Size.Set(value)
    @property
    def SIPayloadFinalTransfer2Size(self) -> "IntegerFeature":
        """
        Returns the size of the second final Payload Transfer.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SIPayloadFinalTransfer2Size_get(self)

    __swig_setmethods__['SIPayloadTransferCount'] = lambda self, value: self.SIPayloadTransferCount.Set(value.value) if isinstance(value, BaseFeature) else self.SIPayloadTransferCount.Set(value)
    @property
    def SIPayloadTransferCount(self) -> "IntegerFeature":
        """
        Returns the expected number of Payload Transfers.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SIPayloadTransferCount_get(self)

    __swig_setmethods__['SIPayloadTransferSize'] = lambda self, value: self.SIPayloadTransferSize.Set(value.value) if isinstance(value, BaseFeature) else self.SIPayloadTransferSize.Set(value)
    @property
    def SIPayloadTransferSize(self) -> "IntegerFeature":
        """
        Returns the expected size of a single Payload Transfer.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SIPayloadTransferSize_get(self)

    __swig_setmethods__['Sensor1XCutLength'] = lambda self, value: self.Sensor1XCutLength.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor1XCutLength.Set(value)
    @property
    def Sensor1XCutLength(self) -> "IntegerFeature":
        """
        The maximum number of pixels per line for sensor 1.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor1XCutLength_get(self)

    __swig_setmethods__['Sensor1XCutStart'] = lambda self, value: self.Sensor1XCutStart.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor1XCutStart.Set(value)
    @property
    def Sensor1XCutStart(self) -> "IntegerFeature":
        """
        The start point of pixel 0 on a line for sensor 1. It is programmed during sensor adjustment.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor1XCutStart_get(self)

    __swig_setmethods__['Sensor1YCutLength'] = lambda self, value: self.Sensor1YCutLength.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor1YCutLength.Set(value)
    @property
    def Sensor1YCutLength(self) -> "IntegerFeature":
        """
        The maximum number of lines per image for sensor 1.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor1YCutLength_get(self)

    __swig_setmethods__['Sensor1YCutStart'] = lambda self, value: self.Sensor1YCutStart.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor1YCutStart.Set(value)
    @property
    def Sensor1YCutStart(self) -> "IntegerFeature":
        """
        The start point of line 0 for in the image for sensor 1. It is programmed during sensor adjustment.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor1YCutStart_get(self)

    __swig_setmethods__['Sensor2XCutLength'] = lambda self, value: self.Sensor2XCutLength.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor2XCutLength.Set(value)
    @property
    def Sensor2XCutLength(self) -> "IntegerFeature":
        """
        The maximum number of pixels per line for sensor 2.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor2XCutLength_get(self)

    __swig_setmethods__['Sensor2XCutStart'] = lambda self, value: self.Sensor2XCutStart.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor2XCutStart.Set(value)
    @property
    def Sensor2XCutStart(self) -> "IntegerFeature":
        """
        The start point of pixel 0 on a line for sensor 2. It is programmed during sensor adjustment.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor2XCutStart_get(self)

    __swig_setmethods__['Sensor2YCutLength'] = lambda self, value: self.Sensor2YCutLength.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor2YCutLength.Set(value)
    @property
    def Sensor2YCutLength(self) -> "IntegerFeature":
        """
        The maximum number of lines per image for sensor 2.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor2YCutLength_get(self)

    __swig_setmethods__['Sensor2YCutStart'] = lambda self, value: self.Sensor2YCutStart.Set(value.value) if isinstance(value, BaseFeature) else self.Sensor2YCutStart.Set(value)
    @property
    def Sensor2YCutStart(self) -> "IntegerFeature":
        """
        The start point of line 0 for in the image for sensor 2. It is programmed during sensor adjustment.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Sensor2YCutStart_get(self)

    __swig_setmethods__['SensorADDigitization'] = lambda self, value: self.SensorADDigitization.Set(value.value) if isinstance(value, BaseFeature) else self.SensorADDigitization.Set(value)
    @property
    def SensorADDigitization(self) -> "CSensorADDigitization":
        """
        Controls the sensors AD digitization in bits per pixels.
        Return: A CSensorADDigitization object to control the value.
        possible values:
        - Bpp10 - The sensors AD digitization is 10 bit per pixel.
        - Bpp12 - The sensors AD digitization is 12 bit per pixel.
        - Bpp8 - The sensors AD digitization is 8 bit per pixel.
        """
        return _neoapi.FeatureAccess_SensorADDigitization_get(self)

    __swig_setmethods__['SensorDigitizationTaps'] = lambda self, value: self.SensorDigitizationTaps.Set(value.value) if isinstance(value, BaseFeature) else self.SensorDigitizationTaps.Set(value)
    @property
    def SensorDigitizationTaps(self) -> "CSensorDigitizationTaps":
        """
        Number of digitized samples outputted simultaneously by the camera A/D conversion stage.
        Return: A CSensorDigitizationTaps object to control the value.
        possible values:
        - Eight - 8 taps.
        - Four - 4 taps.
        - One - 1 tap.
        - Ten - 10 taps.
        - Three - 3 taps.
        - Two - 2 taps.
        """
        return _neoapi.FeatureAccess_SensorDigitizationTaps_get(self)

    __swig_setmethods__['SensorEffectCorrection'] = lambda self, value: self.SensorEffectCorrection.Set(value.value) if isinstance(value, BaseFeature) else self.SensorEffectCorrection.Set(value)
    @property
    def SensorEffectCorrection(self) -> "BoolFeature":
        """
        Enables the Sensor Effect Correction.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorEffectCorrection_get(self)

    __swig_setmethods__['SensorFiFoOverflowCounter'] = lambda self, value: self.SensorFiFoOverflowCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SensorFiFoOverflowCounter.Set(value)
    @property
    def SensorFiFoOverflowCounter(self) -> "IntegerFeature":
        """
        Returns the number of lost frames because of sensor FIFO overflow.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorFiFoOverflowCounter_get(self)

    @property
    def SensorFiFoOverflowCounterReset(self) -> "CommandFeature":
        """
        Resets the Sensor FIFO overflow counter to 0.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorFiFoOverflowCounterReset_get(self)

    __swig_setmethods__['SensorHeight'] = lambda self, value: self.SensorHeight.Set(value.value) if isinstance(value, BaseFeature) else self.SensorHeight.Set(value)
    @property
    def SensorHeight(self) -> "IntegerFeature":
        """
        Effective height of the sensor in pixels.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorHeight_get(self)

    __swig_setmethods__['SensorName'] = lambda self, value: self.SensorName.Set(value.value) if isinstance(value, BaseFeature) else self.SensorName.Set(value)
    @property
    def SensorName(self) -> "StringFeature":
        """
        Product name of the imaging Sensor.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorName_get(self)

    __swig_setmethods__['SensorPixelHeight'] = lambda self, value: self.SensorPixelHeight.Set(value.value) if isinstance(value, BaseFeature) else self.SensorPixelHeight.Set(value)
    @property
    def SensorPixelHeight(self) -> "DoubleFeature":
        """
        Physical size (pitch) in the y direction of a photo sensitive pixel unit.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorPixelHeight_get(self)

    __swig_setmethods__['SensorPixelWidth'] = lambda self, value: self.SensorPixelWidth.Set(value.value) if isinstance(value, BaseFeature) else self.SensorPixelWidth.Set(value)
    @property
    def SensorPixelWidth(self) -> "DoubleFeature":
        """
        Physical size (pitch) in the x direction of a photo sensitive pixel unit.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorPixelWidth_get(self)

    __swig_setmethods__['SensorShutterMode'] = lambda self, value: self.SensorShutterMode.Set(value.value) if isinstance(value, BaseFeature) else self.SensorShutterMode.Set(value)
    @property
    def SensorShutterMode(self) -> "CSensorShutterMode":
        """
        Specifies the shutter mode of the device.
        Return: A CSensorShutterMode object to control the value.
        possible values:
        - Global - The shutter opens and closes at the same time for all pixels. All the pixels are exposed for the same length of time at the same time.
        - GlobalReset - The shutter opens at the same time for all pixels but ends in a sequential manner. The pixels are exposed for different lengths of time.
        - Rolling - The shutter opens and closes sequentially for groups (typically lines) of pixels. All the pixels are exposed for the same length of time but not at the same time.
        """
        return _neoapi.FeatureAccess_SensorShutterMode_get(self)

    __swig_setmethods__['SensorTaps'] = lambda self, value: self.SensorTaps.Set(value.value) if isinstance(value, BaseFeature) else self.SensorTaps.Set(value)
    @property
    def SensorTaps(self) -> "CSensorTaps":
        """
        Number of taps of the camera sensor.
        Return: A CSensorTaps object to control the value.
        possible values:
        - Eight - 8 taps.
        - Four - 4 taps.
        - One - 1 tap.
        - Ten - 10 taps.
        - Three - 3 taps.
        - Two - 2 taps.
        """
        return _neoapi.FeatureAccess_SensorTaps_get(self)

    __swig_setmethods__['SensorWidth'] = lambda self, value: self.SensorWidth.Set(value.value) if isinstance(value, BaseFeature) else self.SensorWidth.Set(value)
    @property
    def SensorWidth(self) -> "IntegerFeature":
        """
        Effective width of the sensor in pixels.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SensorWidth_get(self)

    __swig_setmethods__['SequencerConfigurationMode'] = lambda self, value: self.SequencerConfigurationMode.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerConfigurationMode.Set(value)
    @property
    def SequencerConfigurationMode(self) -> "CSequencerConfigurationMode":
        """
        Controls if the sequencer configuration mode is active.
        Return: A CSequencerConfigurationMode object to control the value.
        possible values:
        - Off - Disables the sequencer configuration mode.
        - On - Enables the sequencer configuration mode.
        """
        return _neoapi.FeatureAccess_SequencerConfigurationMode_get(self)

    __swig_setmethods__['SequencerFeatureEnable'] = lambda self, value: self.SequencerFeatureEnable.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerFeatureEnable.Set(value)
    @property
    def SequencerFeatureEnable(self) -> "BoolFeature":
        """
        Enables the selected feature and make it active in all the sequencer sets.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerFeatureEnable_get(self)

    __swig_setmethods__['SequencerFeatureSelector'] = lambda self, value: self.SequencerFeatureSelector.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerFeatureSelector.Set(value)
    @property
    def SequencerFeatureSelector(self) -> "CSequencerFeatureSelector":
        """
        Selects which sequencer features to control.
        Return: A CSequencerFeatureSelector object to control the value.
        possible values:
        - CounterDuration - Sets the duration (or number of events) before the CounterEnd event is generated. AVAILABLE: Always
        - CounterEventActivation - Selects the Activation mode Event Source signal. AVAILABLE: Always
        - CounterEventSource - Select the events that will be the source to increment the Counter. AVAILABLE: Always
        - CounterResetActivation - Selects the Activation mode of the Counter Reset Source signal. AVAILABLE: Always
        - CounterResetSource - Selects the signals that will be the source to reset the Counter. AVAILABLE: Always
        - DeviceSpecific - Device - Specific
        - ExposureMode - Sets the operation mode of the Exposure (or shutter). AVAILABLE: Always
        - ExposureTime - Returns the exposure time used to capture the image. AVAILABLE: Always
        - Gain - Controls the selected gain as an absolute physical value. AVAILABLE: Always
        - Height - Height of the image provided by the device (in pixels). AVAILABLE: Always
        - OffsetX - Horizontal offset from the origin to the region of interest (in pixels). AVAILABLE: Always
        - OffsetY - Vertical offset from the origin to the region of interest (in pixels). AVAILABLE: Always
        - TriggerMode - Controls if the selected trigger is active. AVAILABLE: Always
        - UserOutputValue - Sets the value of the bit selected by UserOutputSelector. AVAILABLE: Always
        - UserOutputValueAll - It is subject to the UserOutputValueAllMask. AVAILABLE: Always
        - Width - Width of the image provided by the device (in pixels). AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_SequencerFeatureSelector_get(self)

    __swig_setmethods__['SequencerMode'] = lambda self, value: self.SequencerMode.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerMode.Set(value)
    @property
    def SequencerMode(self) -> "CSequencerMode":
        """
        Controls if the sequencer mechanism is active.
        Return: A CSequencerMode object to control the value.
        possible values:
        - Off - Disables the sequencer.
        - On - Enables the sequencer.
        """
        return _neoapi.FeatureAccess_SequencerMode_get(self)

    __swig_setmethods__['SequencerPathSelector'] = lambda self, value: self.SequencerPathSelector.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerPathSelector.Set(value)
    @property
    def SequencerPathSelector(self) -> "IntegerFeature":
        """
        Selects to which branching path further path settings applies.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerPathSelector_get(self)

    __swig_setmethods__['SequencerSetActive'] = lambda self, value: self.SequencerSetActive.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerSetActive.Set(value)
    @property
    def SequencerSetActive(self) -> "IntegerFeature":
        """
        Contains the currently active sequencer set.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetActive_get(self)

    @property
    def SequencerSetLoad(self) -> "CommandFeature":
        """
        Loads the sequencer set selected by SequencerSetSelector in the device. Even if SequencerMode is off, this will change the device state to the configuration of the selected set.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetLoad_get(self)

    __swig_setmethods__['SequencerSetNext'] = lambda self, value: self.SequencerSetNext.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerSetNext.Set(value)
    @property
    def SequencerSetNext(self) -> "IntegerFeature":
        """
        Specifies the next sequencer set.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetNext_get(self)

    @property
    def SequencerSetSave(self) -> "CommandFeature":
        """
        Saves the current device state to the sequencer set selected by the SequencerSetSelector.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetSave_get(self)

    __swig_setmethods__['SequencerSetSelector'] = lambda self, value: self.SequencerSetSelector.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerSetSelector.Set(value)
    @property
    def SequencerSetSelector(self) -> "IntegerFeature":
        """
        Selects the sequencer set to which further feature settings applies.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetSelector_get(self)

    __swig_setmethods__['SequencerSetStart'] = lambda self, value: self.SequencerSetStart.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerSetStart.Set(value)
    @property
    def SequencerSetStart(self) -> "IntegerFeature":
        """
        Sets the initial/start sequencer set, which is the first set used within a sequencer.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SequencerSetStart_get(self)

    __swig_setmethods__['SequencerTriggerActivation'] = lambda self, value: self.SequencerTriggerActivation.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerTriggerActivation.Set(value)
    @property
    def SequencerTriggerActivation(self) -> "CSequencerTriggerActivation":
        """
        Specifies the activation mode of the sequencer trigger.
        Return: A CSequencerTriggerActivation object to control the value.
        possible values:
        - AnyEdge - Specifies that the trigger is considered valid on the falling or rising edge of the source signal.
        - FallingEdge - Specifies that the trigger is considered valid on the falling edge of the source signal.
        - LevelHigh - Specifies that the trigger is considered valid as long as the level of the source signal is high.
        - LevelLow - Specifies that the trigger is considered valid as long as the level of the source signal is low.
        - RisingEdge - Specifies that the trigger is considered valid on the rising edge of the source signal.
        """
        return _neoapi.FeatureAccess_SequencerTriggerActivation_get(self)

    __swig_setmethods__['SequencerTriggerSource'] = lambda self, value: self.SequencerTriggerSource.Set(value.value) if isinstance(value, BaseFeature) else self.SequencerTriggerSource.Set(value)
    @property
    def SequencerTriggerSource(self) -> "CSequencerTriggerSource":
        """
        Specifies the internal signal or physical input line to use as the sequencer trigger source.
        Return: A CSequencerTriggerSource object to control the value.
        possible values:
        - AcquisitionEnd - Starts with the reception of the Acquisition End.
        - AcquisitionStart - Starts with the reception of the Acquisition Start.
        - AcquisitionTrigger - Starts with the reception of the Acquisition Trigger.
        - AcquisitionTriggerMissed - Starts with the reception of the missed Acquisition Trigger.
        - Action0 - Starts with the assertion of the chosen action signal.
        - Action1 - Starts with the assertion of the chosen action signal.
        - Action2 - Starts with the assertion of the chosen action signal.
        - CC1 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC2 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC3 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC4 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - Counter0End - Starts with the reception of the Counter End.
        - Counter0Start - Starts with the reception of the Counter Start.
        - Counter1End - Starts with the reception of the Counter End.
        - Counter1Start - Starts with the reception of the Counter Start.
        - Counter2End - Starts with the reception of the Counter End.
        - Counter2Start - Starts with the reception of the Counter Start.
        - Encoder0 - Starts with the reception of the Encoder output signal.
        - Encoder1 - Starts with the reception of the Encoder output signal.
        - Encoder2 - Starts with the reception of the Encoder output signal.
        - ExposureActive - Starts with the reception of the Exposure Active. AVAILABLE: Always
        - ExposureEnd - Starts with the reception of the Exposure End.
        - ExposureStart - Starts with the reception of the Exposure Start.
        - FrameBurstEnd - Starts with the reception of the Frame Burst End.
        - FrameBurstStart - Starts with the reception of the Frame Burst Start.
        - FrameEnd - Starts with the reception of the Frame End.
        - FrameStart - Starts with the reception of the Frame Start.
        - FrameTrigger - Starts with the reception of the Frame Start Trigger.
        - FrameTriggerMissed - Starts with the reception of the missed Frame Trigger.
        - Line0 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - Line1 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - Line2 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - LinkTrigger0 - Starts with the reception of the chosen Link Trigger.
        - LinkTrigger1 - Starts with the reception of the chosen Link Trigger.
        - LinkTrigger2 - Starts with the reception of the chosen Link Trigger.
        - LogicBlock0 - Starts with the reception of the Logic Block output signal.
        - LogicBlock1 - Starts with the reception of the Logic Block output signal.
        - LogicBlock2 - Starts with the reception of the Logic Block output signal.
        - Off - Disables the sequencer trigger.
        - ReadOutActive - Starts with the reception of the Read Out Active. AVAILABLE: Always
        - SoftwareSignal0 - Starts on the reception of the Software Signal.
        - SoftwareSignal1 - Starts on the reception of the Software Signal.
        - SoftwareSignal2 - Starts on the reception of the Software Signal.
        - Timer0End - Starts with the reception of the Timer End.
        - Timer0Start - Starts with the reception of the Timer Start.
        - Timer1End - Starts with the reception of the Timer End.
        - Timer1Start - Starts with the reception of the Timer Start.
        - Timer2End - Starts with the reception of the Timer End.
        - Timer2Start - Starts with the reception of the Timer Start.
        - UserOutput0 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput1 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput2 - Specifies which User Output bit signal to use as internal source for the trigger.
        """
        return _neoapi.FeatureAccess_SequencerTriggerSource_get(self)

    @property
    def ShadingCalibrationStart(self) -> "CommandFeature":
        """
        Starts Shading Calibration.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingCalibrationStart_get(self)

    __swig_setmethods__['ShadingEnable'] = lambda self, value: self.ShadingEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingEnable.Set(value)
    @property
    def ShadingEnable(self) -> "BoolFeature":
        """
        Enables Shading Correction.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingEnable_get(self)

    __swig_setmethods__['ShadingMaxGain'] = lambda self, value: self.ShadingMaxGain.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingMaxGain.Set(value)
    @property
    def ShadingMaxGain(self) -> "IntegerFeature":
        """
        Returns the maximum gain for Shading.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingMaxGain_get(self)

    __swig_setmethods__['ShadingPortAddress'] = lambda self, value: self.ShadingPortAddress.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingPortAddress.Set(value)
    @property
    def ShadingPortAddress(self) -> "IntegerFeature":
        """
        Returns the Port Address for Shading as a hexadecimal value.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingPortAddress_get(self)

    __swig_setmethods__['ShadingSelector'] = lambda self, value: self.ShadingSelector.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingSelector.Set(value)
    @property
    def ShadingSelector(self) -> "CShadingSelector":
        """
        Selects the Shading Port Address.
        Return: A CShadingSelector object to control the value.
        possible values:
        - Pixel0 - The shading port address for pixel 0 is selected.
        - Pixel1 - The shading port address for pixel 1 is selected.
        """
        return _neoapi.FeatureAccess_ShadingSelector_get(self)

    __swig_setmethods__['ShadingXBorder'] = lambda self, value: self.ShadingXBorder.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingXBorder.Set(value)
    @property
    def ShadingXBorder(self) -> "IntegerFeature":
        """
        Returns the number of pixels as border at x direction.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingXBorder_get(self)

    __swig_setmethods__['ShadingYBorder'] = lambda self, value: self.ShadingYBorder.Set(value.value) if isinstance(value, BaseFeature) else self.ShadingYBorder.Set(value)
    @property
    def ShadingYBorder(self) -> "IntegerFeature":
        """
        Returns the number of pixels as border at y direction.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShadingYBorder_get(self)

    __swig_setmethods__['SharpeningEnable'] = lambda self, value: self.SharpeningEnable.Set(value.value) if isinstance(value, BaseFeature) else self.SharpeningEnable.Set(value)
    @property
    def SharpeningEnable(self) -> "BoolFeature":
        """
        Enables the Sharpening.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SharpeningEnable_get(self)

    __swig_setmethods__['SharpeningFactor'] = lambda self, value: self.SharpeningFactor.Set(value.value) if isinstance(value, BaseFeature) else self.SharpeningFactor.Set(value)
    @property
    def SharpeningFactor(self) -> "IntegerFeature":
        """
        Sets the factor for Sharpening.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SharpeningFactor_get(self)

    __swig_setmethods__['SharpeningMode'] = lambda self, value: self.SharpeningMode.Set(value.value) if isinstance(value, BaseFeature) else self.SharpeningMode.Set(value)
    @property
    def SharpeningMode(self) -> "CSharpeningMode":
        """
        Selects the Sharpening Mode.
        Return: A CSharpeningMode object to control the value.
        possible values:
        - ActiveNoiseReduction - Sharpening is enabled in active noise reduction mode
        - AdaptiveSharpening - Sharpening is enabled in adaptive sharpening mode.
        - GlobalSharpening - Sharpening is enabled in global sharpening mode.
        - Off - Sharpening is disabled.
        """
        return _neoapi.FeatureAccess_SharpeningMode_get(self)

    __swig_setmethods__['SharpeningSensitivityThreshold'] = lambda self, value: self.SharpeningSensitivityThreshold.Set(value.value) if isinstance(value, BaseFeature) else self.SharpeningSensitivityThreshold.Set(value)
    @property
    def SharpeningSensitivityThreshold(self) -> "IntegerFeature":
        """
        Sets the value of the Sharpening Sensitivity Threshold.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SharpeningSensitivityThreshold_get(self)

    __swig_setmethods__['SharpeningSensitvityThreshold'] = lambda self, value: self.SharpeningSensitvityThreshold.Set(value.value) if isinstance(value, BaseFeature) else self.SharpeningSensitvityThreshold.Set(value)
    @property
    def SharpeningSensitvityThreshold(self) -> "IntegerFeature":
        """
        Sets the value of the Sharpening Sensitivity Threshold.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SharpeningSensitvityThreshold_get(self)

    __swig_setmethods__['ShortExposureTimeEnable'] = lambda self, value: self.ShortExposureTimeEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ShortExposureTimeEnable.Set(value)
    @property
    def ShortExposureTimeEnable(self) -> "BoolFeature":
        """
        Controls if short exposure time should be supported. Note if this feature is enabled one cannot use the sequencer.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShortExposureTimeEnable_get(self)

    __swig_setmethods__['ShutterLineCorrectionEnable'] = lambda self, value: self.ShutterLineCorrectionEnable.Set(value.value) if isinstance(value, BaseFeature) else self.ShutterLineCorrectionEnable.Set(value)
    @property
    def ShutterLineCorrectionEnable(self) -> "BoolFeature":
        """
        Enables the correction of Shutter Line and Exposure Lines when set to True, disables it when set to False.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShutterLineCorrectionEnable_get(self)

    __swig_setmethods__['ShutterLineOffsetEven'] = lambda self, value: self.ShutterLineOffsetEven.Set(value.value) if isinstance(value, BaseFeature) else self.ShutterLineOffsetEven.Set(value)
    @property
    def ShutterLineOffsetEven(self) -> "IntegerFeature":
        """
        Sets the offset correction value that the camera applies to the even line in the "Shutter Line" region.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShutterLineOffsetEven_get(self)

    __swig_setmethods__['ShutterLineOffsetOdd'] = lambda self, value: self.ShutterLineOffsetOdd.Set(value.value) if isinstance(value, BaseFeature) else self.ShutterLineOffsetOdd.Set(value)
    @property
    def ShutterLineOffsetOdd(self) -> "IntegerFeature":
        """
        Sets the offset correction value that the camera applies to the odd line in the "Shutter Line" region.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_ShutterLineOffsetOdd_get(self)

    __swig_setmethods__['SourceCount'] = lambda self, value: self.SourceCount.Set(value.value) if isinstance(value, BaseFeature) else self.SourceCount.Set(value)
    @property
    def SourceCount(self) -> "IntegerFeature":
        """
        Controls or returns the number of sources supported by the device.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SourceCount_get(self)

    __swig_setmethods__['SourceID'] = lambda self, value: self.SourceID.Set(value.value) if isinstance(value, BaseFeature) else self.SourceID.Set(value)
    @property
    def SourceID(self) -> "CSourceID":
        """
        Returns a unique Identifier value that correspond to the selected Source.
        Return: A CSourceID object to control the value.
        possible values:
        - Sensor1 - Sesnor 1.
        - Sensor2 - Sensor 2.
        """
        return _neoapi.FeatureAccess_SourceID_get(self)

    __swig_setmethods__['SourceIDValue'] = lambda self, value: self.SourceIDValue.Set(value.value) if isinstance(value, BaseFeature) else self.SourceIDValue.Set(value)
    @property
    def SourceIDValue(self) -> "IntegerFeature":
        """
        Returns a unique Identifier value that correspond to the selected Source.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SourceIDValue_get(self)

    __swig_setmethods__['SourceSelector'] = lambda self, value: self.SourceSelector.Set(value.value) if isinstance(value, BaseFeature) else self.SourceSelector.Set(value)
    @property
    def SourceSelector(self) -> "CSourceSelector":
        """
        Selects the source to control.
        Return: A CSourceSelector object to control the value.
        possible values:
        - All - Selects all the data sources.
        - Source0 - Selects the data source 0.
        - Source1 - Selects the data source 1.
        - Source2 - Selects the data source 2.
        """
        return _neoapi.FeatureAccess_SourceSelector_get(self)

    __swig_setmethods__['SwitchMACAddressTableEntryIsValid'] = lambda self, value: self.SwitchMACAddressTableEntryIsValid.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchMACAddressTableEntryIsValid.Set(value)
    @property
    def SwitchMACAddressTableEntryIsValid(self) -> "BoolFeature":
        """
        Returns if the selected MAC address table entry is valid or not.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchMACAddressTableEntryIsValid_get(self)

    __swig_setmethods__['SwitchMACAddressTableEntryMACAddress'] = lambda self, value: self.SwitchMACAddressTableEntryMACAddress.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchMACAddressTableEntryMACAddress.Set(value)
    @property
    def SwitchMACAddressTableEntryMACAddress(self) -> "IntegerFeature":
        """
        Provides the MAC address of the selected MAC address table entry.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchMACAddressTableEntryMACAddress_get(self)

    __swig_setmethods__['SwitchMACAddressTableEntryPortNumber'] = lambda self, value: self.SwitchMACAddressTableEntryPortNumber.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchMACAddressTableEntryPortNumber.Set(value)
    @property
    def SwitchMACAddressTableEntryPortNumber(self) -> "IntegerFeature":
        """
        Provides the port number of the selected MAC address table entry.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchMACAddressTableEntryPortNumber_get(self)

    __swig_setmethods__['SwitchMACAddressTableEntrySelector'] = lambda self, value: self.SwitchMACAddressTableEntrySelector.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchMACAddressTableEntrySelector.Set(value)
    @property
    def SwitchMACAddressTableEntrySelector(self) -> "IntegerFeature":
        """
        Selects the MAC addresses table entry for the MAC address table entry related features.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchMACAddressTableEntrySelector_get(self)

    __swig_setmethods__['SwitchNumberOfMACAddresses'] = lambda self, value: self.SwitchNumberOfMACAddresses.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchNumberOfMACAddresses.Set(value)
    @property
    def SwitchNumberOfMACAddresses(self) -> "IntegerFeature":
        """
        Provides the number MAC addresses at switches MAC address table.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchNumberOfMACAddresses_get(self)

    __swig_setmethods__['SwitchNumberOfPorts'] = lambda self, value: self.SwitchNumberOfPorts.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchNumberOfPorts.Set(value)
    @property
    def SwitchNumberOfPorts(self) -> "IntegerFeature":
        """
        Provides the number of ports of the switch.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchNumberOfPorts_get(self)

    __swig_setmethods__['SwitchPortBroadcastValidCounter'] = lambda self, value: self.SwitchPortBroadcastValidCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortBroadcastValidCounter.Set(value)
    @property
    def SwitchPortBroadcastValidCounter(self) -> "IntegerFeature":
        """
        Returns the value of the broadcast valid counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortBroadcastValidCounter_get(self)

    __swig_setmethods__['SwitchPortBufferFullCounter'] = lambda self, value: self.SwitchPortBufferFullCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortBufferFullCounter.Set(value)
    @property
    def SwitchPortBufferFullCounter(self) -> "IntegerFeature":
        """
        Returns the value of the buffer full counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortBufferFullCounter_get(self)

    __swig_setmethods__['SwitchPortBufferSize'] = lambda self, value: self.SwitchPortBufferSize.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortBufferSize.Set(value)
    @property
    def SwitchPortBufferSize(self) -> "IntegerFeature":
        """
        Provides the buffer size at the selected port.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortBufferSize_get(self)

    __swig_setmethods__['SwitchPortCRCErrorCounter'] = lambda self, value: self.SwitchPortCRCErrorCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortCRCErrorCounter.Set(value)
    @property
    def SwitchPortCRCErrorCounter(self) -> "IntegerFeature":
        """
        Returns the value of the CRC error counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortCRCErrorCounter_get(self)

    __swig_setmethods__['SwitchPortMulticastValidCounter'] = lambda self, value: self.SwitchPortMulticastValidCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortMulticastValidCounter.Set(value)
    @property
    def SwitchPortMulticastValidCounter(self) -> "IntegerFeature":
        """
        Returns the value of the multicast valid counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortMulticastValidCounter_get(self)

    __swig_setmethods__['SwitchPortNumberOfBuffers'] = lambda self, value: self.SwitchPortNumberOfBuffers.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortNumberOfBuffers.Set(value)
    @property
    def SwitchPortNumberOfBuffers(self) -> "IntegerFeature":
        """
        Provides the number of buffers at the selected port.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortNumberOfBuffers_get(self)

    __swig_setmethods__['SwitchPortPAUSEFrameReceptionCounter'] = lambda self, value: self.SwitchPortPAUSEFrameReceptionCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortPAUSEFrameReceptionCounter.Set(value)
    @property
    def SwitchPortPAUSEFrameReceptionCounter(self) -> "IntegerFeature":
        """
        Returns the value of the PAUSE frame reception counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_get(self)

    __swig_setmethods__['SwitchPortPacketSizeErrorCounter'] = lambda self, value: self.SwitchPortPacketSizeErrorCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortPacketSizeErrorCounter.Set(value)
    @property
    def SwitchPortPacketSizeErrorCounter(self) -> "IntegerFeature":
        """
        Returns the value of the Packet size error counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortPacketSizeErrorCounter_get(self)

    __swig_setmethods__['SwitchPortSelector'] = lambda self, value: self.SwitchPortSelector.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortSelector.Set(value)
    @property
    def SwitchPortSelector(self) -> "CSwitchPortSelector":
        """
        Selects the port for the port related features.
        Return: A CSwitchPortSelector object to control the value.
        possible values:
        - Port0 - Selects port 0.
        - Port1 - Selects port 1.
        - Port2 - Selects port 2.
        - Port3 - Selects port 3.
        - Port4 - Selects port 4.
        - Port5 - Selects port 5.
        """
        return _neoapi.FeatureAccess_SwitchPortSelector_get(self)

    __swig_setmethods__['SwitchPortUnicastValidCounter'] = lambda self, value: self.SwitchPortUnicastValidCounter.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchPortUnicastValidCounter.Set(value)
    @property
    def SwitchPortUnicastValidCounter(self) -> "IntegerFeature":
        """
        Returns the value of the unicast valid counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchPortUnicastValidCounter_get(self)

    __swig_setmethods__['SwitchVersion'] = lambda self, value: self.SwitchVersion.Set(value.value) if isinstance(value, BaseFeature) else self.SwitchVersion.Set(value)
    @property
    def SwitchVersion(self) -> "IntegerFeature":
        """
        Provides the switch version.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_SwitchVersion_get(self)

    __swig_setmethods__['TLParamsLocked'] = lambda self, value: self.TLParamsLocked.Set(value.value) if isinstance(value, BaseFeature) else self.TLParamsLocked.Set(value)
    @property
    def TLParamsLocked(self) -> "IntegerFeature":
        """
        Used by the Transport Layer to prevent critical features from changing during acquisition.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TLParamsLocked_get(self)

    __swig_setmethods__['TestPattern'] = lambda self, value: self.TestPattern.Set(value.value) if isinstance(value, BaseFeature) else self.TestPattern.Set(value)
    @property
    def TestPattern(self) -> "CTestPattern":
        """
        Selects the type of test pattern that is generated by the device as image source.
        Return: A CTestPattern object to control the value.
        possible values:
        - Black - Image is filled with the darkest possible image.
        - ColorBar - Image is filled with stripes of color including White, Black, Red, Green, Blue, Cyan, Magenta and Yellow.
        - FrameCounter - A frame counter is superimposed on the live image.
        - GreyDiagonalRamp - Image is filled diagonally with an image that goes from the darkest possible value to the brightest. AVAILABLE: Always
        - GreyDiagonalRampHorizontalAndVerticalLineMoving - Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always
        - GreyDiagonalRampHorizontalLineMoving - Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always
        - GreyDiagonalRampVerticalLineMoving - Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always
        - GreyDiagonalRampWithLineMoving - Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving lines. AVAILABLE: Always
        - GreyHorizontalRamp - Image is filled horizontally with an image that goes from the darkest possible value to the brightest.
        - GreyHorizontalRampHorizontalAndVerticalLineMoving - Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always
        - GreyHorizontalRampHorizontalLineMoving - Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always
        - GreyHorizontalRampMoving - Image is filled horizontally with an image that goes from the darkest possible value to the brightest and that moves horizontally from left to right at each frame.
        - GreyHorizontalRampVerticalLineMoving - Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always
        - GreyVerticalRamp - Image is filled vertically with an image that goes from the darkest possible value to the brightest.
        - GreyVerticalRampHorizontalAndVerticalLineMoving - Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always
        - GreyVerticalRampHorizontalLineMoving - Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always
        - GreyVerticalRampMoving - Image is filled vertically with an image that goes from the darkest possible value to the brightest and that moves vertically from top to bottom at each frame.
        - GreyVerticalRampVerticalLineMoving - Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always
        - HorizontalAndVerticalLineMoving - Image is filled with moving horizontal and vertical lines. AVAILABLE: Always
        - HorizontalLineMoving - A moving horizontal line is superimposed on the live image.
        - Off - Image is coming from the sensor.
        - VerticalLineMoving - A moving vertical line is superimposed on the live image.
        - White - Image is filled with the brightest possible image.
        """
        return _neoapi.FeatureAccess_TestPattern_get(self)

    __swig_setmethods__['TestPatternGeneratorSelector'] = lambda self, value: self.TestPatternGeneratorSelector.Set(value.value) if isinstance(value, BaseFeature) else self.TestPatternGeneratorSelector.Set(value)
    @property
    def TestPatternGeneratorSelector(self) -> "CTestPatternGeneratorSelector":
        """
        Selects which test pattern generator is controlled by the TestPattern feature.
        Return: A CTestPatternGeneratorSelector object to control the value.
        possible values:
        - ImageProcessor - TestPattern feature will control the image processor. AVAILABLE: Always
        - Region0 - TestPattern feature will control the region 0 test pattern generator.
        - Region1 - TestPattern feature will control the region 1 test pattern generator.
        - Region2 - TestPattern feature will control the region 2 test pattern generator.
        - Sensor - TestPattern feature will control the sensor's test pattern generator.
        - SensorProcessor - TestPattern feature will control the sensor processor. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_TestPatternGeneratorSelector_get(self)

    __swig_setmethods__['TestPendingAck'] = lambda self, value: self.TestPendingAck.Set(value.value) if isinstance(value, BaseFeature) else self.TestPendingAck.Set(value)
    @property
    def TestPendingAck(self) -> "IntegerFeature":
        """
        Tests the device's pending acknowledge feature. When this feature is written, the device waits a time period corresponding to the value of TestPendingAck before acknowledging the write.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TestPendingAck_get(self)

    __swig_setmethods__['TimerDelay'] = lambda self, value: self.TimerDelay.Set(value.value) if isinstance(value, BaseFeature) else self.TimerDelay.Set(value)
    @property
    def TimerDelay(self) -> "DoubleFeature":
        """
        Sets the duration (in microseconds) of the delay to apply at the reception of a trigger before starting the Timer.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimerDelay_get(self)

    __swig_setmethods__['TimerDuration'] = lambda self, value: self.TimerDuration.Set(value.value) if isinstance(value, BaseFeature) else self.TimerDuration.Set(value)
    @property
    def TimerDuration(self) -> "DoubleFeature":
        """
        Sets the duration (in microseconds) of the Timer pulse.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimerDuration_get(self)

    __swig_setmethods__['TimerSelector'] = lambda self, value: self.TimerSelector.Set(value.value) if isinstance(value, BaseFeature) else self.TimerSelector.Set(value)
    @property
    def TimerSelector(self) -> "CTimerSelector":
        """
        Selects which Timer to configure.
        Return: A CTimerSelector object to control the value.
        possible values:
        - Timer0 - Selects the Timer 0.
        - Timer1 - Selects the Timer 1.
        - Timer2 - Selects the Timer 2.
        - Timer3 - Selects the Timer 3. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_TimerSelector_get(self)

    __swig_setmethods__['TimerTriggerActivation'] = lambda self, value: self.TimerTriggerActivation.Set(value.value) if isinstance(value, BaseFeature) else self.TimerTriggerActivation.Set(value)
    @property
    def TimerTriggerActivation(self) -> "CTimerTriggerActivation":
        """
        Selects the activation mode of the trigger to start the Timer.
        Return: A CTimerTriggerActivation object to control the value.
        possible values:
        - AnyEdge - Starts counting on the Falling or Rising Edge of the selected trigger signal.
        - FallingEdge - Starts counting on the Falling Edge of the selected trigger signal.
        - LevelHigh - Counts as long as the selected trigger signal level is High.
        - LevelLow - Counts as long as the selected trigger signal level is Low.
        - RisingEdge - Starts counting on the Rising Edge of the selected trigger signal.
        """
        return _neoapi.FeatureAccess_TimerTriggerActivation_get(self)

    __swig_setmethods__['TimerTriggerSource'] = lambda self, value: self.TimerTriggerSource.Set(value.value) if isinstance(value, BaseFeature) else self.TimerTriggerSource.Set(value)
    @property
    def TimerTriggerSource(self) -> "CTimerTriggerSource":
        """
        Selects the source of the trigger to start the Timer.
        Return: A CTimerTriggerSource object to control the value.
        possible values:
        - AcquisitionEnd - Starts with the reception of the Acquisition End.
        - AcquisitionStart - Starts with the reception of the Acquisition Start.
        - AcquisitionTrigger - Starts with the reception of the Acquisition Trigger.
        - AcquisitionTriggerMissed - Starts with the reception of a missed Acquisition Trigger.
        - Action0 - Starts with the assertion of the chosen action signal.
        - Action1 - Starts with the assertion of the chosen action signal.
        - Action2 - Starts with the assertion of the chosen action signal.
        - Counter0End - Starts with the reception of the Counter End.
        - Counter0Start - Starts with the reception of the Counter Start.
        - Counter1End - Starts with the reception of the Counter End.
        - Counter1Start - Starts with the reception of the Counter Start.
        - Counter2End - Starts with the reception of the Counter End.
        - Counter2Start - Starts with the reception of the Counter Start.
        - Encoder0 - Starts with the reception of the Encoder output signal.
        - Encoder1 - Starts with the reception of the Encoder output signal.
        - Encoder2 - Starts with the reception of the Encoder output signal.
        - ExposureEnd - Starts with the reception of the Exposure End.
        - ExposureStart - Starts with the reception of the Exposure Start.
        - FrameBurstEnd - Starts with the reception of the Frame Burst End.
        - FrameBurstStart - Starts with the reception of the Frame Burst Start.
        - FrameEnd - Starts with the reception of the Frame End.
        - FrameStart - Starts with the reception of the Frame Start.
        - FrameTransferSkipped - FrameTransferSkipped AVAILABLE: Always
        - FrameTrigger - Starts with the reception of the Frame Start Trigger.
        - FrameTriggerMissed - Starts with the reception of a missed Frame Trigger.
        - Line0 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - Line1 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - Line2 - Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.
        - LineEnd - Starts with the reception of the Line End.
        - LineStart - Starts with the reception of the Line Start.
        - LineTrigger - Starts with the reception of the Line Start Trigger.
        - LineTriggerMissed - Starts with the reception of a missed Line Trigger.
        - LinkTrigger0 - Starts with the reception of the chosen Link Trigger.
        - LinkTrigger1 - Starts with the reception of the chosen Link Trigger.
        - LinkTrigger2 - Starts with the reception of the chosen Link Trigger.
        - LogicBlock0 - Starts with the reception of the Logic Block output signal.
        - LogicBlock1 - Starts with the reception of the Logic Block output signal.
        - LogicBlock2 - Starts with the reception of the Logic Block output signal.
        - Off - Disables the Timer trigger.
        - Software - Starts when the trigger was generated by the software. AVAILABLE: Always
        - SoftwareSignal0 - Starts on the reception of the Software Signal.
        - SoftwareSignal1 - Starts on the reception of the Software Signal.
        - SoftwareSignal2 - Starts on the reception of the Software Signal.
        - Timer0End - Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.
        - Timer0Start - Starts with the reception of the Timer Start.
        - Timer1End - Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.
        - Timer1Start - Starts with the reception of the Timer Start.
        - Timer2End - Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.
        - Timer2Start - Starts with the reception of the Timer Start.
        - TriggerSkipped - Starts when a trigger was skipped. AVAILABLE: Always
        - UserOutput0 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput1 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput2 - Specifies which User Output bit signal to use as internal source for the trigger.
        """
        return _neoapi.FeatureAccess_TimerTriggerSource_get(self)

    @property
    def TimestampLatch(self) -> "CommandFeature":
        """
        Latches the current timestamp counter into TimestampLatchValue.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatch_get(self)

    __swig_setmethods__['TimestampLatchValue'] = lambda self, value: self.TimestampLatchValue.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValue.Set(value)
    @property
    def TimestampLatchValue(self) -> "IntegerFeature":
        """
        Returns the latched value of the timestamp counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValue_get(self)

    __swig_setmethods__['TimestampLatchValuePtpDays'] = lambda self, value: self.TimestampLatchValuePtpDays.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValuePtpDays.Set(value)
    @property
    def TimestampLatchValuePtpDays(self) -> "IntegerFeature":
        """
        Returns the latched value of the Ptp timestamp in days since 01.01.1970 00:00:00.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValuePtpDays_get(self)

    __swig_setmethods__['TimestampLatchValuePtpHours'] = lambda self, value: self.TimestampLatchValuePtpHours.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValuePtpHours.Set(value)
    @property
    def TimestampLatchValuePtpHours(self) -> "IntegerFeature":
        """
        Returns the latched value of the Ptp timestamp in hours since 00:00 AM.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValuePtpHours_get(self)

    __swig_setmethods__['TimestampLatchValuePtpMinutes'] = lambda self, value: self.TimestampLatchValuePtpMinutes.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValuePtpMinutes.Set(value)
    @property
    def TimestampLatchValuePtpMinutes(self) -> "IntegerFeature":
        """
        Returns the latched value of the Ptp timestamp in minutes since the last hour.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValuePtpMinutes_get(self)

    __swig_setmethods__['TimestampLatchValuePtpNanoseconds'] = lambda self, value: self.TimestampLatchValuePtpNanoseconds.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValuePtpNanoseconds.Set(value)
    @property
    def TimestampLatchValuePtpNanoseconds(self) -> "IntegerFeature":
        """
        Returns the latched value of the Ptp timestamp in nanoseconds since the last second.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValuePtpNanoseconds_get(self)

    __swig_setmethods__['TimestampLatchValuePtpSeconds'] = lambda self, value: self.TimestampLatchValuePtpSeconds.Set(value.value) if isinstance(value, BaseFeature) else self.TimestampLatchValuePtpSeconds.Set(value)
    @property
    def TimestampLatchValuePtpSeconds(self) -> "IntegerFeature":
        """
        Returns the latched value of the Ptp timestamp counters in seconds since the last minute.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampLatchValuePtpSeconds_get(self)

    @property
    def TimestampReset(self) -> "CommandFeature":
        """
        Resets the current value of the device timestamp counter.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TimestampReset_get(self)

    __swig_setmethods__['TransferControlMode'] = lambda self, value: self.TransferControlMode.Set(value.value) if isinstance(value, BaseFeature) else self.TransferControlMode.Set(value)
    @property
    def TransferControlMode(self) -> "CTransferControlMode":
        """
        Selects the control method for the transfers.
        Return: A CTransferControlMode object to control the value.
        possible values:
        - Automatic - Automatic
        - Basic - Basic
        - UserControlled - User Controlled
        """
        return _neoapi.FeatureAccess_TransferControlMode_get(self)

    __swig_setmethods__['TransferOperationMode'] = lambda self, value: self.TransferOperationMode.Set(value.value) if isinstance(value, BaseFeature) else self.TransferOperationMode.Set(value)
    @property
    def TransferOperationMode(self) -> "CTransferOperationMode":
        """
        Selects the operation mode of the transfer.
        Return: A CTransferOperationMode object to control the value.
        possible values:
        - Continuous - Continuous
        - MultiBlock - Multi Block
        """
        return _neoapi.FeatureAccess_TransferOperationMode_get(self)

    __swig_setmethods__['TransferSelector'] = lambda self, value: self.TransferSelector.Set(value.value) if isinstance(value, BaseFeature) else self.TransferSelector.Set(value)
    @property
    def TransferSelector(self) -> "CTransferSelector":
        """
        Selects which stream transfers are currently controlled by the selected Transfer features.
        Return: A CTransferSelector object to control the value.
        possible values:
        - All - The transfer features control all the data streams simultaneously.
        - Stream0 - The transfer features control the data stream 0.
        - Stream1 - The transfer features control the data stream 1.
        - Stream2 - The transfer features control the data stream 2.
        - Stream3 - The transfer features control the data stream 3, used for memory part 3. AVAILABLE: Always
        - Stream4 - The transfer features control the data stream 4, used for memory part 4. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_TransferSelector_get(self)

    @property
    def TransferStart(self) -> "CommandFeature":
        """
        Starts the streaming of data blocks out of the device. This feature must be available when the TransferControlMode is set to "UserControlled". If the TransferStart feature is not writable (locked), the application should not start the transfer and should avoid using the feature until it becomes writable again.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TransferStart_get(self)

    __swig_setmethods__['TransferStatus'] = lambda self, value: self.TransferStatus.Set(value.value) if isinstance(value, BaseFeature) else self.TransferStatus.Set(value)
    @property
    def TransferStatus(self) -> "BoolFeature":
        """
        Reads the status of the Transfer module signal selected by TransferStatusSelector.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TransferStatus_get(self)

    __swig_setmethods__['TransferStatusSelector'] = lambda self, value: self.TransferStatusSelector.Set(value.value) if isinstance(value, BaseFeature) else self.TransferStatusSelector.Set(value)
    @property
    def TransferStatusSelector(self) -> "CTransferStatusSelector":
        """
        Selects which status of the transfer module to read.
        Return: A CTransferStatusSelector object to control the value.
        possible values:
        - Paused - Data blocks transmission is suspended immediately.
        - QueueOverflow - Data blocks queue is in overflow state.
        - Stopped - Data blocks transmission is stopped.
        - Stopping - Data blocks transmission is stopping. The current block transmission will be completed and the transfer state will stop.
        - Streaming - Data blocks are transmitted when enough data is available.
        """
        return _neoapi.FeatureAccess_TransferStatusSelector_get(self)

    @property
    def TransferStop(self) -> "CommandFeature":
        """
        Stops the streaming of data Block(s). The current block transmission will be completed. This feature must be available when the TransferControlMode is set to "UserControlled".
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TransferStop_get(self)

    __swig_setmethods__['TriggerActivation'] = lambda self, value: self.TriggerActivation.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerActivation.Set(value)
    @property
    def TriggerActivation(self) -> "CTriggerActivation":
        """
        Specifies the activation mode of the trigger.
        Return: A CTriggerActivation object to control the value.
        possible values:
        - AnyEdge - Specifies that the trigger is considered valid on the falling or rising edge of the source signal.
        - FallingEdge - Specifies that the trigger is considered valid on the falling edge of the source signal.
        - LevelHigh - Specifies that the trigger is considered valid as long as the level of the source signal is high.
        - LevelLow - Specifies that the trigger is considered valid as long as the level of the source signal is low.
        - RisingEdge - Specifies that the trigger is considered valid on the rising edge of the source signal.
        """
        return _neoapi.FeatureAccess_TriggerActivation_get(self)

    @property
    def TriggerCounterLatch(self) -> "CommandFeature":
        """
        Latches the current timestamp counter into TimestampLatchValue.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerCounterLatch_get(self)

    __swig_setmethods__['TriggerCounterLatchValue'] = lambda self, value: self.TriggerCounterLatchValue.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerCounterLatchValue.Set(value)
    @property
    def TriggerCounterLatchValue(self) -> "IntegerFeature":
        """
        Returns the latched value of the trigger counter.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerCounterLatchValue_get(self)

    @property
    def TriggerCounterReset(self) -> "CommandFeature":
        """
        Resets the current value of the device trigger counter.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerCounterReset_get(self)

    __swig_setmethods__['TriggerDelay'] = lambda self, value: self.TriggerDelay.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerDelay.Set(value)
    @property
    def TriggerDelay(self) -> "DoubleFeature":
        """
        Specifies the delay in microseconds (us) to apply after the trigger reception before activating it.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerDelay_get(self)

    @property
    def TriggerEventTest(self) -> "CommandFeature":
        """
        Generates the test event if the event channel for this event is enabled.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerEventTest_get(self)

    __swig_setmethods__['TriggerMode'] = lambda self, value: self.TriggerMode.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerMode.Set(value)
    @property
    def TriggerMode(self) -> "CTriggerMode":
        """
        Controls if the selected trigger is active.
        Return: A CTriggerMode object to control the value.
        possible values:
        - Off - Disables the selected trigger.
        - On - Enable the selected trigger.
        """
        return _neoapi.FeatureAccess_TriggerMode_get(self)

    __swig_setmethods__['TriggerOverlap'] = lambda self, value: self.TriggerOverlap.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerOverlap.Set(value)
    @property
    def TriggerOverlap(self) -> "CTriggerOverlap":
        """
        Specifies the type trigger overlap permitted with the previous frame or line. This defines when a valid trigger will be accepted (or latched) for a new frame or a new line.
        Return: A CTriggerOverlap object to control the value.
        possible values:
        - Off - No trigger overlap is permitted.
        - PreviousFrame - Trigger is accepted (latched) at any time during the capture of the previous frame.
        - PreviousLine - Trigger is accepted (latched) at any time during the capture of the previous line.
        - ReadOut - Trigger is accepted immediately after the exposure period.
        """
        return _neoapi.FeatureAccess_TriggerOverlap_get(self)

    __swig_setmethods__['TriggerSelector'] = lambda self, value: self.TriggerSelector.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerSelector.Set(value)
    @property
    def TriggerSelector(self) -> "CTriggerSelector":
        """
        Selects the type of trigger to configure.
        Return: A CTriggerSelector object to control the value.
        possible values:
        - AcquisitionActive - Selects a trigger that controls the duration of the Acquisition of one or many frames. The Acquisition is activated when the trigger signal becomes active and terminated when it goes back to the inactive state.
        - AcquisitionEnd - Selects a trigger that ends the Acquisition of one or many frames according to AcquisitionMode.
        - AcquisitionStart - Selects a trigger that starts the Acquisition of one or many frames according to AcquisitionMode.
        - ExposureActive - Selects a trigger controlling the duration of the exposure of one frame (or Line).
        - ExposureEnd - Selects a trigger controlling the end of the exposure of one Frame (or Line).
        - ExposureStart - Selects a trigger controlling the start of the exposure of one Frame (or Line).
        - FrameActive - Selects a trigger controlling the duration of one frame (mainly used in linescan mode).
        - FrameBurstActive - Selects a trigger controlling the duration of the capture of the bursts of frames in an acquisition.
        - FrameBurstEnd - Selects a trigger ending the capture of the bursts of frames in an acquisition.
        - FrameBurstStart - Selects a trigger starting the capture of the bursts of frames in an acquisition. AcquisitionBurstFrameCount controls the length of each burst unless a FrameBurstEnd trigger is active. The total number of frames captured is also conditioned by AcquisitionFrameCount if AcquisitionMode is MultiFrame.
        - FrameEnd - Selects a trigger ending the capture of one frame (mainly used in linescan mode).
        - FrameStart - Selects a trigger starting the capture of one frame.
        - LineStart - Selects a trigger starting the capture of one Line of a Frame (mainly used in linescan mode).
        - MultiSlopeExposureLimit1 - Selects a trigger controlling the first duration of a multi-slope exposure. Exposure is continued according to the pre-defined multi-slope settings.
        """
        return _neoapi.FeatureAccess_TriggerSelector_get(self)

    @property
    def TriggerSoftware(self) -> "CommandFeature":
        """
        Generates an internal trigger. TriggerSource must be set to Software.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TriggerSoftware_get(self)

    __swig_setmethods__['TriggerSource'] = lambda self, value: self.TriggerSource.Set(value.value) if isinstance(value, BaseFeature) else self.TriggerSource.Set(value)
    @property
    def TriggerSource(self) -> "CTriggerSource":
        """
        Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On.
        Return: A CTriggerSource object to control the value.
        possible values:
        - Action0 - Specifies which Action command to use as internal source for the trigger.
        - Action1 - Specifies which Action command to use as internal source for the trigger.
        - Action2 - Specifies which Action command to use as internal source for the trigger.
        - All - All trigger sources are active. AVAILABLE: (ExposureMode != TriggerWidth)
        - CC1 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC2 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC3 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - CC4 - Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.
        - Counter0End - Specifies which of the Counter signal to use as internal source for the trigger.
        - Counter0Start - Specifies which of the Counter signal to use as internal source for the trigger.
        - Counter1End - Specifies which of the Counter signal to use as internal source for the trigger.
        - Counter1Start - Specifies which of the Counter signal to use as internal source for the trigger.
        - Counter2End - Specifies which of the Counter signal to use as internal source for the trigger.
        - Counter2Start - Specifies which of the Counter signal to use as internal source for the trigger.
        - Encoder0 - Specifies which Encoder signal to use as internal source for the trigger.
        - Encoder1 - Specifies which Encoder signal to use as internal source for the trigger.
        - Encoder2 - Specifies which Encoder signal to use as internal source for the trigger.
        - Line0 - Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.
        - Line1 - Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.
        - Line2 - Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.
        - Line3 - Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal. AVAILABLE: Always
        - LinkTrigger0 - Specifies which Link Trigger to use as source for the trigger (received from the transport layer).
        - LinkTrigger1 - Specifies which Link Trigger to use as source for the trigger (received from the transport layer).
        - LinkTrigger2 - Specifies which Link Trigger to use as source for the trigger (received from the transport layer).
        - LogicBlock0 - Specifies which Logic Block signal to use as internal source for the trigger.
        - LogicBlock1 - Specifies which Logic Block signal to use as internal source for the trigger.
        - LogicBlock2 - Specifies which Logic Block signal to use as internal source for the trigger.
        - Off - No trigger source is active. AVAILABLE: (ExposureMode = Timed)
        - Software - Specifies that the trigger source will be generated by software using the TriggerSoftware command.
        - SoftwareSignal0 - Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.
        - SoftwareSignal1 - Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.
        - SoftwareSignal2 - Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.
        - Timer0End - Specifies which Timer signal to use as internal source for the trigger.
        - Timer0Start - Specifies which Timer signal to use as internal source for the trigger.
        - Timer1End - Specifies which Timer signal to use as internal source for the trigger.
        - Timer1Start - Specifies which Timer signal to use as internal source for the trigger.
        - Timer2End - Specifies which Timer signal to use as internal source for the trigger.
        - Timer2Start - Specifies which Timer signal to use as internal source for the trigger.
        - UserOutput0 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput1 - Specifies which User Output bit signal to use as internal source for the trigger.
        - UserOutput2 - Specifies which User Output bit signal to use as internal source for the trigger.
        """
        return _neoapi.FeatureAccess_TriggerSource_get(self)

    __swig_setmethods__['TxByteDelay'] = lambda self, value: self.TxByteDelay.Set(value.value) if isinstance(value, BaseFeature) else self.TxByteDelay.Set(value)
    @property
    def TxByteDelay(self) -> "IntegerFeature":
        """
        Sets the delay between two consecutive bytes inside a sent message in bit times.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxByteDelay_get(self)

    __swig_setmethods__['TxByteDelayNormalized'] = lambda self, value: self.TxByteDelayNormalized.Set(value.value) if isinstance(value, BaseFeature) else self.TxByteDelayNormalized.Set(value)
    @property
    def TxByteDelayNormalized(self) -> "DoubleFeature":
        """
        Sets the delay between two consecutive bytes inside a sent message in us.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxByteDelayNormalized_get(self)

    __swig_setmethods__['TxCommandoLength'] = lambda self, value: self.TxCommandoLength.Set(value.value) if isinstance(value, BaseFeature) else self.TxCommandoLength.Set(value)
    @property
    def TxCommandoLength(self) -> "IntegerFeature":
        """
        Sets the Length of a serial command message from device to RS232.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxCommandoLength_get(self)

    __swig_setmethods__['TxDiscardedMessages'] = lambda self, value: self.TxDiscardedMessages.Set(value.value) if isinstance(value, BaseFeature) else self.TxDiscardedMessages.Set(value)
    @property
    def TxDiscardedMessages(self) -> "IntegerFeature":
        """
        Returns the number of unsent or discarded messages in sending direction.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxDiscardedMessages_get(self)

    @property
    def TxFiFo(self) -> "RegisterFeature":
        """
        Writes into the FIFO for sending messages over RS232.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxFiFo_get(self)

    __swig_setmethods__['TxFiFoFreeBufferCount'] = lambda self, value: self.TxFiFoFreeBufferCount.Set(value.value) if isinstance(value, BaseFeature) else self.TxFiFoFreeBufferCount.Set(value)
    @property
    def TxFiFoFreeBufferCount(self) -> "IntegerFeature":
        """
        Returns the number of RS232-Tx FIFO buffers currently free and usable.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxFiFoFreeBufferCount_get(self)

    __swig_setmethods__['TxMessageDelay'] = lambda self, value: self.TxMessageDelay.Set(value.value) if isinstance(value, BaseFeature) else self.TxMessageDelay.Set(value)
    @property
    def TxMessageDelay(self) -> "IntegerFeature":
        """
        Sets the minimal delay between last and first byte of two consecutive sent messages in bit times.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxMessageDelay_get(self)

    __swig_setmethods__['TxMessageDelayNormalized'] = lambda self, value: self.TxMessageDelayNormalized.Set(value.value) if isinstance(value, BaseFeature) else self.TxMessageDelayNormalized.Set(value)
    @property
    def TxMessageDelayNormalized(self) -> "DoubleFeature":
        """
        Returns the minimal delay between last and first byte of two consecutive sent messages in us.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxMessageDelayNormalized_get(self)

    __swig_setmethods__['TxRetryCount'] = lambda self, value: self.TxRetryCount.Set(value.value) if isinstance(value, BaseFeature) else self.TxRetryCount.Set(value)
    @property
    def TxRetryCount(self) -> "IntegerFeature":
        """
        Sets the number of attempts to resend a message if direct sending was not successful.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_TxRetryCount_get(self)

    __swig_setmethods__['USB2SupportEnable'] = lambda self, value: self.USB2SupportEnable.Set(value.value) if isinstance(value, BaseFeature) else self.USB2SupportEnable.Set(value)
    @property
    def USB2SupportEnable(self) -> "BoolFeature":
        """
        Enables the streaming support for USB 2.0. Note, changing features value causes in an automatically reset of the device!
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_USB2SupportEnable_get(self)

    __swig_setmethods__['UserOutputSelector'] = lambda self, value: self.UserOutputSelector.Set(value.value) if isinstance(value, BaseFeature) else self.UserOutputSelector.Set(value)
    @property
    def UserOutputSelector(self) -> "CUserOutputSelector":
        """
        Selects which bit of the User Output register will be set by UserOutputValue.
        Return: A CUserOutputSelector object to control the value.
        possible values:
        - UserOutput0 - Selects the bit 0 of the User Output register.
        - UserOutput1 - Selects the bit 1 of the User Output register.
        - UserOutput2 - Selects the bit 2 of the User Output register.
        - UserOutput3 - Selects the bit 2 of the User Output register. AVAILABLE: Always
        - UserOutput4 - Selects the bit 3 of the User Output register. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_UserOutputSelector_get(self)

    __swig_setmethods__['UserOutputValue'] = lambda self, value: self.UserOutputValue.Set(value.value) if isinstance(value, BaseFeature) else self.UserOutputValue.Set(value)
    @property
    def UserOutputValue(self) -> "BoolFeature":
        """
        Sets the value of the bit selected by UserOutputSelector.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserOutputValue_get(self)

    __swig_setmethods__['UserOutputValueAll'] = lambda self, value: self.UserOutputValueAll.Set(value.value) if isinstance(value, BaseFeature) else self.UserOutputValueAll.Set(value)
    @property
    def UserOutputValueAll(self) -> "IntegerFeature":
        """
        Sets the value of all the bits of the User Output register. It is subject to the UserOutputValueAllMask.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserOutputValueAll_get(self)

    @property
    def UserSetData(self) -> "RegisterFeature":
        """
        Returns the data of the selected UserSet. The size of the UserSet itself is given in the Length element of the feature. The start address is stored in the element Address of the feature. The feature is only available if the feature UserSetDataEnable is switched on.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetData_get(self)

    __swig_setmethods__['UserSetDataEnable'] = lambda self, value: self.UserSetDataEnable.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetDataEnable.Set(value)
    @property
    def UserSetDataEnable(self) -> "BoolFeature":
        """
        Enables the feature UserSetData. If it is switch to off the feature UserSetData is not available.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetDataEnable_get(self)

    __swig_setmethods__['UserSetDefault'] = lambda self, value: self.UserSetDefault.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetDefault.Set(value)
    @property
    def UserSetDefault(self) -> "CUserSetDefault":
        """
        Selects the feature User Set to load and make active by default when the device is reset.
        Return: A CUserSetDefault object to control the value.
        possible values:
        - Default - Select the factory setting user set.
        - UserSet0 - Select the user set 0.
        - UserSet1 - Select the user set 1.
        - UserSet2 - Select the user set 2. AVAILABLE: (UserSet2 was saved before)
        - UserSet3 - Select the user set 3. AVAILABLE: (UserSet3 was saved before)
        """
        return _neoapi.FeatureAccess_UserSetDefault_get(self)

    __swig_setmethods__['UserSetFeatureEnable'] = lambda self, value: self.UserSetFeatureEnable.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetFeatureEnable.Set(value)
    @property
    def UserSetFeatureEnable(self) -> "BoolFeature":
        """
        Enables the selected feature and make it active in all the UserSets.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetFeatureEnable_get(self)

    __swig_setmethods__['UserSetFeatureSelector'] = lambda self, value: self.UserSetFeatureSelector.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetFeatureSelector.Set(value)
    @property
    def UserSetFeatureSelector(self) -> "CUserSetFeatureSelector":
        """
        Selects which individual UserSet feature to control.
        Return: A CUserSetFeatureSelector object to control the value.
        possible values:
        - AcquisitionFrameCount - Number of frames to acquire in MultiFrame Acquisition mode. AVAILABLE: Always.
        - AcquisitionFrameRate - Controls the acquisition rate (in Hertz) at which the frames are captured. AVAILABLE: Always
        - AcquisitionFrameRateEnable - Controls if the AcquisitionFrameRate feature is writable and used to control the acquisition rate. AVAILABLE: Always
        - AcquisitionMode - Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops. AVAILABLE: Always
        - ActionDeviceKey - Provides the device key that allows the device to check the validity of action commands. The device internal assertion of an action signal is only authorized if the ActionDeviceKey and the action device key value in the protocol message are equal. AVAILABLE: Always
        - ActionGroupKey - Provides the key that the device will use to validate the action on reception of the action protocol message. AVAILABLE: Always
        - ActionGroupMask - Provides the mask that the device will use to validate the action on reception of the action protocol message. AVAILABLE: Always
        - AutoFeatureHeight - Height of the selected Auto Feature Region (in pixels). AVAILABLE: Always.
        - AutoFeatureOffsetX - Horizontal offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.
        - AutoFeatureOffsetY - Vertical offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.
        - AutoFeatureRegionMode - Controls the mode of the selected Auto Feature Region. AVAILABLE: Always.
        - AutoFeatureRegionReference - The Reference Region of interest. The Auto Feature Region is part of this region and all Auto Feature Region features are refs to this Reference Region. AVAILABLE: Always.
        - AutoFeatureWidth - Width of the selected Auto Feature Region (in pixels). AVAILABLE: Always.
        - BOPFShift - Shift Factor for 8bit pixel format caculated from 12 bit mode. AVAILABLE: Always.
        - BalanceWhiteAuto - Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted. AVAILABLE: Always.
        - BinningHorizontal - Number of horizontal photo-sensitive cells to combine together. AVAILABLE: Always
        - BinningHorizontalMode - Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used. AVAILABLE: Always
        - BinningVertical - Number of vertical photo-sensitive cells to combine together. AVAILABLE: Always
        - BinningVerticalMode - Sets the mode used to combine horizontal photo-sensitive cells together when BinningVertical is used. AVAILABLE: Always
        - BlackLevel - Controls the analog black level as an absolute physical value. AVAILABLE: Always
        - BrightnessAutoNominalValue - Sets the nominal value for brightness in percent of full scale. It will be adjust with consider the setting in BrightnessAutoPriority. AVAILABLE: Always.
        - BrightnessAutoPriority - The feature set the highest priority auto feature to adjust the brightness. AVAILABLE: Always.
        - ChunkEnable - Enables the inclusion of the selected Chunk data in the payload of the image. AVAILABLE: Always
        - ChunkModeActive - Activates the inclusion of Chunk data in the payload of the image. AVAILABLE: Always
        - ColorTransformationAuto - Controls the mode for automatic adjusting the gains of the active transformation matrix. AVAILABLE: Always.
        - ColorTransformationValue - Represents the value of the selected Gain factor or Offset inside the Transformation matrix. AVAILABLE: Always.
        - CounterDuration - Sets the duration (or number of events) before the CounterEnd event is generated. AVAILABLE: Always
        - CounterEventActivation - Selects the Activation mode Event Source signal. AVAILABLE: Always
        - CounterEventSource - Select the events that will be the source to increment the Counter. AVAILABLE: Always
        - CounterResetActivation - Selects the Activation mode of the Counter Reset Source signal. AVAILABLE: Always
        - CounterResetSource - Selects the signals that will be the source to reset the Counter. AVAILABLE: Always
        - DefectPixelCorrection - Enable the correction of defect pixels. AVAILABLE: Always
        - DeviceLinkThroughputLimit - Limits the maximum bandwidth of the data that will be streamed out by the device on the selected Link. If necessary, delays will be uniformly inserted between transport layer packets in order to control the peak bandwidth. AVAILABLE: Always
        - DeviceSpecific - Device - Specific
        - DeviceTemperatureStatusTransition - Temperature threshold for selected status transition in degrees Celsius (C). AVAILABLE: Always
        - EventNotification - Activate or deactivate the notification to the host application of the occurrence of the selected Event. AVAILABLE: Always
        - ExposureAuto - Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific. AVAILABLE: Always.
        - ExposureAutoMaxValue - Maximal value of ExposureTime calculable by exposure auto algorithm. AVAILABLE: Always.
        - ExposureAutoMinValue - Minimal value of ExposureTime calculable by exposure auto algorithm. AVAILABLE: Always.
        - ExposureMode - Sets the operation mode of the Exposure (or shutter). AVAILABLE: Always
        - ExposureTime - Sets the Exposure time when ExposureMode is Timed and ExposureAuto is Off. This controls the duration where the photosensitive cells are exposed to light. AVAILABLE: Always
        - FixedPatternNoiseCorrection - Fixed pattern noise correction. AVAILABLE: Always
        - FrameCounter - Sets the frame counter, which is part of the chunk data too. AVAILABLE: Always
        - Gain - Controls the selected gain as an absolute physical value. This is an amplification factor applied to the video signal. AVAILABLE: Always
        - GainAuto - Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific. AVAILABLE: Always.
        - GainAutoMaxValue - Maximal value of Gain calculable by gain auto algorithm. AVAILABLE: (GainSelector = All).
        - GainAutoMinValue - Minimal value of Gain calculable by gain auto algorithm. AVAILABLE: (GainSelector = All).
        - Gamma - Controls the gamma correction of pixel intensity. This is typically used to compensate for non-linearity of the display system (such as CRT). AVAILABLE: Always.
        - GevSCFTD - This feature indicates the delay (in timestamp counter unit) to insert between each block (image) for this stream channel. AVAILABLE: Always
        - GevSCPD - Controls the delay (in timestamp counter unit) to insert between each packet for this stream channel. This can be used as a crude flow-control mechanism if the application or the network infrastructure cannot keep up with the packets coming from the device. AVAILABLE: Always
        - Height - Height of the image provided by the device (in pixels). AVAILABLE: Always
        - LUTContent - Describes the content of the selected LUT. AVAILABLE: Always.
        - LUTEnable - Activates the selected LUT. AVAILABLE: Always.
        - LUTValue - Returns the Value at entry LUTIndex of the LUT selected by LUTSelector. AVAILABLE: Always.
        - LineDebouncerHighTimeAbs - Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high. AVAILABLE: Always
        - LineDebouncerLowTimeAbs - Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low AVAILABLE: Always
        - LineInverter - Controls the inversion of the signal of the selected input or output Line. AVAILABLE: Always
        - LineMode - Controls if the physical Line is used to Input or Output a signal. AVAILABLE: Always.
        - LinePWMDuration - Sets the duration in microseconds. AVAILABLE: Always.
        - LinePWMDutyCycle - Offers the duty cycle in percent. AVAILABLE: Always.
        - LinePWMMaxDuration - Sets the maximum duration in microseconds. AVAILABLE: Always.
        - LinePWMMaxDutyCycle - Offers the maximal duty cycle in percent. AVAILABLE: Always.
        - LinePWMMode - Selects the PWM mode of the selected output line. AVAILABLE: Always.
        - LineSource - Selects which internal acquisition or I/O source signal to output on the selected Line. LineMode must be Output. AVAILABLE: Always
        - OffsetX - Horizontal offset from the origin to the region of interest (in pixels). AVAILABLE: Always
        - OffsetY - Vertical offset from the origin to the region of interest (in pixels). AVAILABLE: Always
        - PixelFormat - Format of the pixels provided by the device. It represents all the information provided by PixelCoding, PixelSize, PixelColorFilter combined in a single feature. AVAILABLE: Always
        - PtpEnable - Enable the Precision Time Protocol (PTP). AVAILABLE: Always.
        - PtpMode - Selects the PTP clock type the device will act as. AVAILABLE: Always.
        - ReadoutMode - Specifies the operation mode of the readout for the acquisition. AVAILABLE: Always
        - ReverseX - Flip horizontally the image sent by the device. The Region of interest is applied after the flipping. AVAILABLE: Always
        - ReverseY - Flip vertically the image sent by the device. The Region of interest is applied after the flipping. AVAILABLE: Always
        - SensorADDigitization - The feature controls the sensors AD digitization in bits per pixels. AVAILABLE: Always.
        - SensorShutterMode - Sets the shutter mode of the device. AVAILABLE: Always.
        - SequencerMode - Controls if the sequencer mechanism is active. AVAILABLE: Always
        - SequencerSetNext - Specifies the next sequencer set. AVAILABLE: Always
        - SequencerSetStart - Sets the initial/start sequencer set, which is the first set used within a sequencer. AVAILABLE: Always
        - SequencerTriggerActivation - Specifies the activation mode of the sequencer trigger. AVAILABLE: Always
        - SequencerTriggerSource - Specifies the internal signal or physical input line to use as the sequencer trigger source. AVAILABLE: Always
        - ShortExposureTimeEnable - Controls if short exposure time should be supported. AVAILABLE: Always
        - TestPattern - Selects the type of test pattern that is generated by the device as image source. AVAILABLE: Always
        - TimerDelay - Sets the duration (in microseconds) of the delay to apply at the reception of a trigger before starting the Timer. AVAILABLE: Always
        - TimerDuration - Sets the duration (in microseconds) of the Timer pulse. AVAILABLE: Always
        - TimerTriggerActivation - Selects the activation mode of the trigger to start the Timer. AVAILABLE: Always
        - TimerTriggerSource - Selects the source of the trigger to start the Timer. AVAILABLE: Always
        - TransferStart - Starts the streaming of data blocks out of the device. This feature must be available when the TransferControlMode is set to "UserControled". If the TransferStart feature is not writable (locked), the application should not start the transfer and should avoid using the feature until it becomes writable again. AVAILABLE: Always
        - TransferStop - Stops the streaming of data Block(s). The current block transmission will be completed. This feature must be available when the TransferControlMode is set to "UserControlled". AVAILABLE: Always
        - TriggerActivation - Specifies the activation mode of the trigger. AVAILABLE: Always
        - TriggerDelay - Specifies the delay in microseconds (us) to apply after the trigger reception before activating it. AVAILABLE: Always
        - TriggerMode - Controls if the selected trigger is active. AVAILABLE: Always
        - TriggerSource - Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On. AVAILABLE: Always
        - UserOutputValue - Sets the value of the bit selected by UserOutputSelector. AVAILABLE: Always
        - UserOutputValueAll - Sets the value of all the bits of the User Output register. It is subject to the UserOutputValueAllMask. AVAILABLE: Always
        - Width - Width of the image provided by the device (in pixels). AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_UserSetFeatureSelector_get(self)

    @property
    def UserSetLoad(self) -> "CommandFeature":
        """
        Loads the User Set specified by UserSetSelector to the device and makes it active.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetLoad_get(self)

    @property
    def UserSetSave(self) -> "CommandFeature":
        """
        Save the User Set specified by UserSetSelector to the non-volatile memory of the device.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetSave_get(self)

    __swig_setmethods__['UserSetSelector'] = lambda self, value: self.UserSetSelector.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetSelector.Set(value)
    @property
    def UserSetSelector(self) -> "CUserSetSelector":
        """
        Selects the feature User Set to load, save or configure.
        Return: A CUserSetSelector object to control the value.
        possible values:
        - Default - Selects the factory setting user set.
        - UserSet0 - Selects the user set 0.
        - UserSet1 - Selects the user set 1.
        - UserSet2 - Selects the user set 2. AVAILABLE: Always
        - UserSet3 - Selects the user set 3. AVAILABLE: Always
        """
        return _neoapi.FeatureAccess_UserSetSelector_get(self)

    __swig_setmethods__['UserSetStartAddressSelector'] = lambda self, value: self.UserSetStartAddressSelector.Set(value.value) if isinstance(value, BaseFeature) else self.UserSetStartAddressSelector.Set(value)
    @property
    def UserSetStartAddressSelector(self) -> "IntegerFeature":
        """
        Sets the selector for the Start Address of a single UserSet where the UserSet Data can read from.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_UserSetStartAddressSelector_get(self)

    @property
    def WhiteBalance(self) -> "CommandFeature":
        """
        Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_WhiteBalance_get(self)

    __swig_setmethods__['Width'] = lambda self, value: self.Width.Set(value.value) if isinstance(value, BaseFeature) else self.Width.Set(value)
    @property
    def Width(self) -> "IntegerFeature":
        """
        Width of the image provided by the device (in pixels).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_Width_get(self)

    __swig_setmethods__['WidthMax'] = lambda self, value: self.WidthMax.Set(value.value) if isinstance(value, BaseFeature) else self.WidthMax.Set(value)
    @property
    def WidthMax(self) -> "IntegerFeature":
        """
        Maximum width of the image (in pixels). The dimension is calculated after horizontal binning, decimation or any other function changing the horizontal dimension of the image.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_WidthMax_get(self)

    __swig_setmethods__['aActionCommandMACCtrlFramesError'] = lambda self, value: self.aActionCommandMACCtrlFramesError.Set(value.value) if isinstance(value, BaseFeature) else self.aActionCommandMACCtrlFramesError.Set(value)
    @property
    def aActionCommandMACCtrlFramesError(self) -> "IntegerFeature":
        """
        Reports the number of discarded action command due to wrong action command parameters (DeviceKey, GroupKey, GroupMask).
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aActionCommandMACCtrlFramesError_get(self)

    __swig_setmethods__['aActionCommandMACCtrlFramesReceived'] = lambda self, value: self.aActionCommandMACCtrlFramesReceived.Set(value.value) if isinstance(value, BaseFeature) else self.aActionCommandMACCtrlFramesReceived.Set(value)
    @property
    def aActionCommandMACCtrlFramesReceived(self) -> "IntegerFeature":
        """
        Reports the number of received action command packets.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aActionCommandMACCtrlFramesReceived_get(self)

    __swig_setmethods__['aPAUSEMACCtrlFramesReceived'] = lambda self, value: self.aPAUSEMACCtrlFramesReceived.Set(value.value) if isinstance(value, BaseFeature) else self.aPAUSEMACCtrlFramesReceived.Set(value)
    @property
    def aPAUSEMACCtrlFramesReceived(self) -> "IntegerFeature":
        """
        Reports the number of received PAUSE frames.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aPAUSEMACCtrlFramesReceived_get(self)

    __swig_setmethods__['aPacketMACCtrlFramesError'] = lambda self, value: self.aPacketMACCtrlFramesError.Set(value.value) if isinstance(value, BaseFeature) else self.aPacketMACCtrlFramesError.Set(value)
    @property
    def aPacketMACCtrlFramesError(self) -> "IntegerFeature":
        """
        Reports the number of discarded packets due to wrong MAC address or wrong IP protocol or wrong UDP port or CRC error.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aPacketMACCtrlFramesError_get(self)

    __swig_setmethods__['aPacketMACCtrlFramesLost'] = lambda self, value: self.aPacketMACCtrlFramesLost.Set(value.value) if isinstance(value, BaseFeature) else self.aPacketMACCtrlFramesLost.Set(value)
    @property
    def aPacketMACCtrlFramesLost(self) -> "IntegerFeature":
        """
        Reports the number of packets which cannot be received due to full receive buffers.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aPacketMACCtrlFramesLost_get(self)

    __swig_setmethods__['aPacketMACCtrlFramesReceived'] = lambda self, value: self.aPacketMACCtrlFramesReceived.Set(value.value) if isinstance(value, BaseFeature) else self.aPacketMACCtrlFramesReceived.Set(value)
    @property
    def aPacketMACCtrlFramesReceived(self) -> "IntegerFeature":
        """
        Reports the number of correct received packets.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aPacketMACCtrlFramesReceived_get(self)

    __swig_setmethods__['aResendMACCtrlFramesError'] = lambda self, value: self.aResendMACCtrlFramesError.Set(value.value) if isinstance(value, BaseFeature) else self.aResendMACCtrlFramesError.Set(value)
    @property
    def aResendMACCtrlFramesError(self) -> "IntegerFeature":
        """
        Reports the number of discarded resend packets due to wrong stream channel index or full resend queue.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aResendMACCtrlFramesError_get(self)

    __swig_setmethods__['aResendMACCtrlFramesReceived'] = lambda self, value: self.aResendMACCtrlFramesReceived.Set(value.value) if isinstance(value, BaseFeature) else self.aResendMACCtrlFramesReceived.Set(value)
    @property
    def aResendMACCtrlFramesReceived(self) -> "IntegerFeature":
        """
        Reports the number of received resend packets.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_aResendMACCtrlFramesReceived_get(self)

    __swig_setmethods__['boCalibrationAngularAperture'] = lambda self, value: self.boCalibrationAngularAperture.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationAngularAperture.Set(value)
    @property
    def boCalibrationAngularAperture(self) -> "DoubleFeature":
        """
        Angular aperture of the lens as the angular size of the lens aperture as seen from the focal point in degree.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationAngularAperture_get(self)

    __swig_setmethods__['boCalibrationDataConfigurationMode'] = lambda self, value: self.boCalibrationDataConfigurationMode.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationDataConfigurationMode.Set(value)
    @property
    def boCalibrationDataConfigurationMode(self) -> "CboCalibrationDataConfigurationMode":
        """
        Controls if the calibration data configuration mode is active.
        Return: A CboCalibrationDataConfigurationMode object to control the value.
        possible values:
        - Off - Disables the bo calibration data configuration mode.
        - On - Enables the bo calibration data configuration mode.
        """
        return _neoapi.FeatureAccess_boCalibrationDataConfigurationMode_get(self)

    @property
    def boCalibrationDataSave(self) -> "CommandFeature":
        """
        Saves the current calibration data.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationDataSave_get(self)

    __swig_setmethods__['boCalibrationDataVersion'] = lambda self, value: self.boCalibrationDataVersion.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationDataVersion.Set(value)
    @property
    def boCalibrationDataVersion(self) -> "StringFeature":
        """
        Version of the calibration data.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationDataVersion_get(self)

    __swig_setmethods__['boCalibrationFocalLength'] = lambda self, value: self.boCalibrationFocalLength.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationFocalLength.Set(value)
    @property
    def boCalibrationFocalLength(self) -> "DoubleFeature":
        """
        Focal length in millimeters (mm).
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationFocalLength_get(self)

    __swig_setmethods__['boCalibrationMatrixSelector'] = lambda self, value: self.boCalibrationMatrixSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationMatrixSelector.Set(value)
    @property
    def boCalibrationMatrixSelector(self) -> "CboCalibrationMatrixSelector":
        """
        Selects the calibration matrix.
        Return: A CboCalibrationMatrixSelector object to control the value.
        possible values:
        - CameraMatrix - Selects the camera matrix.
        - NewCameraMatrix - Selects the camera matrix with consideration of the geometry distortion.
        """
        return _neoapi.FeatureAccess_boCalibrationMatrixSelector_get(self)

    __swig_setmethods__['boCalibrationMatrixValue'] = lambda self, value: self.boCalibrationMatrixValue.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationMatrixValue.Set(value)
    @property
    def boCalibrationMatrixValue(self) -> "DoubleFeature":
        """
        Selected value of calibration matrix.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationMatrixValue_get(self)

    __swig_setmethods__['boCalibrationMatrixValueSelector'] = lambda self, value: self.boCalibrationMatrixValueSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationMatrixValueSelector.Set(value)
    @property
    def boCalibrationMatrixValueSelector(self) -> "CboCalibrationMatrixValueSelector":
        """
        Value selector of calibration matrix.
        Return: A CboCalibrationMatrixValueSelector object to control the value.
        possible values:
        - Value11 - Selects matrix value at line 1 column 1.
        - Value12 - Selects matrix value at line 1 column 2.
        - Value13 - Selects matrix value at line 1 column 3.
        - Value21 - Selects matrix value at line 2 column 1.
        - Value22 - Selects matrix value at line 2 column 2.
        - Value23 - Selects matrix value at line 2 column 3.
        - Value31 - Selects matrix value at line 3 column 1.
        - Value32 - Selects matrix value at line 3 column 2.
        - Value33 - Selects matrix value at line 3 column 3.
        """
        return _neoapi.FeatureAccess_boCalibrationMatrixValueSelector_get(self)

    __swig_setmethods__['boCalibrationVectorSelector'] = lambda self, value: self.boCalibrationVectorSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationVectorSelector.Set(value)
    @property
    def boCalibrationVectorSelector(self) -> "CboCalibrationVectorSelector":
        """
        Selects the calibration vector.
        Return: A CboCalibrationVectorSelector object to control the value.
        possible values:
        - rvec - Selects the output rotation vector.
        - tvec - Selects the output translation vector.
        """
        return _neoapi.FeatureAccess_boCalibrationVectorSelector_get(self)

    __swig_setmethods__['boCalibrationVectorValue'] = lambda self, value: self.boCalibrationVectorValue.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationVectorValue.Set(value)
    @property
    def boCalibrationVectorValue(self) -> "DoubleFeature":
        """
        Selected value of calibration vector.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boCalibrationVectorValue_get(self)

    __swig_setmethods__['boCalibrationVectorValueSelector'] = lambda self, value: self.boCalibrationVectorValueSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boCalibrationVectorValueSelector.Set(value)
    @property
    def boCalibrationVectorValueSelector(self) -> "CboCalibrationVectorValueSelector":
        """
        Value selector of calibration vector.
        Return: A CboCalibrationVectorValueSelector object to control the value.
        possible values:
        - Value1 - Selects vector value 1.
        - Value2 - Selects vector value 2.
        - Value3 - Selects vector value 3.
        """
        return _neoapi.FeatureAccess_boCalibrationVectorValueSelector_get(self)

    __swig_setmethods__['boGeometryDistortionValue'] = lambda self, value: self.boGeometryDistortionValue.Set(value.value) if isinstance(value, BaseFeature) else self.boGeometryDistortionValue.Set(value)
    @property
    def boGeometryDistortionValue(self) -> "DoubleFeature":
        """
        Selected Value of geometry distortion.
        Return: A DoubleFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boGeometryDistortionValue_get(self)

    __swig_setmethods__['boGeometryDistortionValueSelector'] = lambda self, value: self.boGeometryDistortionValueSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boGeometryDistortionValueSelector.Set(value)
    @property
    def boGeometryDistortionValueSelector(self) -> "CboGeometryDistortionValueSelector":
        """
        Value Selector of geometry distortion.
        Return: A CboGeometryDistortionValueSelector object to control the value.
        possible values:
        - k1 - Selects geometry distortion value k1.
        - k2 - Selects geometry distortion value k2.
        - k3 - Selects geometry distortion value k3.
        - p1 - Selects geometry distortion value p1.
        - p2 - Selects geometry distortion value p2.
        """
        return _neoapi.FeatureAccess_boGeometryDistortionValueSelector_get(self)

    __swig_setmethods__['boSerialASCIIReadBuffer'] = lambda self, value: self.boSerialASCIIReadBuffer.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialASCIIReadBuffer.Set(value)
    @property
    def boSerialASCIIReadBuffer(self) -> "StringFeature":
        """
        Buffer for exchanging ASCII data over the serial interface. This buffer uses the same memory as boSerialBinaryReadBuffer.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialASCIIReadBuffer_get(self)

    __swig_setmethods__['boSerialASCIIWriteBuffer'] = lambda self, value: self.boSerialASCIIWriteBuffer.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialASCIIWriteBuffer.Set(value)
    @property
    def boSerialASCIIWriteBuffer(self) -> "StringFeature":
        """
        Buffer for exchanging ASCII data over the serial interface. This buffer uses the same memory as boSerialBinaryWriteBuffer.
        Return: A StringFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialASCIIWriteBuffer_get(self)

    @property
    def boSerialBinaryReadBuffer(self) -> "RegisterFeature":
        """
        Buffer for exchanging binary data over the serial interface. This buffer uses the same memory as boSerialASCIIReadBuffer.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBinaryReadBuffer_get(self)

    @property
    def boSerialBinaryWriteBuffer(self) -> "RegisterFeature":
        """
        Buffer for exchanging binary data over the serial interface. This buffer uses the same memory as boSerialASCIIWriteBuffer.
        Return: A RegisterFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBinaryWriteBuffer_get(self)

    __swig_setmethods__['boSerialBytesAvailableForRead'] = lambda self, value: self.boSerialBytesAvailableForRead.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialBytesAvailableForRead.Set(value)
    @property
    def boSerialBytesAvailableForRead(self) -> "IntegerFeature":
        """
        When refreshed number of available data bytes for read are shown.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBytesAvailableForRead_get(self)

    __swig_setmethods__['boSerialBytesRead'] = lambda self, value: self.boSerialBytesRead.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialBytesRead.Set(value)
    @property
    def boSerialBytesRead(self) -> "IntegerFeature":
        """
        Length of data read with last SerialRead command.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBytesRead_get(self)

    __swig_setmethods__['boSerialBytesToRead'] = lambda self, value: self.boSerialBytesToRead.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialBytesToRead.Set(value)
    @property
    def boSerialBytesToRead(self) -> "IntegerFeature":
        """
        Length of data to read.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBytesToRead_get(self)

    __swig_setmethods__['boSerialBytesToWrite'] = lambda self, value: self.boSerialBytesToWrite.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialBytesToWrite.Set(value)
    @property
    def boSerialBytesToWrite(self) -> "IntegerFeature":
        """
        Length of data to write.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBytesToWrite_get(self)

    __swig_setmethods__['boSerialBytesWritten'] = lambda self, value: self.boSerialBytesWritten.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialBytesWritten.Set(value)
    @property
    def boSerialBytesWritten(self) -> "IntegerFeature":
        """
        Length of data written with last boSerialWrite command.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialBytesWritten_get(self)

    __swig_setmethods__['boSerialConfigBaudRate'] = lambda self, value: self.boSerialConfigBaudRate.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialConfigBaudRate.Set(value)
    @property
    def boSerialConfigBaudRate(self) -> "CboSerialConfigBaudRate":
        """
        Serial interface clock frequency.
        Return: A CboSerialConfigBaudRate object to control the value.
        possible values:
        - Baudrate115200Hz - Serial interface clock frequency is 115200 Hz.
        - Baudrate1843200Hz - Serial interface clock frequency is 1843200 Hz.
        - Baudrate19200Hz - Serial interface clock frequency is 19200 Hz.
        - Baudrate230400Hz - Serial interface clock frequency is 230400 Hz.
        - Baudrate38400Hz - Serial interface clock frequency is 38400 Hz.
        - Baudrate460800Hz - Serial interface clock frequency is 460800 Hz.
        - Baudrate57600Hz - Serial interface clock frequency is 57600 Hz.
        - Baudrate921600Hz - Serial interface clock frequency is 921600 Hz.
        - Baudrate9600Hz - Serial interface clock frequency is 9600 Hz.
        """
        return _neoapi.FeatureAccess_boSerialConfigBaudRate_get(self)

    __swig_setmethods__['boSerialConfigDataBits'] = lambda self, value: self.boSerialConfigDataBits.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialConfigDataBits.Set(value)
    @property
    def boSerialConfigDataBits(self) -> "CboSerialConfigDataBits":
        """
        Number of data bits.
        Return: A CboSerialConfigDataBits object to control the value.
        possible values:
        - Eight - Serial data bits are 8.
        - Five - Serial data bits are 5.
        - Seven - Serial data bits are 7.
        - Six - Serial data bits are 6.
        """
        return _neoapi.FeatureAccess_boSerialConfigDataBits_get(self)

    __swig_setmethods__['boSerialConfigParity'] = lambda self, value: self.boSerialConfigParity.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialConfigParity.Set(value)
    @property
    def boSerialConfigParity(self) -> "CboSerialConfigParity":
        """
        Serial interface parity.
        Return: A CboSerialConfigParity object to control the value.
        possible values:
        - Even - Serial parity is even.
        - Mark - Serial parity is mark.
        - None - Serial parity is none.
        - Odd - Serial parity is odd.
        - Space - Serial parity is space.
        """
        return _neoapi.FeatureAccess_boSerialConfigParity_get(self)

    __swig_setmethods__['boSerialConfigStopBits'] = lambda self, value: self.boSerialConfigStopBits.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialConfigStopBits.Set(value)
    @property
    def boSerialConfigStopBits(self) -> "CboSerialConfigStopBits":
        """
        Number of stop bits.
        Return: A CboSerialConfigStopBits object to control the value.
        possible values:
        - One - Serial stop bit is one.
        - OnePtFive - Serial stop bit is one pt five.
        - Two - Serial stop bits are two.
        """
        return _neoapi.FeatureAccess_boSerialConfigStopBits_get(self)

    __swig_setmethods__['boSerialMode'] = lambda self, value: self.boSerialMode.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialMode.Set(value)
    @property
    def boSerialMode(self) -> "CboSerialMode":
        """
        States the interface mode of the serial interface.
        Return: A CboSerialMode object to control the value.
        possible values:
        - Bypass - Bypass mode. UART1 of Power and Process Interface and UART0 Interface are connected.
        - Off - The serial interface is off and shall not be used.
        - OpticControl - The serial interface shall be used for optic control.
        - boSerialControl - The serial interface shall be used for bo serial control.
        """
        return _neoapi.FeatureAccess_boSerialMode_get(self)

    @property
    def boSerialRead(self) -> "CommandFeature":
        """
        Command to read data from serial interface.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialRead_get(self)

    __swig_setmethods__['boSerialSelector'] = lambda self, value: self.boSerialSelector.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialSelector.Set(value)
    @property
    def boSerialSelector(self) -> "CboSerialSelector":
        """
        Selects which serial interface to configure.
        Return: A CboSerialSelector object to control the value.
        possible values:
        - UART0 - Selects the UART0 Interface which can be used, for example, to control optical components.
        - UART1 - Selects the UART1 Interface which is part of the Power and Process Interface and can be used for RS232 communication.
        """
        return _neoapi.FeatureAccess_boSerialSelector_get(self)

    __swig_setmethods__['boSerialStatus'] = lambda self, value: self.boSerialStatus.Set(value.value) if isinstance(value, BaseFeature) else self.boSerialStatus.Set(value)
    @property
    def boSerialStatus(self) -> "IntegerFeature":
        """
        Result of the serial error detection mechanism. The value is reset with each read access.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialStatus_get(self)

    @property
    def boSerialWrite(self) -> "CommandFeature":
        """
        Command to write data to serial interface.
        Return: A CommandFeature object to control the value.
        """
        return _neoapi.FeatureAccess_boSerialWrite_get(self)

    __swig_setmethods__['eVAAppletEnable'] = lambda self, value: self.eVAAppletEnable.Set(value.value) if isinstance(value, BaseFeature) else self.eVAAppletEnable.Set(value)
    @property
    def eVAAppletEnable(self) -> "BoolFeature":
        """
        Enables the eVA Applet.
        Return: A BoolFeature object to control the value.
        """
        return _neoapi.FeatureAccess_eVAAppletEnable_get(self)

    __swig_setmethods__['eVAAppletOverlappedImages'] = lambda self, value: self.eVAAppletOverlappedImages.Set(value.value) if isinstance(value, BaseFeature) else self.eVAAppletOverlappedImages.Set(value)
    @property
    def eVAAppletOverlappedImages(self) -> "IntegerFeature":
        """
        Sets the number of overlapped images if eVA applet is enabled.
        Return: A IntegerFeature object to control the value.
        """
        return _neoapi.FeatureAccess_eVAAppletOverlappedImages_get(self)


FeatureAccess_swigregister = _neoapi.FeatureAccess_swigregister
FeatureAccess_swigregister(FeatureAccess)

NeoImageCompression_RAW = _neoapi.NeoImageCompression_RAW
NeoImageCompression_Jpeg = _neoapi.NeoImageCompression_Jpeg
class Image(_object):
    """
    Provides an object to get access to image data and its properties
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A Image object
        """
        this = _neoapi.new_Image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._ubufr = None



    __swig_destroy__ = _neoapi.delete_Image
    __del__ = lambda self: None

    def IsEmpty(self) -> "bool":
        """
        Check if the image is empty or filled with data
        Return: False if the image is filled with data, otherwise True
        """
        return _neoapi.Image_IsEmpty(self)

    def GetAvailablePixelFormats(self) -> "tuple":
        """
        Get a list with available PixelFormats for Convert
        Return: list of available PixelFormats
        """
        return _neoapi.Image_GetAvailablePixelFormats(self)

    def IsPixelFormatAvailable(self, pixelformat: 'str') -> "bool":
        """
        Indicates whether the PixelFormat is available for conversion
        Parameter:
            pixelformat The target PixelFormat name
        Return: True if the pixelformat is available to work with, otherwise false
        """
        return _neoapi.Image_IsPixelFormatAvailable(self, pixelformat)

    def GetImageID(self) -> "int":
        """
        Get the ID of the image, returns zero as long the image is not filled with data
        Return: The ID of the Image
        """
        return _neoapi.Image_GetImageID(self)

    def GetTimestamp(self) -> "int":
        """
        Get the timestamp of the image, returns zero as long the image is not filled with data
        Return: The timestamp of the Image
        """
        return _neoapi.Image_GetTimestamp(self)

    def GetSize(self) -> "int":
        """
        Get the size of the image in byte, returns zero if the image is empty
        Return: The size of the Image in byte
        """
        return _neoapi.Image_GetSize(self)

    def GetHeight(self) -> "int":
        """
        Get the height of the image in pixel, returns zero if the image is empty
        Return: The height of the Image in pixel
        """
        return _neoapi.Image_GetHeight(self)

    def GetWidth(self) -> "int":
        """
        Get the width of the image in pixel, returns zero if the image is empty
        Return: The width of the Image in pixel
        """
        return _neoapi.Image_GetWidth(self)

    def GetPixelFormat(self) -> "str":
        """
        Get the pixel format of the image, returns an empty string if the image is empty
        Return: The pixel format of the image
        """
        return _neoapi.Image_GetPixelFormat(self)

    def GetXPadding(self) -> "int":
        """
        The number of extra bytes transmitted at the end of each line
        Return: The number of extra bytes transmitted at the end of each line
        """
        return _neoapi.Image_GetXPadding(self)

    def GetYPadding(self) -> "int":
        """
        The number of extra bytes transmitted at the end of the image
        Return: The number of extra bytes transmitted at the end of the image
        """
        return _neoapi.Image_GetYPadding(self)

    def GetChunkList(self) -> "FeatureList":
        """
        Get a list of all available chunk features of the image
        Return: The compression methode
        """
        return _neoapi.Image_GetChunkList(self)

    def GetCompression(self) -> "NeoImageCompression":
        """
        Get compression methode of the image
        Return: The FeatureList list of available chunk features
        """
        return _neoapi.Image_GetCompression(self)

    def Copy(self) -> "Image":
        """
        Copies the Image object and its image data
        Return: A new Image object
        NoImageBufferException The image could not be copied.
        """
        return _neoapi.Image_Copy(self)

    def Save(self, filename: 'str') -> "None":
        """
        Save the image in bmp format at the given path
        Parameter:
            filename The filename or path for the saved image
        Return: None
        FileAccessException The image could not be saved at the given Path
        """
        return _neoapi.Image_Save(self, filename)

    def Convert(self, *args) -> "Image":
        """
        Convert the Image  based on the provided settings
        Parameter:
            *args Arguments:\n
            __pixelformat__  The target PixelFormat name\n
            or\n
            __settings__ The settings for the converted image.
        Return: A new Image with requested Settings
        bgapi exception are covered by resulting empty image
        """
        return _neoapi.Image_Convert(self, *args)

    def GetImageData(self) -> "PyObject":
        """
        Get a pointer to the image data, returns nullptr as long as the image is not filled with data.
        Return: The pointer to image data
        """
        val = _neoapi.Image_GetImageData(self)

        if val:
            val = (ctypes.c_ubyte * len(val)).from_buffer(val)


        return val


    def GetUserBuffer(self):
        """
        Get access to a object inherited by NeoAPI::BufferBase and used by this image.
        Return: UserBuffer object
        """
        return self._ubufr

    def _get_pf_mapping(self, pf):
        pf_mapping = {
        "Mono8":             (_neoapi_numpy.uint8,    1, "",           1 ),
        "Mono8s":            (_neoapi_numpy.int8,     1, "",           1 ),
        "Mono10":            (_neoapi_numpy.uint16,   1, "",           64),
        "Mono10Packed":      (_neoapi_numpy.uint16,   1, "Mono10",     64),
        "Mono12":            (_neoapi_numpy.uint16,   1, "",           16),
        "Mono12Packed":      (_neoapi_numpy.uint16,   1, "Mono12",     16),
        "Mono16":            (_neoapi_numpy.uint16,   1, "",           1 ),
        "BayerGR8":          (_neoapi_numpy.uint8,    1, "",           1 ),
        "BayerRG8":          (_neoapi_numpy.uint8,    1, "",           1 ),
        "BayerGB8":          (_neoapi_numpy.uint8,    1, "",           1 ),
        "BayerBG8":          (_neoapi_numpy.uint8,    1, "",           1 ),
        "BayerGR10":         (_neoapi_numpy.uint16,   1, "",           64),
        "BayerRG10":         (_neoapi_numpy.uint16,   1, "",           64),
        "BayerGB10":         (_neoapi_numpy.uint16,   1, "",           64),
        "BayerBG10":         (_neoapi_numpy.uint16,   1, "",           64),
        "BayerGR12":         (_neoapi_numpy.uint16,   1, "",           16),
        "BayerRG12":         (_neoapi_numpy.uint16,   1, "",           16),
        "BayerGB12":         (_neoapi_numpy.uint16,   1, "",           16),
        "BayerBG12":         (_neoapi_numpy.uint16,   1, "",           16),
        "RGB8":              (_neoapi_numpy.uint8,    3, "",           1 ),
        "BGR8":              (_neoapi_numpy.uint8,    3, "",           1 ),
        "RGBa8":             (_neoapi_numpy.uint8,    4, "",           1 ),
        "BGRa8":             (_neoapi_numpy.uint8,    4, "",           1 ),
        "RGB10":             (_neoapi_numpy.uint16,   3, "",           64),
        "BGR10":             (_neoapi_numpy.uint16,   3, "",           64),
        "RGB12":             (_neoapi_numpy.uint16,   3, "",           16),
        "BGR12":             (_neoapi_numpy.uint16,   3, "",           16),
        "YUV411_8_UYYVYY":   (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "YUV422_8_UYVY":     (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "YUV8_UYV":          (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "RGB8_Planar":       (_neoapi_numpy.uint8,    3, "",           1 ),
        "RGB10_Planar":      (_neoapi_numpy.uint16,   3, "",           64),
        "RGB12_Planar":      (_neoapi_numpy.uint16,   3, "",           16),
        "RGB16_Planar":      (_neoapi_numpy.uint16,   3, "",           1 ),
        "Mono14":            (_neoapi_numpy.uint16,   1, "",           4 ),
        "BayerGR10Packed":   (_neoapi_numpy.uint16,   1, "BayerGR10",  64),
        "BayerRG10Packed":   (_neoapi_numpy.uint16,   1, "BayerRG10",  64),
        "BayerGB10Packed":   (_neoapi_numpy.uint16,   1, "BayerGB10",  64),
        "BayerBG10Packed":   (_neoapi_numpy.uint16,   1, "BayerBG10",  64),
        "BayerGR12Packed":   (_neoapi_numpy.uint16,   1, "BayerGR12",  16),
        "BayerRG12Packed":   (_neoapi_numpy.uint16,   1, "BayerRG12",  16),
        "BayerGB12Packed":   (_neoapi_numpy.uint16,   1, "BayerGB12",  16),
        "BayerBG12Packed":   (_neoapi_numpy.uint16,   1, "BayerBG12",  16),
        "BayerGR16":         (_neoapi_numpy.uint16,   1, "",           1 ),
        "BayerRG16":         (_neoapi_numpy.uint16,   1, "",           1 ),
        "BayerGB16":         (_neoapi_numpy.uint16,   1, "",           1 ),
        "BayerBG16":         (_neoapi_numpy.uint16,   1, "",           1 ),
        "RGB16":             (_neoapi_numpy.uint16,   3, "",           1 ),
        "Mono10p":           (_neoapi_numpy.uint16,   1, "Mono10",     64),
        "Mono12p":           (_neoapi_numpy.uint16,   1, "Mono12",     16),
        "BGR12p":            (_neoapi_numpy.uint16,   3, "BGR16",      16),
        "BGR14":             (_neoapi_numpy.uint16,   3, "BGR16",      4 ),
        "BGR16":             (_neoapi_numpy.uint16,   3, "BGR16",      1 ),
        "BayerBG10p":        (_neoapi_numpy.uint16,   1, "BayerBG10",  64),
        "BayerBG12p":        (_neoapi_numpy.uint16,   1, "BayerBG12",  16),
        "BayerGB10p":        (_neoapi_numpy.uint16,   1, "BayerGB10",  64),
        "BayerGB12p":        (_neoapi_numpy.uint16,   1, "BayerGB12",  11),
        "BayerGR10p":        (_neoapi_numpy.uint16,   1, "BayerGR10",  64),
        "BayerGR12p":        (_neoapi_numpy.uint16,   1, "BayerGR12",  16),
        "BayerRG10p":        (_neoapi_numpy.uint16,   1, "BayerRG10",  64),
        "BayerRG12p":        (_neoapi_numpy.uint16,   1, "BayerRG12",  16),
        "RGB12p":            (_neoapi_numpy.uint16,   3, "BGR12",      16),
        "RGB14":             (_neoapi_numpy.uint16,   3, "",           4 ),
        "R8":                (_neoapi_numpy.uint8,    1, "",           1 ),
        "G8":                (_neoapi_numpy.uint8,    1, "",           1 ),
        "B8":                (_neoapi_numpy.uint8,    1, "",           1 ),
        "R10":               (_neoapi_numpy.uint16,   1, "",           64),
        "R12":               (_neoapi_numpy.uint16,   1, "",           16),
        "G10":               (_neoapi_numpy.uint16,   1, "",           64),
        "G12":               (_neoapi_numpy.uint16,   1, "",           16),
        "B10":               (_neoapi_numpy.uint16,   1, "",           64),
        "B12":               (_neoapi_numpy.uint16,   1, "",           16),
        "R12p":              (_neoapi_numpy.uint16,   1, "R12",        16),
        "B12p":              (_neoapi_numpy.uint16,   1, "B12",        16),
        "G12p":              (_neoapi_numpy.uint16,   1, "G12",        16),
        "BaumerPolarized8":  (_neoapi_numpy.uint8,    1, "Mono8",      1 ),
        "BaumerPolarized10": (_neoapi_numpy.uint8,    1, "Mono8",      1 ),
        "BaumerPolarized12": (_neoapi_numpy.uint8,    1, "Mono8",      1 ),
        "BaumerPolarized12p":(_neoapi_numpy.uint8,    1, "Mono8",      1 ),
    # aliases
        "RGB8Packed":        (_neoapi_numpy.uint8,    3, "",           1 ),
        "BGR8Packed":        (_neoapi_numpy.uint8,    3, "",           1 ),
        "RGB10Packed":       (_neoapi_numpy.uint16,   3, "",           64),
        "BGR10Packed":       (_neoapi_numpy.uint16,   3, "",           64),
        "BGR10":             (_neoapi_numpy.uint16,   3, "",           64),
        "RGB12Packed":       (_neoapi_numpy.uint16,   3, "",           16),
        "BGR12Packed":       (_neoapi_numpy.uint16,   3, "",           16),
        "BGR12":             (_neoapi_numpy.uint16,   3, "",           16),
        "RGBA8Packed":       (_neoapi_numpy.uint8,    4, "",           1 ),
        "BGRA8Packed":       (_neoapi_numpy.uint8,    4, "",           1 ),
        "YUV411Packed":      (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "YUV422Packed":      (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "YUV444Packed":      (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "YUV8":              (_neoapi_numpy.uint8,    3, "BGR8",       1 ),
        "Mono8Signed":       (_neoapi_numpy.uint8,    1, "",           1 ),
        "RGB16Packed":       (_neoapi_numpy.uint16,   3, "",           1 ),
        "BGR16Packed":       (_neoapi_numpy.uint16,   3, "BGR16",      1 ),
        }

        if pf in pf_mapping:
            return pf_mapping[pf]
        else:
            return (_neoapi_numpy.uint8, 1, "", 1)

    @needs_numpy
    def GetNPArray(self):
        """
        Get the image data as a numpy array, returns nullptr if the image is empty
        Return: The image data as numpy array
        """
        pf = self.GetPixelFormat()
        (type, chan, npf, scale) = self._get_pf_mapping(pf)
        buf = self.GetImageData()
        if npf:
            if self.IsPixelFormatAvailable(npf):
                img = self.Convert(npf)
                buf = img.GetImageData()
            else:
                raise RuntimeError("need converter for this pixelformat!")
        shape = (self.GetHeight(), self.GetWidth(), chan)

        arr = _neoapi_numpy.ndarray(shape, dtype = type, buffer=buf)
        if scale != 1:
            arr = arr * scale
        return arr

Image_swigregister = _neoapi.Image_swigregister
Image_swigregister(Image)

class CamBase(_object):
    """
    Base camera class from which other camera classes inherit functionality
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A CamBase object
        """
        this = _neoapi.new_CamBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CamBase
    __del__ = lambda self: None
    if _newclass:
        GetLibraryVersion = staticmethod(_neoapi.CamBase_GetLibraryVersion)
    else:
        GetLibraryVersion = _neoapi.CamBase_GetLibraryVersion

    def Connect(self, *args) -> "CamBase":
        """
        Connect a GenICam camera device to work with it
        Parameter:
            *args Arguments:\n
            __identifier__ (optional) A string value with the camera identifier
        Return: The CamBase object
        """
        return _neoapi.CamBase_Connect(self, *args)

    def Disconnect(self) -> "CamBase":
        """
        Disconnect a GenICam camera device
        Return: The CamBase object
        """
        return _neoapi.CamBase_Disconnect(self)

    def IsConnected(self) -> "bool":
        """
        Checks if a camera is connected
        Return: True if a camera is connected, otherwise False
        """
        return _neoapi.CamBase_IsConnected(self)

    def StartStreaming(self) -> "CamBase":
        """
        Start streaming from this camera. (Streaming is started by Conncet)
        Return: The CamBase object
        """
        return _neoapi.CamBase_StartStreaming(self)

    def StopStreaming(self) -> "CamBase":
        """
        Stop streaming from this camera.
        Return: The CamBase object
        """
        return _neoapi.CamBase_StopStreaming(self)

    def IsStreaming(self) -> "bool":
        """
        Checks if a camera is streaming
        Return: True if a camera is streaming, otherwise False
        """
        return _neoapi.CamBase_IsStreaming(self)

    def GetFeature(self, name: 'str') -> "Feature":
        """
        Get a Feature to access to it's properties, see Cam.f for a more convenient way to access features
        Parameter:
            name The name of the feature to retrieve (SFNC Name)
        Return: The Feature object
        NotConnectedException No device connected
        FeatureAccessException The feature is not accessible
        """
        return _neoapi.CamBase_GetFeature(self, name)

    def HasFeature(self, name: 'str') -> "bool":
        """
        Indicates if a feature is supported by a camera, see Cam.f for a more convenient way to access features
        Parameter:
            name The name of the feature to read (SFNC Name)
        Return: True if the feature is supported by the camera otherwise False
        NotConnectedException No device connected
        """
        return _neoapi.CamBase_HasFeature(self, name)

    def IsReadable(self, name: 'str') -> "bool":
        """
        Indicates that the Feature object is readable
        Parameter:
            name The name of the Feature
        Return: True if the Feature object is readable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.CamBase_IsReadable(self, name)

    def IsWritable(self, name: 'str') -> "bool":
        """
        Indicates that the Feature object is writable
        Parameter:
            name The name of the Feature
        Return: True if the Feature object is writable, otherwise False
        FeatureAccessException The calling object is not valid
        """
        return _neoapi.CamBase_IsWritable(self, name)

    def SetFeature(self, *args) -> "CamBase":
        """
        Set the value of a feature of the camera, see Cam.f for a more convenient way to access features
        Parameter:
            *args Arguments:\n
            __name__  The name of the feature to write (SFNC Name)\n
            __value__ (optional) The integer value which should be written to the feature
        Return: The CamBase object
        NotConnectedException No device connected
        FeatureAccessException The feature is not accessible
        """
        return _neoapi.CamBase_SetFeature(self, *args)

    def Execute(self, name: 'str') -> "CamBase":
        """
        Executes an exectutable SFNC-ICommand-Feature of the camera
        Parameter:
            name The name of the feature to execute (SFNC name)
        Return: The CamBase object
        NotConnectedException No device connected
        FeatureAccessException The feature is not accessible
        """
        return _neoapi.CamBase_Execute(self, name)

    def GetFeatureList(self) -> "FeatureList":
        """
        Get a list of all available features of the camera
        Return: The list of available Features
        NotConnectedException No device connected
        """
        return _neoapi.CamBase_GetFeatureList(self)

    def GetRuntimeInfoList(self) -> "FeatureList":
        """
        Get a list of all available runtime infos
        Return: A list of available runtime infos
        NotConnectedException No device connected
        """
        return _neoapi.CamBase_GetRuntimeInfoList(self)

    def WriteFeatureStack(self, featurestack: 'FeatureStack') -> "CamBase":
        """
        Set the value of multiple feature of the camera in one operation to speed up the configuration of the camera
        Parameter:
            featurestack  The set of features to write
        Return: The CamBase object
        NotConnectedException No device connected
        FeatureAccessException One or more features are not accessible
        """
        return _neoapi.CamBase_WriteFeatureStack(self, featurestack)

    def GetImage(self, timeout: 'int'=400) -> "Image":
        """
        Get an image from the camera
        Parameter:
            timeout Timeout in ms to wait for an image, default is 400 ms
        Return: An Image object with all relevant data, could be empty
        NotConnectedException No device connected
        NoImageBufferException No image buffer available to store data
        """
        val = _neoapi.CamBase_GetImage(self, timeout)

        if self._ubufrs:
            data = val.GetImageData()
            val._ubufr = self._ubufrs.get(ctypes.addressof(data), None) if data else None
        else:
            val._ubufr = None


        return val


    def ClearImages(self) -> "CamBase":
        """
        Delete the image queue
        Return: The CamBase object
        NotConnectedException No device connected
        """
        return _neoapi.CamBase_ClearImages(self)

    def EnableImageCallback(self, callback):
        """
        Enable image callback
        Parameter:
            callback The ImageCallback method of the given object will be called for every image data.
        Return: The CamBase object
        """
        if callable(callback):
            class InlineImageCallback(NeoImageCallback):
                """
                Auto created callback class.
                """
                def ImageCallback(self, image):
                    """
                    Auto created callback methode.
                    """
                    callback(image)
            self.DisableImageCallback()
            ret = self._inline_imagecallback = InlineImageCallback()
            return self.EnableImageCallback(ret)
        else:
            callback._ubufrs = self._ubufrs
            return _neoapi.CamBase_EnableImageCallback(self, callback)



    def DisableImageCallback(self) -> "CamBase":
        """
        Disable image callback.
        Return: The CamBase object
        """
        return _neoapi.CamBase_DisableImageCallback(self)

    def SetUserBufferMode(self, user_buffers: 'bool'=True) -> "CamBase":
        """
        In user buffer mode the camera uses buffers provided by AddUserBuffer
        Parameter:
            user_buffers True to enable UserBufferMode, otherwise false (default ist true)
        Return: The CamBase object
        """
        return _neoapi.CamBase_SetUserBufferMode(self, user_buffers)

    def GetUserBufferMode(self) -> "bool":
        """
        In user buffer mode the camera uses buffers provided by AddUserBuffer.
        Return: The state of user buffer mode
        """
        return _neoapi.CamBase_GetUserBufferMode(self)

    def AddUserBuffer(self, buffer: 'BufferBase') -> "CamBase":
        """
        Add a user allocated memory for use as buffer in UserBufferMode
        Parameter:
            buffer object derived from NeoAPI::BufferBase that should used as buffer
            managed only for internal user
        Return: The CamBase object
        InvalidArgumentException  buffer is not initialized correctly
        """
        val = _neoapi.CamBase_AddUserBuffer(self, buffer)
        val._ubufrs[buffer._key] = buffer
        return val



    def RevokeUserBuffer(self, buffer: 'BufferBase') -> "CamBase":
        """
        Revoke a user allocated memory from buffer list
        Parameter:
            buffer object derived from NeoAPI::BufferBase that not used anymore by NeoAPI
        Return: The CamBase object
        """
        val = _neoapi.CamBase_RevokeUserBuffer(self, buffer)

        val._ubufrs.pop(buffer._key, None)


        return val


    def SetImageBufferCount(self, buffercount: 'int'=10) -> "CamBase":
        """
        Set the number of internal used image buffers
        Parameter:
            buffercount Image buffer count, if set to zero the default of 10 buffers will be used
        Return: The CamBase object
        """
        return _neoapi.CamBase_SetImageBufferCount(self, buffercount)

    def GetImageBufferCount(self) -> "int":
        """
        Get the current number of internal or external image buffers
        Return: The Current image buffer count
        """
        return _neoapi.CamBase_GetImageBufferCount(self)

    def SetImageBufferCycleCount(self, cyclecount: 'int'=1) -> "CamBase":
        """
        Set the number of internal image buffers to be cycled automatically
        Parameter:
            cyclecount Image buffer count
        Return: The CamBase object
        """
        return _neoapi.CamBase_SetImageBufferCycleCount(self, cyclecount)

    def GetImageBufferCycleCount(self) -> "int":
        """
        Get the number of internal image buffers to be cycled automatically
        Return: buffers to be cycled
        """
        return _neoapi.CamBase_GetImageBufferCycleCount(self)

    def SetSynchronFeatureMode(self, synchronous: 'bool'=True) -> "CamBase":
        """
        In synchronous mode the acquisition will restart for every feature change, to ensure new values will be reflected in the next image.
        Parameter:
            synchronous True to enable SynchronMode, otherwise False (default ist True)
        Return: The CamBase object
        """
        return _neoapi.CamBase_SetSynchronFeatureMode(self, synchronous)

    def GetSynchronFeatureMode(self) -> "bool":
        """
        In synchronous mode the acquisition will restart for every feature change, to ensure new values will be reflected in the next image.
        Return: synchronous mode state
        """
        return _neoapi.CamBase_GetSynchronFeatureMode(self)

    def SetAdjustFeatureValueMode(self, adjust: 'bool'=True) -> "CamBase":
        """
        With AdjustFeatureValueMode enabled feature values will be checked an adjusted where necessary
        Parameter:
            adjust True to adjust feature values, otherwise False (default ist True)
        Return: The CamBase object
        """
        return _neoapi.CamBase_SetAdjustFeatureValueMode(self, adjust)

    def GetAdjustFeatureValueMode(self) -> "bool":
        """
        With AdjustFeatureValueMode enabled feature values will be checked an adjusted where necessary
        Return: adjust feature values state
        """
        return _neoapi.CamBase_GetAdjustFeatureValueMode(self)

    def GetAvailableChunks(self) -> "tuple":
        """
        Query the list of the names of the existing chunk data
        Return: The CamBase object
        """
        return _neoapi.CamBase_GetAvailableChunks(self)

    def EnableChunk(self, *args) -> "CamBase":
        """
        Allow all or individual chunk data
        Parameter:
            args name - empty string for all chunk data or name from GetAvailableChunks for special chunk data.
        Return: The CamBase object
        """
        return _neoapi.CamBase_EnableChunk(self, *args)

    def DisableChunk(self, *args) -> "CamBase":
        """
        Disallow all or individual chunk data
        Parameter:
            args name - empty string for all chunk data or name from GetAvailableChunks for special chunk data.
        Return: The CamBase object
        """
        return _neoapi.CamBase_DisableChunk(self, *args)

    def GetAvailableEvents(self) -> "tuple":
        """
        Get a list of event names supported by the camera
        Return: A list containing the names of possible events
        """
        return _neoapi.CamBase_GetAvailableEvents(self)

    def GetEnabledEvents(self) -> "tuple":
        """
        Get a list of event names enabled in the camera
        Return: A list containing the names of enabled events
        """
        return _neoapi.CamBase_GetEnabledEvents(self)

    def EnableEvent(self, name: 'str', max_queuesize: 'int'=1000) -> "CamBase":
        """
        Enable a camera event
        Parameter:
            name of event to enable or disable
            max_queuesize The upper limit of events to keep.
        Return: The CamBase object
        """
        return _neoapi.CamBase_EnableEvent(self, name, max_queuesize)

    def DisableEvent(self, name: 'str') -> "CamBase":
        """
        Disable a camera event
        Parameter:
            name of event to enable or disable
        Return: The CamBase object
        """
        return _neoapi.CamBase_DisableEvent(self, name)

    def GetEvent(self, *args) -> "NeoEvent":
        """
        Get an event from the camera
        Parameter:
            *args Arguments:\n
            name Name of event to wait for, default is ""
            timeout Timeout in ms to wait for an event, default is 400 ms
        Return: The NeoEvent object with all relevant data, could be empty
        NotConnectedException No device connected.
        """
        return _neoapi.CamBase_GetEvent(self, *args)

    def ClearEvents(self, *args) -> "CamBase":
        """
        Clear the event queue for a specific event
        Parameter:
            *args Arguments:\n
            Name of event to clear the queue for, default is ""
        Return: The CamBase object
        NotConnectedException No device connected.
        """
        return _neoapi.CamBase_ClearEvents(self, *args)

    def EnableEventCallback(self, callback, name=""):
        """
        Enable event callback.
        Parameter:
            callback The EventCallback method of the given object will be called for every event data.
            name Name of event to wait for, default is empty to wait for any event
        Return: The CamBase object
        """
        if callable(callback):
            class InlineEventCallback(NeoEventCallback):
                """
                Auto created callback class.
                """
                def EventCallback(self, event):
                    """
                    Auto created callback methode.
                    """
                    callback(event)
            self.DisableEventCallback(name)
            if not hasattr(self, '_inline_eventcallback'):
                self._inline_eventcallback = {}
            ret = self._inline_eventcallback[name] = InlineEventCallback()
            return self.EnableEventCallback(ret, name)
        else:
            return _neoapi.CamBase_EnableEventCallback(self, callback, name)



    def DisableEventCallback(self, *args) -> "CamBase":
        """
        Disable event callback.
        Parameter:
            *args Arguments:\n
            Name of event to disable the callback for, default is ""
        Return: The CamBase object
        """
        return _neoapi.CamBase_DisableEventCallback(self, *args)

    def IsOnline(self) -> "bool":
        """
        Checks if a camera is online
        Return: True if the camera is online and ready to use, otherwise false
        """
        return _neoapi.CamBase_IsOnline(self)

    def GetOfflineCount(self) -> "int":
        """
        Get the number of times the camera was offline
        Return: The counter of offline events for this camera
        """
        return _neoapi.CamBase_GetOfflineCount(self)

    def GetPnPEvent(self, timeout: 'int'=400) -> "NeoEvent":
        """
        Get a plug and play event from the camera
        Parameter:
            timeout Timeout in ms to wait for an event, default is 400 ms
        Return: The NeoEvent object with all relevant data, could be empty
        NotConnectedException No device connected.
        """
        return _neoapi.CamBase_GetPnPEvent(self, timeout)

    def ClearPnPEvents(self) -> "CamBase":
        """
        Delete the event queue
        Return: The CamBase object
        NotConnectedException No device connected.
        """
        return _neoapi.CamBase_ClearPnPEvents(self)

    def EnablePnPEventCallback(self, callback):
        """
        Enable event callback.
        Parameter:
            callback The EventCallback method of the given object will be called for every event data.
        Return: The CamBase object
        """
        if callable(callback):
            class InlineEventCallback(NeoEventCallback):
                """
                Auto created callback class.
                """
                def EventCallback(self, event):
                    """
                    Auto created callback methode.
                    """
                    callback(event)
            self.DisablePnPEventCallback()
            ret = self._inline_eventcallback = InlineEventCallback()
            return self.EnablePnPEventCallback(ret)
        else:
            return _neoapi.CamBase_EnablePnPEventCallback(self, callback)



    def DisablePnPEventCallback(self) -> "CamBase":
        """
        Disable event callback.
        Return: The CamBase object
        """
        return _neoapi.CamBase_DisablePnPEventCallback(self)

    def GetInfo(self) -> "CamInfo":
        """
        Get basic information about the camera.
        Return: The camera information
        """
        return _neoapi.CamBase_GetInfo(self)

    def __del__(self, *args):
        """
        Destructor
        """
        try:
            if self._ubufrs:
                self.StopStreaming()
        except AttributeError:
            pass


    @property
    def __enter__(self) -> "Cam":
        return self
    def __exit__(self, *args, **kwargs) -> "Cam":
        self.Disconnect()

CamBase_swigregister = _neoapi.CamBase_swigregister
CamBase_swigregister(CamBase)

def CamBase_GetLibraryVersion() -> "str":
    """
    Get the version of the library
    Return: The version as a string in the format "Mayor.Minor.Patch"
    """
    return _neoapi.CamBase_GetLibraryVersion()
CamBase_GetLibraryVersion = _neoapi.CamBase_GetLibraryVersion

class Cam(CamBase):
    """
    Main camera class &mdash; connect, set features, retrieve images
    """
    __swig_setmethods__ = {}
    for _s in [CamBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cam, name, value)
    __swig_getmethods__ = {}
    for _s in [CamBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) An Cam object
        """
        this = _neoapi.new_Cam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._ubufrs = {}



    __swig_destroy__ = _neoapi.delete_Cam
    __del__ = lambda self: None

    def Connect(self, *args) -> "Cam":
        """
        Connect a GenICam camera device to work with it
        Parameter:
            *args Arguments:\n
            __identifier__ (optional) A string value with the camera identifier
        Return: The Cam object
        """
        return _neoapi.Cam_Connect(self, *args)

    def Disconnect(self) -> "Cam":
        """
        Disconnect a GenICam camera device
        Return: The Cam object
        """
        return _neoapi.Cam_Disconnect(self)

    def StartStreaming(self) -> "Cam":
        """
        Start streaming from this camera. (Streaming is started by Conncet)
        Return: The Cam object
        """
        return _neoapi.Cam_StartStreaming(self)

    def StopStreaming(self) -> "Cam":
        """
        Stop streaming from this camera.
        Return: The Cam object
        """
        return _neoapi.Cam_StopStreaming(self)

    def SetFeature(self, *args) -> "Cam":
        """
        Set the value of a feature of the camera, see Cam.f for a more convenient way to access features
        Parameter:
            *args Arguments:\n
            __name__  The name of the feature to write (SFNC Name)\n
            __value__ (optional) The integer value which should be written to the feature
        Return: The Cam object
        NotConnectedException No device connected
        FeatureAccessException The feature is not accessible
        """
        return _neoapi.Cam_SetFeature(self, *args)

    def Execute(self, name: 'str') -> "Cam":
        """
        Executes an exectutable SFNC-ICommand-Feature of the camera
        Parameter:
            name The name of the feature to execute (SFNC name)
        Return: The Cam object
        NotConnectedException No device connected
        FeatureAccessException The feature is not accessible
        """
        return _neoapi.Cam_Execute(self, name)

    def WriteFeatureStack(self, featurestack: 'FeatureStack') -> "Cam":
        """
        Set the value of multiple feature of the camera in one operation to speed up the configuration of the camera
        Parameter:
            featurestack  The set of features to write
        Return: The Cam object
        NotConnectedException No device connected
        FeatureAccessException One or more features are not accessible
        """
        return _neoapi.Cam_WriteFeatureStack(self, featurestack)

    def ClearImages(self) -> "Cam":
        """
        Delete the image queue
        Return: The Cam object
        NotConnectedException No device connected
        """
        return _neoapi.Cam_ClearImages(self)

    def EnableImageCallback(self, callback):
        """
        Enable image callback.
        Parameter:
            callback The ImageCallback method of the given object will be called for every image data.
        Return: The Cam object
        """
        CamBase.EnableImageCallback(self, callback)
        return self



    def DisableImageCallback(self) -> "Cam":
        """
        Disable image callback.
        Return: The Cam object
        """
        return _neoapi.Cam_DisableImageCallback(self)

    def SetUserBufferMode(self, user_buffers: 'bool'=True) -> "Cam":
        """
        In user buffer mode the camera uses buffers provided by AddUserBuffer
        Parameter:
            user_buffers True to enable UserBufferMode, otherwise false (default ist true)
        Return: The Cam object
        """
        return _neoapi.Cam_SetUserBufferMode(self, user_buffers)

    def AddUserBuffer(self, buffer: 'BufferBase') -> "Cam":
        """
        Add a user allocated memory for use as buffer in UserBufferMode
        Parameter:
            buffer object derived from NeoAPI::BufferBase that should used as buffer
            managed only for internal user
        Return: The Cam object
        InvalidArgumentException  buffer is not initialized correctly
        """
        CamBase.AddUserBuffer(self, buffer)
        return self



    def RevokeUserBuffer(self, buffer: 'BufferBase') -> "Cam":
        """
        Revoke a user allocated memory from buffer list
        Parameter:
            buffer object derived from NeoAPI::BufferBase that not used anymore by NeoAPI
        Return: The Cam object
        """
        val = _neoapi.Cam_RevokeUserBuffer(self, buffer)

        val._ubufrs.pop(buffer._key, None)


        return val


    def SetImageBufferCount(self, buffercount: 'int'=10) -> "Cam":
        """
        Set the number of internal used image buffers
        Parameter:
            buffercount Image buffer count, if set to zero the default of 10 buffers will be used
        Return: The Cam object
        """
        return _neoapi.Cam_SetImageBufferCount(self, buffercount)

    def SetImageBufferCycleCount(self, cyclecount: 'int'=1) -> "Cam":
        """
        Set the number of internal image buffers to be cycled automatically
        Parameter:
            cyclecount Image buffer count
        Return: The Cam object
        """
        return _neoapi.Cam_SetImageBufferCycleCount(self, cyclecount)

    def SetSynchronFeatureMode(self, synchronous: 'bool'=True) -> "Cam":
        """
        In synchronous mode the acquisition will restart for every feature change, to ensure new values will be reflected in the next image.
        Parameter:
            synchronous True to enable SynchronMode, otherwise False (default ist True)
        Return: The Cam object
        """
        return _neoapi.Cam_SetSynchronFeatureMode(self, synchronous)

    def SetAdjustFeatureValueMode(self, adjust: 'bool'=True) -> "Cam":
        """
        With AdjustFeatureValueMode enabled feature values will be checked an adjusted where necessary
        Parameter:
            adjust True to adjust feature values, otherwise False (default ist True)
        Return: The Cam object
        """
        return _neoapi.Cam_SetAdjustFeatureValueMode(self, adjust)

    def EnableChunk(self, *args) -> "Cam":
        """
        Allow all or individual chunk data.
        Parameter:
            args name - empty string for all chunk data or name from GetAvailableChunks for special chunk data.
        Return: The Cam object
        """
        return _neoapi.Cam_EnableChunk(self, *args)

    def DisableChunk(self, *args) -> "Cam":
        """
        Disallow all or individual chunk data.
        Parameter:
            args name - empty string for all chunk data or name from GetAvailableChunks for special chunk data.
        Return: The Cam object
        """
        return _neoapi.Cam_DisableChunk(self, *args)

    def EnableEvent(self, name: 'str', max_queuesize: 'int'=1000) -> "Cam":
        """
        Enable a camera event
        Parameter:
            name of event to enable or disable
            max_queuesize The upper limit of events to keep.
        Return: The Cam object
        """
        return _neoapi.Cam_EnableEvent(self, name, max_queuesize)

    def DisableEvent(self, name: 'str') -> "Cam":
        """
        Disable a camera event
        Parameter:
            name of event to disable
        Return: The Cam object
        """
        return _neoapi.Cam_DisableEvent(self, name)

    def ClearEvents(self, *args) -> "Cam":
        """
        Clear the event queue for a specific event
        Parameter:
            *args Arguments:\n
            Name of event to clear the queue for, default is ""
        Return: The Cam object
        NotConnectedException No device connected.
        """
        return _neoapi.Cam_ClearEvents(self, *args)

    def EnableEventCallback(self, callback, name=""):
        """
        Enable event callback.
        Parameter:
            callback The EventCallback method of the given object will be called for every event data.
            name Name of event to wait for, default is empty to wait for any event
        Return: The Cam object
        """
        if callable(callback):
            class InlineEventCallback(NeoEventCallback):
                """
                Auto created callback class.
                """
                def EventCallback(self, event):
                    """
                    Auto created callback methode.
                    """
                    callback(event)
            self.DisableEventCallback(name)
            if not hasattr(self, '_inline_eventcallback'):
                self._inline_eventcallback = {}
            ret = self._inline_eventcallback[name] = InlineEventCallback()
            return self.EnableEventCallback(ret, name)
        else:
            return _neoapi.Cam_EnableEventCallback(self, callback, name)



    def DisableEventCallback(self, *args) -> "Cam":
        """
        Disable event callback.
        Parameter:
            *args Arguments:\n
            Name of event to disable the callback for, default is ""
        Return: The Cam object
        """
        return _neoapi.Cam_DisableEventCallback(self, *args)

    def ClearPnPEvents(self) -> "Cam":
        """
        Delete the event queue
        Return: The Cam object
        NotConnectedException No device connected.
        """
        return _neoapi.Cam_ClearPnPEvents(self)

    def EnablePnPEventCallback(self, callback):
        """
        Enable event callback.
        Parameter:
            callback The EventCallback method of the given object will be called for every event data.
        Return: The CamBase object
        """
        if callable(callback):
            class InlinePnPEventCallback(NeoEventCallback):
                """
                Auto created callback class.
                """
                def EventCallback(self, event):
                    """
                    Auto created callback methode.
                    """
                    callback(event)
            self.DisablePnPEventCallback()
            ret = self._inline_pnpeventcallback = InlinePnPEventCallback()
            return self.EnablePnPEventCallback(ret)
        else:
            return _neoapi.Cam_EnablePnPEventCallback(self, callback)



    def DisablePnPEventCallback(self) -> "Cam":
        """
        Disable event callback.
        Return: The Cam object
        """
        return _neoapi.Cam_DisablePnPEventCallback(self)

    def _f(self) -> "FeatureAccess":
        return _neoapi.Cam__f(self)

    def __del__(self, *args):
        """
        Destructor
        """
        CamBase.__del__(self, args)


    @property
    def f(self) -> "FeatureAccess":
        """
        Provides access to the generated camera features
        Return: The FeatureAccess object
        NotConnectedException No device connected
        FeatureAccessException One or more features are not accessible
        """
        return self._f()
    def __enter__(self) -> "Cam":
        return self
    def __exit__(self, *args, **kwargs) -> "Cam":
        self.Disconnect()

Cam_swigregister = _neoapi.Cam_swigregister
Cam_swigregister(Cam)

class FeatureStack(_object):
    """
    Write many featuresat once to quickly configure the camera
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureStack, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A FeatureStack object
        """
        this = _neoapi.new_FeatureStack(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_FeatureStack
    __del__ = lambda self: None

    def Add(self, *args) -> "FeatureStack":
        """
        Add a feature/value pair to the FeatureStack
        Parameter:
            *args Arguments:\n
            __name__  The name of the feature to write (SFNC Name)\n
            __value__ (optional) The value which should be written to the feature
        Return: The FeatureStack object
        """
        return _neoapi.FeatureStack_Add(self, *args)

    def Clear(self) -> "FeatureStack":
        """
        Clear the FeatureStack (remove alle features)
        Return: The FeatureStack object
        """
        return _neoapi.FeatureStack_Clear(self)

    def SetReplaceMode(self, replace: 'bool'=True) -> "FeatureStack":
        """
        In replace mode register accesses are merged together, only the merge result is written to the camera
        Parameter:
            replace  True to combine multiple register accesses if possible, otherwise False
        Return: The FeatureStack object
        """
        return _neoapi.FeatureStack_SetReplaceMode(self, replace)
FeatureStack_swigregister = _neoapi.FeatureStack_swigregister
FeatureStack_swigregister(FeatureStack)

class NeoImageCallback(_object):
    """
    Image callback class to derive from an get image data
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoImageCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoImageCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        Constructor
        """
        if self.__class__ == NeoImageCallback:
            _self = None
        else:
            _self = self
        this = _neoapi.new_NeoImageCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoImageCallback
    __del__ = lambda self: None

    def _ImageCallback(self, image: 'Image') -> "None":

        if self._ubufrs:
            key = ctypes.addressof(image.GetImageData())
            image._ubufr = self._ubufrs.get(key, None)
        self.ImageCallback(image)


        return _neoapi.NeoImageCallback__ImageCallback(self, image)


    def ImageCallback(self, image):
        """
        Auto created callback methode.
        """
        pass

    def __disown__(self):
        self.this.disown()
        _neoapi.disown_NeoImageCallback(self)
        return weakref_proxy(self)
NeoImageCallback_swigregister = _neoapi.NeoImageCallback_swigregister
NeoImageCallback_swigregister(NeoImageCallback)

class NeoEventCallback(_object):
    """
    Base class providing the event callback interface
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoEventCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoEventCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        Constructor
        """
        if self.__class__ == NeoEventCallback:
            _self = None
        else:
            _self = self
        this = _neoapi.new_NeoEventCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoEventCallback
    __del__ = lambda self: None

    def EventCallback(self, event: 'NeoEvent') -> "None":
        """
        Overwrite this method to receive event data
        Parameter:
            event The event data
        Return: None
        """
        return _neoapi.NeoEventCallback_EventCallback(self, event)
    def __disown__(self):
        self.this.disown()
        _neoapi.disown_NeoEventCallback(self)
        return weakref_proxy(self)
NeoEventCallback_swigregister = _neoapi.NeoEventCallback_swigregister
NeoEventCallback_swigregister(NeoEventCallback)

class BufferBase(_object):
    """
    Base class to derive from for use as user buffer
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        """
        this = _neoapi.new_BufferBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_BufferBase
    __del__ = lambda self: None

    def RegisterMemory(self, memory: 'bytes', size: 'int') -> "None":
        """
        Parameter:
            memory address to the memory
            size   size of the memory
        Return: None
        InvalidArgumentException  when arguments changed and allready assigned to a camera object
        """
        val = _neoapi.BufferBase_RegisterMemory(self, memory, size)

        self._key = ctypes.addressof((ctypes.c_ubyte).from_buffer(memory))


        return val


    def UnregisterMemory(self) -> "None":
        """
        unregister a previous assigned memory
        Return: None
        """
        return _neoapi.BufferBase_UnregisterMemory(self)
BufferBase_swigregister = _neoapi.BufferBase_swigregister
BufferBase_swigregister(BufferBase)

class CamInfo(_object):
    """
    Camera info container class which offers basic information about an available camera
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A CamInfo object
        """
        this = _neoapi.new_CamInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CamInfo
    __del__ = lambda self: None

    def GetId(self) -> "str":
        """
        Get the ID of the camera, this is unique to each camera in combination with a Baumer producer
        Return: The ID as string
        """
        return _neoapi.CamInfo_GetId(self)

    def GetModelName(self) -> "str":
        """
        Get the camera model name
        Return: The model name as string
        """
        return _neoapi.CamInfo_GetModelName(self)

    def GetSerialNumber(self) -> "str":
        """
        Get the camera serial number
        Return: The serial number as string
        """
        return _neoapi.CamInfo_GetSerialNumber(self)

    def GetTLType(self) -> "str":
        """
        Get the transport layer type
        Return: The transport layer type as string
        """
        return _neoapi.CamInfo_GetTLType(self)

    def GetVendorName(self) -> "str":
        """
        Get the camera vendor name
        Return: The vendor name as string
        """
        return _neoapi.CamInfo_GetVendorName(self)

    def GetUSB3VisionGUID(self) -> "str":
        """
        Get the USB3 vision GUID
        Return: The usb3 vision GUID as string
        """
        return _neoapi.CamInfo_GetUSB3VisionGUID(self)

    def GetUSBPortID(self) -> "str":
        """
        Get the USB port ID
        Return: The port ID as string
        """
        return _neoapi.CamInfo_GetUSBPortID(self)

    def GetGevIpAddress(self) -> "str":
        """
        Get the cameras ethernet IP address
        Return: The IP address as string
        """
        return _neoapi.CamInfo_GetGevIpAddress(self)

    def GetGevSubnetMask(self) -> "str":
        """
        Get the cameras ethernet subnet mask
        Return: The subnet mask as string
        """
        return _neoapi.CamInfo_GetGevSubnetMask(self)

    def GetGevGateway(self) -> "str":
        """
        Get the cameras ethernet gateway IP
        Return: The gateway as string
        """
        return _neoapi.CamInfo_GetGevGateway(self)

    def GetGevMACAddress(self) -> "str":
        """
        Get the cameras ethernet MAC address
        Return: The MAC address as string
        """
        return _neoapi.CamInfo_GetGevMACAddress(self)

    def IsConnectable(self) -> "bool":
        """
        Check if this camera is available for connection
        Return: True if this camera can be connected, False otherwise
        """
        return _neoapi.CamInfo_IsConnectable(self)
CamInfo_swigregister = _neoapi.CamInfo_swigregister
CamInfo_swigregister(CamInfo)

class CamInfoListIterator(_object):
    """
    Provides iterator functionality for the CamInfoList
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfoListIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfoListIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor
        Parameter:
            *args Arguments:\n
            __object__ (optional) A FeatureListIterator object
        """
        this = _neoapi.new_CamInfoListIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_CamInfoListIterator
    __del__ = lambda self: None

    def __eq__(self, object: 'CamInfoListIterator') -> "bool":
        """
        Provides the "==" operator
        Parameter:
            object A CamInfoListIterator
        Return: bool
        """
        return _neoapi.CamInfoListIterator___eq__(self, object)

    def __ne__(self, object: 'CamInfoListIterator') -> "bool":
        """
        Provides the "=!" operator
        Parameter:
            object A CamInfoListIterator
        Return: bool
        """
        return _neoapi.CamInfoListIterator___ne__(self, object)

    def __ref__(self) -> "CamInfo":
        """
        Provides the reference
        Return: The CamInfo object
        """
        return _neoapi.CamInfoListIterator___ref__(self)
CamInfoListIterator_swigregister = _neoapi.CamInfoListIterator_swigregister
CamInfoListIterator_swigregister(CamInfoListIterator)

class CamInfoList(_object):
    """
    Provides a list of physically connected cameras available to be used/connected with neoAPI
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfoList, name)

    def __init__(self, *args, **kwargs):
        """
        Constructor is not defined
        Parameter:
            *args not defined
            **kwargs not defined
        """
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Get = staticmethod(_neoapi.CamInfoList_Get)
    else:
        Get = _neoapi.CamInfoList_Get

    def Refresh(self) -> "bool":
        """
        Refresh camera list
        Return: True if the list has changed, otherwise False
        """
        return _neoapi.CamInfoList_Refresh(self)

    def size(self) -> "int":
        """
        Provides the current number of cameras in this list
        Return: The number of cameras
        """
        return _neoapi.CamInfoList_size(self)

    def GetPnPEvent(self, timeout: 'int'=400) -> "NeoEvent":
        """
        Get a plug and play event from the camera info list
        Parameter:
            timeout Timeout in ms to wait for an event, default is 400 ms
        Return: The NeoEvent object with all relevant data, could be empty
        """
        return _neoapi.CamInfoList_GetPnPEvent(self, timeout)

    def ClearPnPEvents(self) -> "CamInfoList":
        """
        Delete all events in the event queue
        Return: The CamInfoList object
        """
        return _neoapi.CamInfoList_ClearPnPEvents(self)

    def EnablePnPEventCallback(self, callback):
        """
        Enable event callback to get notified of changes of the CamInfoList
        Parameter:
            callback The EventCallback method of the given object will be called for every event data
        Return: The CamInfoList object
        """
        if callable(callback):
            class InlinePnPEventCallback(NeoEventCallback):
                """
                Auto created callback class.
                """
                def EventCallback(self, event):
                    """
                    Auto created callback methode.
                    """
                    callback(event)
            self.DisablePnPEventCallback()
            ret = self._inline_pnpeventcallback = InlinePnPEventCallback()
            return self.EnablePnPEventCallback(ret)
        else:
            return _neoapi.CamInfoList_EnablePnPEventCallback(self, callback)



    def DisablePnPEventCallback(self) -> "CamInfoList":
        """
        Disable an active event callback
        Return: The CamInfoList object
        """
        return _neoapi.CamInfoList_DisablePnPEventCallback(self)

    def __iter__(self) -> "CamInfoIterator":
        """
        Provides iterator functionality
        Return: Iterator
        """
        return _neoapi.CamInfoList___iter__(self)

    def __getitem__(self, index: 'int') -> "CamInfo":
        """
        Provides iterator functionality
        Parameter:
            index The index to the CamInfo
        Return: The CamInfo
        """
        return _neoapi.CamInfoList___getitem__(self, index)
CamInfoList_swigregister = _neoapi.CamInfoList_swigregister
CamInfoList_swigregister(CamInfoList)

def CamInfoList_Get() -> "CamInfoList":
    """
    Get the single instance
    Return: The CamInfoList instance
    """
    return _neoapi.CamInfoList_Get()
CamInfoList_Get = _neoapi.CamInfoList_Get

NeoTraceSeverity_All = _neoapi.NeoTraceSeverity_All
NeoTraceSeverity_Info = _neoapi.NeoTraceSeverity_Info
NeoTraceSeverity_Warning = _neoapi.NeoTraceSeverity_Warning
NeoTraceSeverity_Error = _neoapi.NeoTraceSeverity_Error
class NeoTraceCallback(_object):
    """
    Trace callback class to derive from an get Trace messages
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoTraceCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoTraceCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        Constructor
        """
        if self.__class__ == NeoTraceCallback:
            _self = None
        else:
            _self = self
        this = _neoapi.new_NeoTraceCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoTraceCallback
    __del__ = lambda self: None

    def LogCallback(self, msg: 'str') -> "None":
        """
        Overwrite this method to receive trace messages
        Parameter:
            msg The trace message
        Return: None
        """
        return _neoapi.NeoTraceCallback_LogCallback(self, msg)
    def __disown__(self):
        self.this.disown()
        _neoapi.disown_NeoTraceCallback(self)
        return weakref_proxy(self)
NeoTraceCallback_swigregister = _neoapi.NeoTraceCallback_swigregister
NeoTraceCallback_swigregister(NeoTraceCallback)

class NeoTrace(_object):
    """
    Trace class which offers the possibility to enable trace for different targets
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoTrace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeoTrace, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        Constructor
        """
        this = _neoapi.new_NeoTrace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _neoapi.delete_NeoTrace
    __del__ = lambda self: None

    def Info(self, msg, mod="mod", fct="fct", obj=None):
        """
        Trace an info message.
        Parameter:
            msg The message to trace.
            mod The module or unit name to trace.
            fct The function to trace.
            obj The object to trace.
        Return: None
        """
        return self._Info(msg, mod, fct, 0 if obj==None else id(obj))



    def Warning(self, msg, mod="mod", fct="fct", obj=None):
        """
        Trace an warning message.
        Parameter:
            msg The message to trace.
            mod The module or unit name to trace.
            fct The function to trace.
            obj The object to trace.
        Return: None
        """
        return self._Warning(msg, mod, fct, 0 if obj==None else id(obj))



    def Error(self, msg, mod="mod", fct="fct", obj=None):
        """
        Trace an error message.
        Parameter:
            msg The message to trace.
            mod The module or unit name to trace.
            fct The function to trace.
            obj The object to trace.
        Return: None
        """
        return self._Error(msg, mod, fct, 0 if obj==None else id(obj))



    def EnableLogfile(self, filename: 'str') -> "None":
        """
        Enable trace output to file.
        Parameter:
            filename The filename(including folder) to store the trace.
        Return: None
        NotConnectedException No device connected.
        """
        return _neoapi.NeoTrace_EnableLogfile(self, filename)

    def DisableLogfile(self) -> "None":
        """
        Disable trace output to file.
        """
        return _neoapi.NeoTrace_DisableLogfile(self)

    def EnableLogCallback(self, callback):
        """
        Enable trace callback.
        Parameter:
            callback The LogCallback method of the given object will be called for every trace message.
        Return: None
        """
        if callable(callback):
            class InlineLogCallback(NeoTraceCallback):
                """
                Auto created callback class.
                """
                def LogCallback(self, message):
                    """
                    Auto created callback methode.
                    """
                    callback(message)
            self.DisableLogCallback()
            ret = self._inline_logcallback = InlineLogCallback()
            return self.EnableLogCallback(ret)
        else:
            return _neoapi.NeoTrace_EnableLogCallback(self, callback)



    def DisableLogCallback(self) -> "None":
        """
        Disable trace callback.
        Return: None
        """
        return _neoapi.NeoTrace_DisableLogCallback(self)

    def SetSeverity(self, severity: 'NeoTraceSeverity') -> "None":
        """
        Filter trace messages by setting a minimum severity.
        Parameter:
            severity The target severity.
        Return: None
        """
        return _neoapi.NeoTrace_SetSeverity(self, severity)

    def _Info(self, msg: 'str', mod: 'str', fct: 'str', id: 'int') -> "None":
        return _neoapi.NeoTrace__Info(self, msg, mod, fct, id)

    def _Warning(self, msg: 'str', mod: 'str', fct: 'str', id: 'int') -> "None":
        return _neoapi.NeoTrace__Warning(self, msg, mod, fct, id)

    def _Error(self, msg: 'str', mod: 'str', fct: 'str', id: 'int') -> "None":
        return _neoapi.NeoTrace__Error(self, msg, mod, fct, id)
NeoTrace_swigregister = _neoapi.NeoTrace_swigregister
NeoTrace_swigregister(NeoTrace)


def is_python_builtin() -> "bool":
    return _neoapi.is_python_builtin()
is_python_builtin = _neoapi.is_python_builtin
# This file is compatible with both classic and new-style classes.


