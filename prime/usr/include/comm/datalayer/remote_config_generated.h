// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REMOTECONFIG_COMM_DATALAYER_REMOTE_H_
#define FLATBUFFERS_GENERATED_REMOTECONFIG_COMM_DATALAYER_REMOTE_H_

#include "flatbuffers/flatbuffers.h"

#include "configitem_generated.h"

namespace comm {
namespace datalayer {
namespace remote {

struct RemoteConfig;
struct RemoteConfigBuilder;
struct RemoteConfigT;

struct RemoteConfigT : public flatbuffers::NativeTable {
  typedef RemoteConfig TableType;
  std::vector<std::unique_ptr<comm::datalayer::remote::ConfigItemT>> remotes{};
};

struct RemoteConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RemoteConfigT NativeTableType;
  typedef RemoteConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REMOTES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> *remotes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> *>(VT_REMOTES);
  }
  flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> *mutable_remotes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> *>(VT_REMOTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REMOTES) &&
           verifier.VerifyVector(remotes()) &&
           verifier.VerifyVectorOfTables(remotes()) &&
           verifier.EndTable();
  }
  RemoteConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RemoteConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<RemoteConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RemoteConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RemoteConfigBuilder {
  typedef RemoteConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_remotes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>>> remotes) {
    fbb_.AddOffset(RemoteConfig::VT_REMOTES, remotes);
  }
  explicit RemoteConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RemoteConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoteConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoteConfig> CreateRemoteConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>>> remotes = 0) {
  RemoteConfigBuilder builder_(_fbb);
  builder_.add_remotes(remotes);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoteConfig> CreateRemoteConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> *remotes = nullptr) {
  auto remotes__ = remotes ? _fbb.CreateVectorOfSortedTables<comm::datalayer::remote::ConfigItem>(remotes) : 0;
  return comm::datalayer::remote::CreateRemoteConfig(
      _fbb,
      remotes__);
}

flatbuffers::Offset<RemoteConfig> CreateRemoteConfig(flatbuffers::FlatBufferBuilder &_fbb, const RemoteConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RemoteConfigT *RemoteConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RemoteConfigT>(new RemoteConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RemoteConfig::UnPackTo(RemoteConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = remotes(); if (_e) { _o->remotes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->remotes[_i] = std::unique_ptr<comm::datalayer::remote::ConfigItemT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<RemoteConfig> RemoteConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RemoteConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRemoteConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<RemoteConfig> CreateRemoteConfig(flatbuffers::FlatBufferBuilder &_fbb, const RemoteConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RemoteConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _remotes = _o->remotes.size() ? _fbb.CreateVector<flatbuffers::Offset<comm::datalayer::remote::ConfigItem>> (_o->remotes.size(), [](size_t i, _VectorArgs *__va) { return CreateConfigItem(*__va->__fbb, __va->__o->remotes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::remote::CreateRemoteConfig(
      _fbb,
      _remotes);
}

inline const comm::datalayer::remote::RemoteConfig *GetRemoteConfig(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::remote::RemoteConfig>(buf);
}

inline const comm::datalayer::remote::RemoteConfig *GetSizePrefixedRemoteConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::remote::RemoteConfig>(buf);
}

inline RemoteConfig *GetMutableRemoteConfig(void *buf) {
  return flatbuffers::GetMutableRoot<RemoteConfig>(buf);
}

inline bool VerifyRemoteConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::remote::RemoteConfig>(nullptr);
}

inline bool VerifySizePrefixedRemoteConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::remote::RemoteConfig>(nullptr);
}

inline void FinishRemoteConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::remote::RemoteConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRemoteConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::remote::RemoteConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::remote::RemoteConfigT> UnPackRemoteConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::RemoteConfigT>(GetRemoteConfig(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::remote::RemoteConfigT> UnPackSizePrefixedRemoteConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::remote::RemoteConfigT>(GetSizePrefixedRemoteConfig(buf)->UnPack(res));
}

}  // namespace remote
}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_REMOTECONFIG_COMM_DATALAYER_REMOTE_H_
