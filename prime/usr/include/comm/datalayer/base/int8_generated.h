// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INT8_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_INT8_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Int8;
struct Int8Builder;
struct Int8T;

struct Int8T : public flatbuffers::NativeTable {
  typedef Int8 TableType;
  int8_t value = 0;
};

struct Int8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Int8T NativeTableType;
  typedef Int8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool mutate_value(int8_t _value) {
    return SetField<int8_t>(VT_VALUE, _value, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  Int8T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Int8T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Int8> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Int8T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Int8Builder {
  typedef Int8 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(Int8::VT_VALUE, value, 0);
  }
  explicit Int8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Int8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Int8>(end);
    return o;
  }
};

inline flatbuffers::Offset<Int8> CreateInt8(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t value = 0) {
  Int8Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Int8> CreateInt8(flatbuffers::FlatBufferBuilder &_fbb, const Int8T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Int8T *Int8::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Int8T>(new Int8T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Int8::UnPackTo(Int8T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Int8> Int8::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Int8T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInt8(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Int8> CreateInt8(flatbuffers::FlatBufferBuilder &_fbb, const Int8T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Int8T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return comm::datalayer::CreateInt8(
      _fbb,
      _value);
}

inline const comm::datalayer::Int8 *GetInt8(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Int8>(buf);
}

inline const comm::datalayer::Int8 *GetSizePrefixedInt8(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Int8>(buf);
}

inline Int8 *GetMutableInt8(void *buf) {
  return flatbuffers::GetMutableRoot<Int8>(buf);
}

inline bool VerifyInt8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Int8>(nullptr);
}

inline bool VerifySizePrefixedInt8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Int8>(nullptr);
}

inline void FinishInt8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Int8> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInt8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Int8> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::Int8T> UnPackInt8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Int8T>(GetInt8(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::Int8T> UnPackSizePrefixedInt8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Int8T>(GetSizePrefixedInt8(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_INT8_COMM_DATALAYER_H_
