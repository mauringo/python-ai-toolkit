// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BOOL8_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_BOOL8_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Bool8;
struct Bool8Builder;
struct Bool8T;

struct Bool8T : public flatbuffers::NativeTable {
  typedef Bool8 TableType;
  bool value = false;
};

struct Bool8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Bool8T NativeTableType;
  typedef Bool8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  Bool8T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Bool8T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Bool8> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Bool8T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Bool8Builder {
  typedef Bool8 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(Bool8::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit Bool8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Bool8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Bool8>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bool8> CreateBool8(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  Bool8Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Bool8> CreateBool8(flatbuffers::FlatBufferBuilder &_fbb, const Bool8T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Bool8T *Bool8::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Bool8T>(new Bool8T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Bool8::UnPackTo(Bool8T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Bool8> Bool8::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Bool8T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBool8(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Bool8> CreateBool8(flatbuffers::FlatBufferBuilder &_fbb, const Bool8T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Bool8T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return comm::datalayer::CreateBool8(
      _fbb,
      _value);
}

inline const comm::datalayer::Bool8 *GetBool8(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Bool8>(buf);
}

inline const comm::datalayer::Bool8 *GetSizePrefixedBool8(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Bool8>(buf);
}

inline Bool8 *GetMutableBool8(void *buf) {
  return flatbuffers::GetMutableRoot<Bool8>(buf);
}

inline bool VerifyBool8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Bool8>(nullptr);
}

inline bool VerifySizePrefixedBool8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Bool8>(nullptr);
}

inline void FinishBool8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Bool8> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBool8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Bool8> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::Bool8T> UnPackBool8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Bool8T>(GetBool8(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::Bool8T> UnPackSizePrefixedBool8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Bool8T>(GetSizePrefixedBool8(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_BOOL8_COMM_DATALAYER_H_
