// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REALTIMECONFIG_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_REALTIMECONFIG_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

#include "memory_generated.h"

namespace comm {
namespace datalayer {

struct NTelBufferConfig;
struct NTelBufferConfigBuilder;
struct NTelBufferConfigT;

struct RealtimeConfig;
struct RealtimeConfigBuilder;
struct RealtimeConfigT;

struct NTelBufferConfigT : public flatbuffers::NativeTable {
  typedef NTelBufferConfig TableType;
  uint16_t defaultN = 6;
};

struct NTelBufferConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NTelBufferConfigT NativeTableType;
  typedef NTelBufferConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFAULTN = 4
  };
  uint16_t defaultN() const {
    return GetField<uint16_t>(VT_DEFAULTN, 6);
  }
  bool mutate_defaultN(uint16_t _defaultN) {
    return SetField<uint16_t>(VT_DEFAULTN, _defaultN, 6);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_DEFAULTN) &&
           verifier.EndTable();
  }
  NTelBufferConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NTelBufferConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NTelBufferConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NTelBufferConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NTelBufferConfigBuilder {
  typedef NTelBufferConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_defaultN(uint16_t defaultN) {
    fbb_.AddElement<uint16_t>(NTelBufferConfig::VT_DEFAULTN, defaultN, 6);
  }
  explicit NTelBufferConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NTelBufferConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NTelBufferConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<NTelBufferConfig> CreateNTelBufferConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t defaultN = 6) {
  NTelBufferConfigBuilder builder_(_fbb);
  builder_.add_defaultN(defaultN);
  return builder_.Finish();
}

flatbuffers::Offset<NTelBufferConfig> CreateNTelBufferConfig(flatbuffers::FlatBufferBuilder &_fbb, const NTelBufferConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RealtimeConfigT : public flatbuffers::NativeTable {
  typedef RealtimeConfig TableType;
  comm::datalayer::AccessType defaultInputAcessType = comm::datalayer::AccessType_TripleBuffer;
  std::unique_ptr<comm::datalayer::NTelBufferConfigT> nTelBufConfig{};
};

struct RealtimeConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RealtimeConfigT NativeTableType;
  typedef RealtimeConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFAULTINPUTACESSTYPE = 4,
    VT_NTELBUFCONFIG = 6
  };
  comm::datalayer::AccessType defaultInputAcessType() const {
    return static_cast<comm::datalayer::AccessType>(GetField<int8_t>(VT_DEFAULTINPUTACESSTYPE, 2));
  }
  bool mutate_defaultInputAcessType(comm::datalayer::AccessType _defaultInputAcessType) {
    return SetField<int8_t>(VT_DEFAULTINPUTACESSTYPE, static_cast<int8_t>(_defaultInputAcessType), 2);
  }
  const comm::datalayer::NTelBufferConfig *nTelBufConfig() const {
    return GetPointer<const comm::datalayer::NTelBufferConfig *>(VT_NTELBUFCONFIG);
  }
  comm::datalayer::NTelBufferConfig *mutable_nTelBufConfig() {
    return GetPointer<comm::datalayer::NTelBufferConfig *>(VT_NTELBUFCONFIG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_DEFAULTINPUTACESSTYPE) &&
           VerifyOffset(verifier, VT_NTELBUFCONFIG) &&
           verifier.VerifyTable(nTelBufConfig()) &&
           verifier.EndTable();
  }
  RealtimeConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RealtimeConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<RealtimeConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RealtimeConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RealtimeConfigBuilder {
  typedef RealtimeConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_defaultInputAcessType(comm::datalayer::AccessType defaultInputAcessType) {
    fbb_.AddElement<int8_t>(RealtimeConfig::VT_DEFAULTINPUTACESSTYPE, static_cast<int8_t>(defaultInputAcessType), 2);
  }
  void add_nTelBufConfig(flatbuffers::Offset<comm::datalayer::NTelBufferConfig> nTelBufConfig) {
    fbb_.AddOffset(RealtimeConfig::VT_NTELBUFCONFIG, nTelBufConfig);
  }
  explicit RealtimeConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RealtimeConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RealtimeConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<RealtimeConfig> CreateRealtimeConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    comm::datalayer::AccessType defaultInputAcessType = comm::datalayer::AccessType_TripleBuffer,
    flatbuffers::Offset<comm::datalayer::NTelBufferConfig> nTelBufConfig = 0) {
  RealtimeConfigBuilder builder_(_fbb);
  builder_.add_nTelBufConfig(nTelBufConfig);
  builder_.add_defaultInputAcessType(defaultInputAcessType);
  return builder_.Finish();
}

flatbuffers::Offset<RealtimeConfig> CreateRealtimeConfig(flatbuffers::FlatBufferBuilder &_fbb, const RealtimeConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline NTelBufferConfigT *NTelBufferConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NTelBufferConfigT>(new NTelBufferConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NTelBufferConfig::UnPackTo(NTelBufferConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = defaultN(); _o->defaultN = _e; }
}

inline flatbuffers::Offset<NTelBufferConfig> NTelBufferConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NTelBufferConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNTelBufferConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NTelBufferConfig> CreateNTelBufferConfig(flatbuffers::FlatBufferBuilder &_fbb, const NTelBufferConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NTelBufferConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _defaultN = _o->defaultN;
  return comm::datalayer::CreateNTelBufferConfig(
      _fbb,
      _defaultN);
}

inline RealtimeConfigT *RealtimeConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RealtimeConfigT>(new RealtimeConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RealtimeConfig::UnPackTo(RealtimeConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = defaultInputAcessType(); _o->defaultInputAcessType = _e; }
  { auto _e = nTelBufConfig(); if (_e) _o->nTelBufConfig = std::unique_ptr<comm::datalayer::NTelBufferConfigT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<RealtimeConfig> RealtimeConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RealtimeConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRealtimeConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<RealtimeConfig> CreateRealtimeConfig(flatbuffers::FlatBufferBuilder &_fbb, const RealtimeConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RealtimeConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _defaultInputAcessType = _o->defaultInputAcessType;
  auto _nTelBufConfig = _o->nTelBufConfig ? CreateNTelBufferConfig(_fbb, _o->nTelBufConfig.get(), _rehasher) : 0;
  return comm::datalayer::CreateRealtimeConfig(
      _fbb,
      _defaultInputAcessType,
      _nTelBufConfig);
}

inline const comm::datalayer::RealtimeConfig *GetRealtimeConfig(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::RealtimeConfig>(buf);
}

inline const comm::datalayer::RealtimeConfig *GetSizePrefixedRealtimeConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::RealtimeConfig>(buf);
}

inline RealtimeConfig *GetMutableRealtimeConfig(void *buf) {
  return flatbuffers::GetMutableRoot<RealtimeConfig>(buf);
}

inline bool VerifyRealtimeConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::RealtimeConfig>(nullptr);
}

inline bool VerifySizePrefixedRealtimeConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::RealtimeConfig>(nullptr);
}

inline void FinishRealtimeConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::RealtimeConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRealtimeConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::RealtimeConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::RealtimeConfigT> UnPackRealtimeConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RealtimeConfigT>(GetRealtimeConfig(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::RealtimeConfigT> UnPackSizePrefixedRealtimeConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RealtimeConfigT>(GetSizePrefixedRealtimeConfig(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_REALTIMECONFIG_COMM_DATALAYER_H_
