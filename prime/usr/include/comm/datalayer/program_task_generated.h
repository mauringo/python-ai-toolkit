// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROGRAMTASK_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PROGRAMTASK_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

#include "diagnosis_generated.h"

namespace comm {
namespace datalayer {

struct ProgramTask;
struct ProgramTaskBuilder;
struct ProgramTaskT;

enum ProgramTaskState : int8_t {
  ProgramTaskState_pending = 0,
  ProgramTaskState_failed = 1,
  ProgramTaskState_done = 2,
  ProgramTaskState_running = 3,
  ProgramTaskState_MIN = ProgramTaskState_pending,
  ProgramTaskState_MAX = ProgramTaskState_running
};

inline const ProgramTaskState (&EnumValuesProgramTaskState())[4] {
  static const ProgramTaskState values[] = {
    ProgramTaskState_pending,
    ProgramTaskState_failed,
    ProgramTaskState_done,
    ProgramTaskState_running
  };
  return values;
}

inline const char * const *EnumNamesProgramTaskState() {
  static const char * const names[5] = {
    "pending",
    "failed",
    "done",
    "running",
    nullptr
  };
  return names;
}

inline const char *EnumNameProgramTaskState(ProgramTaskState e) {
  if (flatbuffers::IsOutRange(e, ProgramTaskState_pending, ProgramTaskState_running)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesProgramTaskState()[index];
}

struct ProgramTaskT : public flatbuffers::NativeTable {
  typedef ProgramTask TableType;
  std::string id{};
  comm::datalayer::ProgramTaskState state = comm::datalayer::ProgramTaskState_pending;
  uint32_t progress = 0;
  std::unique_ptr<comm::datalayer::DiagnosisT> result{};
  std::string progressInfo{};
};

struct ProgramTask FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProgramTaskT NativeTableType;
  typedef ProgramTaskBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_STATE = 6,
    VT_PROGRESS = 8,
    VT_RESULT = 10,
    VT_PROGRESSINFO = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  flatbuffers::String *mutable_id() {
    return GetPointer<flatbuffers::String *>(VT_ID);
  }
  bool KeyCompareLessThan(const ProgramTask *o) const {
    return *id() < *o->id();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(id()->c_str(), val);
  }
  comm::datalayer::ProgramTaskState state() const {
    return static_cast<comm::datalayer::ProgramTaskState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool mutate_state(comm::datalayer::ProgramTaskState _state) {
    return SetField<int8_t>(VT_STATE, static_cast<int8_t>(_state), 0);
  }
  uint32_t progress() const {
    return GetField<uint32_t>(VT_PROGRESS, 0);
  }
  bool mutate_progress(uint32_t _progress) {
    return SetField<uint32_t>(VT_PROGRESS, _progress, 0);
  }
  const comm::datalayer::Diagnosis *result() const {
    return GetPointer<const comm::datalayer::Diagnosis *>(VT_RESULT);
  }
  comm::datalayer::Diagnosis *mutable_result() {
    return GetPointer<comm::datalayer::Diagnosis *>(VT_RESULT);
  }
  const flatbuffers::String *progressInfo() const {
    return GetPointer<const flatbuffers::String *>(VT_PROGRESSINFO);
  }
  flatbuffers::String *mutable_progressInfo() {
    return GetPointer<flatbuffers::String *>(VT_PROGRESSINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<uint32_t>(verifier, VT_PROGRESS) &&
           VerifyOffset(verifier, VT_RESULT) &&
           verifier.VerifyTable(result()) &&
           VerifyOffset(verifier, VT_PROGRESSINFO) &&
           verifier.VerifyString(progressInfo()) &&
           verifier.EndTable();
  }
  ProgramTaskT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProgramTaskT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ProgramTask> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProgramTaskBuilder {
  typedef ProgramTask Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(ProgramTask::VT_ID, id);
  }
  void add_state(comm::datalayer::ProgramTaskState state) {
    fbb_.AddElement<int8_t>(ProgramTask::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_progress(uint32_t progress) {
    fbb_.AddElement<uint32_t>(ProgramTask::VT_PROGRESS, progress, 0);
  }
  void add_result(flatbuffers::Offset<comm::datalayer::Diagnosis> result) {
    fbb_.AddOffset(ProgramTask::VT_RESULT, result);
  }
  void add_progressInfo(flatbuffers::Offset<flatbuffers::String> progressInfo) {
    fbb_.AddOffset(ProgramTask::VT_PROGRESSINFO, progressInfo);
  }
  explicit ProgramTaskBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ProgramTask> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProgramTask>(end);
    fbb_.Required(o, ProgramTask::VT_ID);
    return o;
  }
};

inline flatbuffers::Offset<ProgramTask> CreateProgramTask(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    comm::datalayer::ProgramTaskState state = comm::datalayer::ProgramTaskState_pending,
    uint32_t progress = 0,
    flatbuffers::Offset<comm::datalayer::Diagnosis> result = 0,
    flatbuffers::Offset<flatbuffers::String> progressInfo = 0) {
  ProgramTaskBuilder builder_(_fbb);
  builder_.add_progressInfo(progressInfo);
  builder_.add_result(result);
  builder_.add_progress(progress);
  builder_.add_id(id);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProgramTask> CreateProgramTaskDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    comm::datalayer::ProgramTaskState state = comm::datalayer::ProgramTaskState_pending,
    uint32_t progress = 0,
    flatbuffers::Offset<comm::datalayer::Diagnosis> result = 0,
    const char *progressInfo = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto progressInfo__ = progressInfo ? _fbb.CreateString(progressInfo) : 0;
  return comm::datalayer::CreateProgramTask(
      _fbb,
      id__,
      state,
      progress,
      result,
      progressInfo__);
}

flatbuffers::Offset<ProgramTask> CreateProgramTask(flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProgramTaskT *ProgramTask::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProgramTaskT>(new ProgramTaskT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProgramTask::UnPackTo(ProgramTaskT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); if (_e) _o->id = _e->str(); }
  { auto _e = state(); _o->state = _e; }
  { auto _e = progress(); _o->progress = _e; }
  { auto _e = result(); if (_e) _o->result = std::unique_ptr<comm::datalayer::DiagnosisT>(_e->UnPack(_resolver)); }
  { auto _e = progressInfo(); if (_e) _o->progressInfo = _e->str(); }
}

inline flatbuffers::Offset<ProgramTask> ProgramTask::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProgramTask(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ProgramTask> CreateProgramTask(flatbuffers::FlatBufferBuilder &_fbb, const ProgramTaskT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ProgramTaskT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _fbb.CreateString(_o->id);
  auto _state = _o->state;
  auto _progress = _o->progress;
  auto _result = _o->result ? CreateDiagnosis(_fbb, _o->result.get(), _rehasher) : 0;
  auto _progressInfo = _o->progressInfo.empty() ? 0 : _fbb.CreateString(_o->progressInfo);
  return comm::datalayer::CreateProgramTask(
      _fbb,
      _id,
      _state,
      _progress,
      _result,
      _progressInfo);
}

inline const comm::datalayer::ProgramTask *GetProgramTask(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::ProgramTask>(buf);
}

inline const comm::datalayer::ProgramTask *GetSizePrefixedProgramTask(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::ProgramTask>(buf);
}

inline ProgramTask *GetMutableProgramTask(void *buf) {
  return flatbuffers::GetMutableRoot<ProgramTask>(buf);
}

inline bool VerifyProgramTaskBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ProgramTask>(nullptr);
}

inline bool VerifySizePrefixedProgramTaskBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ProgramTask>(nullptr);
}

inline void FinishProgramTaskBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::ProgramTask> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProgramTaskBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::ProgramTask> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ProgramTaskT> UnPackProgramTask(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProgramTaskT>(GetProgramTask(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ProgramTaskT> UnPackSizePrefixedProgramTask(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProgramTaskT>(GetSizePrefixedProgramTask(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PROGRAMTASK_COMM_DATALAYER_H_
