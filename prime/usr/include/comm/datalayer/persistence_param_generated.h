// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSISTENCEPARAM_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PERSISTENCEPARAM_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct PersistenceParam;
struct PersistenceParamBuilder;
struct PersistenceParamT;

struct PersistenceParamT : public flatbuffers::NativeTable {
  typedef PersistenceParam TableType;
  std::string configurationPath{};
  std::string id{};
  std::string phase{};
};

struct PersistenceParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersistenceParamT NativeTableType;
  typedef PersistenceParamBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONFIGURATIONPATH = 4,
    VT_ID = 6,
    VT_PHASE = 8
  };
  const flatbuffers::String *configurationPath() const {
    return GetPointer<const flatbuffers::String *>(VT_CONFIGURATIONPATH);
  }
  flatbuffers::String *mutable_configurationPath() {
    return GetPointer<flatbuffers::String *>(VT_CONFIGURATIONPATH);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  flatbuffers::String *mutable_id() {
    return GetPointer<flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *phase() const {
    return GetPointer<const flatbuffers::String *>(VT_PHASE);
  }
  flatbuffers::String *mutable_phase() {
    return GetPointer<flatbuffers::String *>(VT_PHASE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONFIGURATIONPATH) &&
           verifier.VerifyString(configurationPath()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PHASE) &&
           verifier.VerifyString(phase()) &&
           verifier.EndTable();
  }
  PersistenceParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PersistenceParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PersistenceParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistenceParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PersistenceParamBuilder {
  typedef PersistenceParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_configurationPath(flatbuffers::Offset<flatbuffers::String> configurationPath) {
    fbb_.AddOffset(PersistenceParam::VT_CONFIGURATIONPATH, configurationPath);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(PersistenceParam::VT_ID, id);
  }
  void add_phase(flatbuffers::Offset<flatbuffers::String> phase) {
    fbb_.AddOffset(PersistenceParam::VT_PHASE, phase);
  }
  explicit PersistenceParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PersistenceParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PersistenceParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<PersistenceParam> CreatePersistenceParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> configurationPath = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> phase = 0) {
  PersistenceParamBuilder builder_(_fbb);
  builder_.add_phase(phase);
  builder_.add_id(id);
  builder_.add_configurationPath(configurationPath);
  return builder_.Finish();
}

inline flatbuffers::Offset<PersistenceParam> CreatePersistenceParamDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *configurationPath = nullptr,
    const char *id = nullptr,
    const char *phase = nullptr) {
  auto configurationPath__ = configurationPath ? _fbb.CreateString(configurationPath) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto phase__ = phase ? _fbb.CreateString(phase) : 0;
  return comm::datalayer::CreatePersistenceParam(
      _fbb,
      configurationPath__,
      id__,
      phase__);
}

flatbuffers::Offset<PersistenceParam> CreatePersistenceParam(flatbuffers::FlatBufferBuilder &_fbb, const PersistenceParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PersistenceParamT *PersistenceParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PersistenceParamT>(new PersistenceParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PersistenceParam::UnPackTo(PersistenceParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = configurationPath(); if (_e) _o->configurationPath = _e->str(); }
  { auto _e = id(); if (_e) _o->id = _e->str(); }
  { auto _e = phase(); if (_e) _o->phase = _e->str(); }
}

inline flatbuffers::Offset<PersistenceParam> PersistenceParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistenceParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePersistenceParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PersistenceParam> CreatePersistenceParam(flatbuffers::FlatBufferBuilder &_fbb, const PersistenceParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PersistenceParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _configurationPath = _o->configurationPath.empty() ? 0 : _fbb.CreateString(_o->configurationPath);
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _phase = _o->phase.empty() ? 0 : _fbb.CreateString(_o->phase);
  return comm::datalayer::CreatePersistenceParam(
      _fbb,
      _configurationPath,
      _id,
      _phase);
}

inline const comm::datalayer::PersistenceParam *GetPersistenceParam(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::PersistenceParam>(buf);
}

inline const comm::datalayer::PersistenceParam *GetSizePrefixedPersistenceParam(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::PersistenceParam>(buf);
}

inline PersistenceParam *GetMutablePersistenceParam(void *buf) {
  return flatbuffers::GetMutableRoot<PersistenceParam>(buf);
}

inline bool VerifyPersistenceParamBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::PersistenceParam>(nullptr);
}

inline bool VerifySizePrefixedPersistenceParamBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::PersistenceParam>(nullptr);
}

inline void FinishPersistenceParamBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::PersistenceParam> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersistenceParamBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::PersistenceParam> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::PersistenceParamT> UnPackPersistenceParam(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::PersistenceParamT>(GetPersistenceParam(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::PersistenceParamT> UnPackSizePrefixedPersistenceParam(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::PersistenceParamT>(GetSizePrefixedPersistenceParam(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PERSISTENCEPARAM_COMM_DATALAYER_H_
