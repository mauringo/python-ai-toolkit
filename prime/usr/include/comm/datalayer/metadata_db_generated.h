// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATADB_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_METADATADB_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

#include "allowed_operations_generated.h"
#include "metadata_generated.h"

namespace comm {
namespace datalayer {

struct MetadataDB;
struct MetadataDBBuilder;
struct MetadataDBT;

struct MetadataDBT : public flatbuffers::NativeTable {
  typedef MetadataDB TableType;
  std::string address{};
  std::vector<std::unique_ptr<comm::datalayer::MetadataDBT>> childs{};
  std::unique_ptr<comm::datalayer::MetadataDBT> asterisk{};
  std::unique_ptr<comm::datalayer::MetadataT> metadata{};
};

struct MetadataDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetadataDBT NativeTableType;
  typedef MetadataDBBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_CHILDS = 6,
    VT_ASTERISK = 8,
    VT_METADATA = 10
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  flatbuffers::String *mutable_address() {
    return GetPointer<flatbuffers::String *>(VT_ADDRESS);
  }
  bool KeyCompareLessThan(const MetadataDB *o) const {
    return *address() < *o->address();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(address()->c_str(), val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>> *childs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>> *>(VT_CHILDS);
  }
  flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>> *mutable_childs() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>> *>(VT_CHILDS);
  }
  const comm::datalayer::MetadataDB *asterisk() const {
    return GetPointer<const comm::datalayer::MetadataDB *>(VT_ASTERISK);
  }
  comm::datalayer::MetadataDB *mutable_asterisk() {
    return GetPointer<comm::datalayer::MetadataDB *>(VT_ASTERISK);
  }
  const comm::datalayer::Metadata *metadata() const {
    return GetPointer<const comm::datalayer::Metadata *>(VT_METADATA);
  }
  comm::datalayer::Metadata *mutable_metadata() {
    return GetPointer<comm::datalayer::Metadata *>(VT_METADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_CHILDS) &&
           verifier.VerifyVector(childs()) &&
           verifier.VerifyVectorOfTables(childs()) &&
           VerifyOffset(verifier, VT_ASTERISK) &&
           verifier.VerifyTable(asterisk()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyTable(metadata()) &&
           verifier.EndTable();
  }
  MetadataDBT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MetadataDBT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MetadataDB> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MetadataDBT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MetadataDBBuilder {
  typedef MetadataDB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(MetadataDB::VT_ADDRESS, address);
  }
  void add_childs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>>> childs) {
    fbb_.AddOffset(MetadataDB::VT_CHILDS, childs);
  }
  void add_asterisk(flatbuffers::Offset<comm::datalayer::MetadataDB> asterisk) {
    fbb_.AddOffset(MetadataDB::VT_ASTERISK, asterisk);
  }
  void add_metadata(flatbuffers::Offset<comm::datalayer::Metadata> metadata) {
    fbb_.AddOffset(MetadataDB::VT_METADATA, metadata);
  }
  explicit MetadataDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MetadataDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MetadataDB>(end);
    fbb_.Required(o, MetadataDB::VT_ADDRESS);
    return o;
  }
};

inline flatbuffers::Offset<MetadataDB> CreateMetadataDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::MetadataDB>>> childs = 0,
    flatbuffers::Offset<comm::datalayer::MetadataDB> asterisk = 0,
    flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  MetadataDBBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  builder_.add_asterisk(asterisk);
  builder_.add_childs(childs);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<MetadataDB> CreateMetadataDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    std::vector<flatbuffers::Offset<comm::datalayer::MetadataDB>> *childs = nullptr,
    flatbuffers::Offset<comm::datalayer::MetadataDB> asterisk = 0,
    flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto childs__ = childs ? _fbb.CreateVectorOfSortedTables<comm::datalayer::MetadataDB>(childs) : 0;
  return comm::datalayer::CreateMetadataDB(
      _fbb,
      address__,
      childs__,
      asterisk,
      metadata);
}

flatbuffers::Offset<MetadataDB> CreateMetadataDB(flatbuffers::FlatBufferBuilder &_fbb, const MetadataDBT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MetadataDBT *MetadataDB::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MetadataDBT>(new MetadataDBT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MetadataDB::UnPackTo(MetadataDBT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = address(); if (_e) _o->address = _e->str(); }
  { auto _e = childs(); if (_e) { _o->childs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->childs[_i] = std::unique_ptr<comm::datalayer::MetadataDBT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = asterisk(); if (_e) _o->asterisk = std::unique_ptr<comm::datalayer::MetadataDBT>(_e->UnPack(_resolver)); }
  { auto _e = metadata(); if (_e) _o->metadata = std::unique_ptr<comm::datalayer::MetadataT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<MetadataDB> MetadataDB::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MetadataDBT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMetadataDB(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MetadataDB> CreateMetadataDB(flatbuffers::FlatBufferBuilder &_fbb, const MetadataDBT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MetadataDBT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _address = _fbb.CreateString(_o->address);
  auto _childs = _o->childs.size() ? _fbb.CreateVector<flatbuffers::Offset<comm::datalayer::MetadataDB>> (_o->childs.size(), [](size_t i, _VectorArgs *__va) { return CreateMetadataDB(*__va->__fbb, __va->__o->childs[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _asterisk = _o->asterisk ? CreateMetadataDB(_fbb, _o->asterisk.get(), _rehasher) : 0;
  auto _metadata = _o->metadata ? CreateMetadata(_fbb, _o->metadata.get(), _rehasher) : 0;
  return comm::datalayer::CreateMetadataDB(
      _fbb,
      _address,
      _childs,
      _asterisk,
      _metadata);
}

inline const comm::datalayer::MetadataDB *GetMetadataDB(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::MetadataDB>(buf);
}

inline const comm::datalayer::MetadataDB *GetSizePrefixedMetadataDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::MetadataDB>(buf);
}

inline MetadataDB *GetMutableMetadataDB(void *buf) {
  return flatbuffers::GetMutableRoot<MetadataDB>(buf);
}

inline const char *MetadataDBIdentifier() {
  return "MDDB";
}

inline bool MetadataDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MetadataDBIdentifier());
}

inline bool VerifyMetadataDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::MetadataDB>(MetadataDBIdentifier());
}

inline bool VerifySizePrefixedMetadataDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::MetadataDB>(MetadataDBIdentifier());
}

inline void FinishMetadataDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::MetadataDB> root) {
  fbb.Finish(root, MetadataDBIdentifier());
}

inline void FinishSizePrefixedMetadataDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::MetadataDB> root) {
  fbb.FinishSizePrefixed(root, MetadataDBIdentifier());
}

inline std::unique_ptr<comm::datalayer::MetadataDBT> UnPackMetadataDB(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MetadataDBT>(GetMetadataDB(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::MetadataDBT> UnPackSizePrefixedMetadataDB(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MetadataDBT>(GetSizePrefixedMetadataDB(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_METADATADB_COMM_DATALAYER_H_
