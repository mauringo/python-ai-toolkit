// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBDATA_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_SUBDATA_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

#include "sub_properties_generated.h"

namespace comm {
namespace datalayer {

struct SubscriptionData;
struct SubscriptionDataBuilder;
struct SubscriptionDataT;

struct SubscriptionDataT : public flatbuffers::NativeTable {
  typedef SubscriptionData TableType;
  std::unique_ptr<comm::datalayer::SubscriptionPropertiesT> properties{};
  std::vector<std::string> nodes{};
};

struct SubscriptionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscriptionDataT NativeTableType;
  typedef SubscriptionDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4,
    VT_NODES = 6
  };
  const comm::datalayer::SubscriptionProperties *properties() const {
    return GetPointer<const comm::datalayer::SubscriptionProperties *>(VT_PROPERTIES);
  }
  comm::datalayer::SubscriptionProperties *mutable_properties() {
    return GetPointer<comm::datalayer::SubscriptionProperties *>(VT_PROPERTIES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *nodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NODES);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_nodes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyTable(properties()) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfStrings(nodes()) &&
           verifier.EndTable();
  }
  SubscriptionDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SubscriptionDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SubscriptionData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SubscriptionDataBuilder {
  typedef SubscriptionData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<comm::datalayer::SubscriptionProperties> properties) {
    fbb_.AddOffset(SubscriptionData::VT_PROPERTIES, properties);
  }
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nodes) {
    fbb_.AddOffset(SubscriptionData::VT_NODES, nodes);
  }
  explicit SubscriptionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SubscriptionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscriptionData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscriptionData> CreateSubscriptionData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<comm::datalayer::SubscriptionProperties> properties = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nodes = 0) {
  SubscriptionDataBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubscriptionData> CreateSubscriptionDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<comm::datalayer::SubscriptionProperties> properties = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*nodes) : 0;
  return comm::datalayer::CreateSubscriptionData(
      _fbb,
      properties,
      nodes__);
}

flatbuffers::Offset<SubscriptionData> CreateSubscriptionData(flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SubscriptionDataT *SubscriptionData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SubscriptionDataT>(new SubscriptionDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SubscriptionData::UnPackTo(SubscriptionDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = properties(); if (_e) _o->properties = std::unique_ptr<comm::datalayer::SubscriptionPropertiesT>(_e->UnPack(_resolver)); }
  { auto _e = nodes(); if (_e) { _o->nodes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->nodes[_i] = _e->Get(_i)->str(); } } }
}

inline flatbuffers::Offset<SubscriptionData> SubscriptionData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSubscriptionData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SubscriptionData> CreateSubscriptionData(flatbuffers::FlatBufferBuilder &_fbb, const SubscriptionDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SubscriptionDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _properties = _o->properties ? CreateSubscriptionProperties(_fbb, _o->properties.get(), _rehasher) : 0;
  auto _nodes = _o->nodes.size() ? _fbb.CreateVectorOfStrings(_o->nodes) : 0;
  return comm::datalayer::CreateSubscriptionData(
      _fbb,
      _properties,
      _nodes);
}

inline const comm::datalayer::SubscriptionData *GetSubscriptionData(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::SubscriptionData>(buf);
}

inline const comm::datalayer::SubscriptionData *GetSizePrefixedSubscriptionData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::SubscriptionData>(buf);
}

inline SubscriptionData *GetMutableSubscriptionData(void *buf) {
  return flatbuffers::GetMutableRoot<SubscriptionData>(buf);
}

inline bool VerifySubscriptionDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::SubscriptionData>(nullptr);
}

inline bool VerifySizePrefixedSubscriptionDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::SubscriptionData>(nullptr);
}

inline void FinishSubscriptionDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::SubscriptionData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSubscriptionDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::SubscriptionData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::SubscriptionDataT> UnPackSubscriptionData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::SubscriptionDataT>(GetSubscriptionData(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::SubscriptionDataT> UnPackSizePrefixedSubscriptionData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::SubscriptionDataT>(GetSizePrefixedSubscriptionData(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_SUBDATA_COMM_DATALAYER_H_
