// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEBUGCHANNEL_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_DEBUGCHANNEL_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct DebugChannel;
struct DebugChannelBuilder;
struct DebugChannelT;

struct DebugChannelT : public flatbuffers::NativeTable {
  typedef DebugChannel TableType;
  std::string name{};
  std::string address{};
  bool isTrigger = false;
};

struct DebugChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DebugChannelT NativeTableType;
  typedef DebugChannelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ADDRESS = 6,
    VT_ISTRIGGER = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  flatbuffers::String *mutable_address() {
    return GetPointer<flatbuffers::String *>(VT_ADDRESS);
  }
  bool isTrigger() const {
    return GetField<uint8_t>(VT_ISTRIGGER, 0) != 0;
  }
  bool mutate_isTrigger(bool _isTrigger) {
    return SetField<uint8_t>(VT_ISTRIGGER, static_cast<uint8_t>(_isTrigger), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<uint8_t>(verifier, VT_ISTRIGGER) &&
           verifier.EndTable();
  }
  DebugChannelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DebugChannelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<DebugChannel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DebugChannelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DebugChannelBuilder {
  typedef DebugChannel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DebugChannel::VT_NAME, name);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(DebugChannel::VT_ADDRESS, address);
  }
  void add_isTrigger(bool isTrigger) {
    fbb_.AddElement<uint8_t>(DebugChannel::VT_ISTRIGGER, static_cast<uint8_t>(isTrigger), 0);
  }
  explicit DebugChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DebugChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DebugChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<DebugChannel> CreateDebugChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    bool isTrigger = false) {
  DebugChannelBuilder builder_(_fbb);
  builder_.add_address(address);
  builder_.add_name(name);
  builder_.add_isTrigger(isTrigger);
  return builder_.Finish();
}

inline flatbuffers::Offset<DebugChannel> CreateDebugChannelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *address = nullptr,
    bool isTrigger = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return comm::datalayer::CreateDebugChannel(
      _fbb,
      name__,
      address__,
      isTrigger);
}

flatbuffers::Offset<DebugChannel> CreateDebugChannel(flatbuffers::FlatBufferBuilder &_fbb, const DebugChannelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DebugChannelT *DebugChannel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DebugChannelT>(new DebugChannelT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DebugChannel::UnPackTo(DebugChannelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = address(); if (_e) _o->address = _e->str(); }
  { auto _e = isTrigger(); _o->isTrigger = _e; }
}

inline flatbuffers::Offset<DebugChannel> DebugChannel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DebugChannelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDebugChannel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<DebugChannel> CreateDebugChannel(flatbuffers::FlatBufferBuilder &_fbb, const DebugChannelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DebugChannelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _address = _o->address.empty() ? 0 : _fbb.CreateString(_o->address);
  auto _isTrigger = _o->isTrigger;
  return comm::datalayer::CreateDebugChannel(
      _fbb,
      _name,
      _address,
      _isTrigger);
}

inline const comm::datalayer::DebugChannel *GetDebugChannel(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::DebugChannel>(buf);
}

inline const comm::datalayer::DebugChannel *GetSizePrefixedDebugChannel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::DebugChannel>(buf);
}

inline DebugChannel *GetMutableDebugChannel(void *buf) {
  return flatbuffers::GetMutableRoot<DebugChannel>(buf);
}

inline bool VerifyDebugChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::DebugChannel>(nullptr);
}

inline bool VerifySizePrefixedDebugChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::DebugChannel>(nullptr);
}

inline void FinishDebugChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::DebugChannel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDebugChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::DebugChannel> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::DebugChannelT> UnPackDebugChannel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DebugChannelT>(GetDebugChannel(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::DebugChannelT> UnPackSizePrefixedDebugChannel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::DebugChannelT>(GetSizePrefixedDebugChannel(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_DEBUGCHANNEL_COMM_DATALAYER_H_
