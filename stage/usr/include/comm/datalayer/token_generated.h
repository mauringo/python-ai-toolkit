// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TOKEN_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_TOKEN_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Claim;
struct ClaimBuilder;
struct ClaimT;

struct Token;
struct TokenBuilder;
struct TokenT;

struct ClaimT : public flatbuffers::NativeTable {
  typedef Claim TableType;
  std::string claim{};
  std::string value{};
};

struct Claim FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClaimT NativeTableType;
  typedef ClaimBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLAIM = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *claim() const {
    return GetPointer<const flatbuffers::String *>(VT_CLAIM);
  }
  flatbuffers::String *mutable_claim() {
    return GetPointer<flatbuffers::String *>(VT_CLAIM);
  }
  bool KeyCompareLessThan(const Claim *o) const {
    return *claim() < *o->claim();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(claim()->c_str(), val);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  flatbuffers::String *mutable_value() {
    return GetPointer<flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CLAIM) &&
           verifier.VerifyString(claim()) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
  ClaimT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ClaimT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Claim> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClaimT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ClaimBuilder {
  typedef Claim Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_claim(flatbuffers::Offset<flatbuffers::String> claim) {
    fbb_.AddOffset(Claim::VT_CLAIM, claim);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(Claim::VT_VALUE, value);
  }
  explicit ClaimBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Claim> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Claim>(end);
    fbb_.Required(o, Claim::VT_CLAIM);
    fbb_.Required(o, Claim::VT_VALUE);
    return o;
  }
};

inline flatbuffers::Offset<Claim> CreateClaim(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> claim = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  ClaimBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_claim(claim);
  return builder_.Finish();
}

inline flatbuffers::Offset<Claim> CreateClaimDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *claim = nullptr,
    const char *value = nullptr) {
  auto claim__ = claim ? _fbb.CreateString(claim) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return comm::datalayer::CreateClaim(
      _fbb,
      claim__,
      value__);
}

flatbuffers::Offset<Claim> CreateClaim(flatbuffers::FlatBufferBuilder &_fbb, const ClaimT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TokenT : public flatbuffers::NativeTable {
  typedef Token TableType;
  std::vector<std::unique_ptr<comm::datalayer::ClaimT>> claims{};
  std::string id{};
  uint64_t iat = 0;
  uint64_t exp = 0;
  std::string name{};
  uint64_t plchandle = 0;
  std::vector<std::string> scope{};
};

struct Token FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TokenT NativeTableType;
  typedef TokenBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLAIMS = 4,
    VT_ID = 6,
    VT_IAT = 8,
    VT_EXP = 10,
    VT_NAME = 12,
    VT_PLCHANDLE = 14,
    VT_SCOPE = 16
  };
  const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>> *claims() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>> *>(VT_CLAIMS);
  }
  flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>> *mutable_claims() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>> *>(VT_CLAIMS);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  flatbuffers::String *mutable_id() {
    return GetPointer<flatbuffers::String *>(VT_ID);
  }
  uint64_t iat() const {
    return GetField<uint64_t>(VT_IAT, 0);
  }
  bool mutate_iat(uint64_t _iat) {
    return SetField<uint64_t>(VT_IAT, _iat, 0);
  }
  uint64_t exp() const {
    return GetField<uint64_t>(VT_EXP, 0);
  }
  bool mutate_exp(uint64_t _exp) {
    return SetField<uint64_t>(VT_EXP, _exp, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  uint64_t plchandle() const {
    return GetField<uint64_t>(VT_PLCHANDLE, 0);
  }
  bool mutate_plchandle(uint64_t _plchandle) {
    return SetField<uint64_t>(VT_PLCHANDLE, _plchandle, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *scope() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_SCOPE);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_scope() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_SCOPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLAIMS) &&
           verifier.VerifyVector(claims()) &&
           verifier.VerifyVectorOfTables(claims()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<uint64_t>(verifier, VT_IAT) &&
           VerifyField<uint64_t>(verifier, VT_EXP) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_PLCHANDLE) &&
           VerifyOffset(verifier, VT_SCOPE) &&
           verifier.VerifyVector(scope()) &&
           verifier.VerifyVectorOfStrings(scope()) &&
           verifier.EndTable();
  }
  TokenT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TokenT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Token> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TokenT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TokenBuilder {
  typedef Token Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_claims(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>>> claims) {
    fbb_.AddOffset(Token::VT_CLAIMS, claims);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Token::VT_ID, id);
  }
  void add_iat(uint64_t iat) {
    fbb_.AddElement<uint64_t>(Token::VT_IAT, iat, 0);
  }
  void add_exp(uint64_t exp) {
    fbb_.AddElement<uint64_t>(Token::VT_EXP, exp, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Token::VT_NAME, name);
  }
  void add_plchandle(uint64_t plchandle) {
    fbb_.AddElement<uint64_t>(Token::VT_PLCHANDLE, plchandle, 0);
  }
  void add_scope(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scope) {
    fbb_.AddOffset(Token::VT_SCOPE, scope);
  }
  explicit TokenBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Token> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Token>(end);
    return o;
  }
};

inline flatbuffers::Offset<Token> CreateToken(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Claim>>> claims = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    uint64_t iat = 0,
    uint64_t exp = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t plchandle = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scope = 0) {
  TokenBuilder builder_(_fbb);
  builder_.add_plchandle(plchandle);
  builder_.add_exp(exp);
  builder_.add_iat(iat);
  builder_.add_scope(scope);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_claims(claims);
  return builder_.Finish();
}

inline flatbuffers::Offset<Token> CreateTokenDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<comm::datalayer::Claim>> *claims = nullptr,
    const char *id = nullptr,
    uint64_t iat = 0,
    uint64_t exp = 0,
    const char *name = nullptr,
    uint64_t plchandle = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *scope = nullptr) {
  auto claims__ = claims ? _fbb.CreateVectorOfSortedTables<comm::datalayer::Claim>(claims) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto scope__ = scope ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*scope) : 0;
  return comm::datalayer::CreateToken(
      _fbb,
      claims__,
      id__,
      iat,
      exp,
      name__,
      plchandle,
      scope__);
}

flatbuffers::Offset<Token> CreateToken(flatbuffers::FlatBufferBuilder &_fbb, const TokenT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ClaimT *Claim::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ClaimT>(new ClaimT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Claim::UnPackTo(ClaimT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = claim(); if (_e) _o->claim = _e->str(); }
  { auto _e = value(); if (_e) _o->value = _e->str(); }
}

inline flatbuffers::Offset<Claim> Claim::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClaimT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateClaim(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Claim> CreateClaim(flatbuffers::FlatBufferBuilder &_fbb, const ClaimT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ClaimT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _claim = _fbb.CreateString(_o->claim);
  auto _value = _fbb.CreateString(_o->value);
  return comm::datalayer::CreateClaim(
      _fbb,
      _claim,
      _value);
}

inline TokenT *Token::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TokenT>(new TokenT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Token::UnPackTo(TokenT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = claims(); if (_e) { _o->claims.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->claims[_i] = std::unique_ptr<comm::datalayer::ClaimT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = id(); if (_e) _o->id = _e->str(); }
  { auto _e = iat(); _o->iat = _e; }
  { auto _e = exp(); _o->exp = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = plchandle(); _o->plchandle = _e; }
  { auto _e = scope(); if (_e) { _o->scope.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->scope[_i] = _e->Get(_i)->str(); } } }
}

inline flatbuffers::Offset<Token> Token::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TokenT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateToken(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Token> CreateToken(flatbuffers::FlatBufferBuilder &_fbb, const TokenT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TokenT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _claims = _o->claims.size() ? _fbb.CreateVector<flatbuffers::Offset<comm::datalayer::Claim>> (_o->claims.size(), [](size_t i, _VectorArgs *__va) { return CreateClaim(*__va->__fbb, __va->__o->claims[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _iat = _o->iat;
  auto _exp = _o->exp;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _plchandle = _o->plchandle;
  auto _scope = _o->scope.size() ? _fbb.CreateVectorOfStrings(_o->scope) : 0;
  return comm::datalayer::CreateToken(
      _fbb,
      _claims,
      _id,
      _iat,
      _exp,
      _name,
      _plchandle,
      _scope);
}

inline const comm::datalayer::Token *GetToken(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Token>(buf);
}

inline const comm::datalayer::Token *GetSizePrefixedToken(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Token>(buf);
}

inline Token *GetMutableToken(void *buf) {
  return flatbuffers::GetMutableRoot<Token>(buf);
}

inline bool VerifyTokenBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Token>(nullptr);
}

inline bool VerifySizePrefixedTokenBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Token>(nullptr);
}

inline void FinishTokenBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Token> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTokenBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Token> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::TokenT> UnPackToken(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TokenT>(GetToken(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::TokenT> UnPackSizePrefixedToken(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TokenT>(GetSizePrefixedToken(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_TOKEN_COMM_DATALAYER_H_
