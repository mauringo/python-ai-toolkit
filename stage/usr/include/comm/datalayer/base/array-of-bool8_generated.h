// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ARRAYOFBOOL8_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_ARRAYOFBOOL8_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct ArrayOfBool8;
struct ArrayOfBool8Builder;
struct ArrayOfBool8T;

struct ArrayOfBool8T : public flatbuffers::NativeTable {
  typedef ArrayOfBool8 TableType;
  std::vector<bool> value{};
};

struct ArrayOfBool8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ArrayOfBool8T NativeTableType;
  typedef ArrayOfBool8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  flatbuffers::Vector<uint8_t> *mutable_value() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
  ArrayOfBool8T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ArrayOfBool8T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ArrayOfBool8> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArrayOfBool8T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ArrayOfBool8Builder {
  typedef ArrayOfBool8 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(ArrayOfBool8::VT_VALUE, value);
  }
  explicit ArrayOfBool8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ArrayOfBool8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayOfBool8>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayOfBool8> CreateArrayOfBool8(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  ArrayOfBool8Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArrayOfBool8> CreateArrayOfBool8Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return comm::datalayer::CreateArrayOfBool8(
      _fbb,
      value__);
}

flatbuffers::Offset<ArrayOfBool8> CreateArrayOfBool8(flatbuffers::FlatBufferBuilder &_fbb, const ArrayOfBool8T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ArrayOfBool8T *ArrayOfBool8::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ArrayOfBool8T>(new ArrayOfBool8T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ArrayOfBool8::UnPackTo(ArrayOfBool8T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); if (_e) { _o->value.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->value[_i] = _e->Get(_i) != 0; } } }
}

inline flatbuffers::Offset<ArrayOfBool8> ArrayOfBool8::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArrayOfBool8T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateArrayOfBool8(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ArrayOfBool8> CreateArrayOfBool8(flatbuffers::FlatBufferBuilder &_fbb, const ArrayOfBool8T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ArrayOfBool8T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value.size() ? _fbb.CreateVector(_o->value) : 0;
  return comm::datalayer::CreateArrayOfBool8(
      _fbb,
      _value);
}

inline const comm::datalayer::ArrayOfBool8 *GetArrayOfBool8(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::ArrayOfBool8>(buf);
}

inline const comm::datalayer::ArrayOfBool8 *GetSizePrefixedArrayOfBool8(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::ArrayOfBool8>(buf);
}

inline ArrayOfBool8 *GetMutableArrayOfBool8(void *buf) {
  return flatbuffers::GetMutableRoot<ArrayOfBool8>(buf);
}

inline bool VerifyArrayOfBool8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ArrayOfBool8>(nullptr);
}

inline bool VerifySizePrefixedArrayOfBool8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ArrayOfBool8>(nullptr);
}

inline void FinishArrayOfBool8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::ArrayOfBool8> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedArrayOfBool8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::ArrayOfBool8> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ArrayOfBool8T> UnPackArrayOfBool8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ArrayOfBool8T>(GetArrayOfBool8(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ArrayOfBool8T> UnPackSizePrefixedArrayOfBool8(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ArrayOfBool8T>(GetSizePrefixedArrayOfBool8(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_ARRAYOFBOOL8_COMM_DATALAYER_H_
