// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TIMESTAMP_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_TIMESTAMP_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Timestamp;
struct TimestampBuilder;
struct TimestampT;

struct TimestampT : public flatbuffers::NativeTable {
  typedef Timestamp TableType;
  uint64_t value = 0;
};

struct Timestamp FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TimestampT NativeTableType;
  typedef TimestampBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint64_t value() const {
    return GetField<uint64_t>(VT_VALUE, 0);
  }
  bool mutate_value(uint64_t _value) {
    return SetField<uint64_t>(VT_VALUE, _value, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  TimestampT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TimestampT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Timestamp> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TimestampT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TimestampBuilder {
  typedef Timestamp Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) {
    fbb_.AddElement<uint64_t>(Timestamp::VT_VALUE, value, 0);
  }
  explicit TimestampBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Timestamp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Timestamp>(end);
    return o;
  }
};

inline flatbuffers::Offset<Timestamp> CreateTimestamp(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t value = 0) {
  TimestampBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Timestamp> CreateTimestamp(flatbuffers::FlatBufferBuilder &_fbb, const TimestampT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TimestampT *Timestamp::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TimestampT>(new TimestampT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Timestamp::UnPackTo(TimestampT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Timestamp> Timestamp::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TimestampT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTimestamp(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Timestamp> CreateTimestamp(flatbuffers::FlatBufferBuilder &_fbb, const TimestampT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TimestampT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return comm::datalayer::CreateTimestamp(
      _fbb,
      _value);
}

inline const comm::datalayer::Timestamp *GetTimestamp(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Timestamp>(buf);
}

inline const comm::datalayer::Timestamp *GetSizePrefixedTimestamp(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Timestamp>(buf);
}

inline Timestamp *GetMutableTimestamp(void *buf) {
  return flatbuffers::GetMutableRoot<Timestamp>(buf);
}

inline bool VerifyTimestampBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Timestamp>(nullptr);
}

inline bool VerifySizePrefixedTimestampBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Timestamp>(nullptr);
}

inline void FinishTimestampBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Timestamp> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTimestampBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Timestamp> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::TimestampT> UnPackTimestamp(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TimestampT>(GetTimestamp(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::TimestampT> UnPackSizePrefixedTimestamp(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::TimestampT>(GetSizePrefixedTimestamp(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_TIMESTAMP_COMM_DATALAYER_H_
