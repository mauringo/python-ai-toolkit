// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLOAT64_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_FLOAT64_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace comm {
namespace datalayer {

struct Float64;
struct Float64Builder;
struct Float64T;

struct Float64T : public flatbuffers::NativeTable {
  typedef Float64 TableType;
  double value = 0.0;
};

struct Float64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Float64T NativeTableType;
  typedef Float64Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool mutate_value(double _value) {
    return SetField<double>(VT_VALUE, _value, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
  Float64T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Float64T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Float64> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Float64T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Float64Builder {
  typedef Float64 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(Float64::VT_VALUE, value, 0.0);
  }
  explicit Float64Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Float64> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Float64>(end);
    return o;
  }
};

inline flatbuffers::Offset<Float64> CreateFloat64(
    flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  Float64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

flatbuffers::Offset<Float64> CreateFloat64(flatbuffers::FlatBufferBuilder &_fbb, const Float64T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Float64T *Float64::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Float64T>(new Float64T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Float64::UnPackTo(Float64T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<Float64> Float64::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Float64T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFloat64(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Float64> CreateFloat64(flatbuffers::FlatBufferBuilder &_fbb, const Float64T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Float64T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value;
  return comm::datalayer::CreateFloat64(
      _fbb,
      _value);
}

inline const comm::datalayer::Float64 *GetFloat64(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Float64>(buf);
}

inline const comm::datalayer::Float64 *GetSizePrefixedFloat64(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Float64>(buf);
}

inline Float64 *GetMutableFloat64(void *buf) {
  return flatbuffers::GetMutableRoot<Float64>(buf);
}

inline bool VerifyFloat64Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Float64>(nullptr);
}

inline bool VerifySizePrefixedFloat64Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Float64>(nullptr);
}

inline void FinishFloat64Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Float64> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFloat64Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Float64> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::Float64T> UnPackFloat64(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Float64T>(GetFloat64(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::Float64T> UnPackSizePrefixedFloat64(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::Float64T>(GetSizePrefixedFloat64(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_FLOAT64_COMM_DATALAYER_H_
