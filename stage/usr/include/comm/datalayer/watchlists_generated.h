// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCHLISTS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_WATCHLISTS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

#include "watchlist_generated.h"

namespace comm {
namespace datalayer {

struct Watchlists;
struct WatchlistsBuilder;
struct WatchlistsT;

struct WatchlistsT : public flatbuffers::NativeTable {
  typedef Watchlists TableType;
  std::vector<std::unique_ptr<comm::datalayer::WatchlistT>> watchlists{};
};

struct Watchlists FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WatchlistsT NativeTableType;
  typedef WatchlistsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WATCHLISTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>> *watchlists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>> *>(VT_WATCHLISTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>> *mutable_watchlists() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>> *>(VT_WATCHLISTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WATCHLISTS) &&
           verifier.VerifyVector(watchlists()) &&
           verifier.VerifyVectorOfTables(watchlists()) &&
           verifier.EndTable();
  }
  WatchlistsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WatchlistsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Watchlists> Pack(flatbuffers::FlatBufferBuilder &_fbb, const WatchlistsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WatchlistsBuilder {
  typedef Watchlists Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_watchlists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>>> watchlists) {
    fbb_.AddOffset(Watchlists::VT_WATCHLISTS, watchlists);
  }
  explicit WatchlistsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Watchlists> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Watchlists>(end);
    return o;
  }
};

inline flatbuffers::Offset<Watchlists> CreateWatchlists(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<comm::datalayer::Watchlist>>> watchlists = 0) {
  WatchlistsBuilder builder_(_fbb);
  builder_.add_watchlists(watchlists);
  return builder_.Finish();
}

inline flatbuffers::Offset<Watchlists> CreateWatchlistsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<comm::datalayer::Watchlist>> *watchlists = nullptr) {
  auto watchlists__ = watchlists ? _fbb.CreateVector<flatbuffers::Offset<comm::datalayer::Watchlist>>(*watchlists) : 0;
  return comm::datalayer::CreateWatchlists(
      _fbb,
      watchlists__);
}

flatbuffers::Offset<Watchlists> CreateWatchlists(flatbuffers::FlatBufferBuilder &_fbb, const WatchlistsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline WatchlistsT *Watchlists::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<WatchlistsT>(new WatchlistsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Watchlists::UnPackTo(WatchlistsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = watchlists(); if (_e) { _o->watchlists.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->watchlists[_i] = std::unique_ptr<comm::datalayer::WatchlistT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<Watchlists> Watchlists::Pack(flatbuffers::FlatBufferBuilder &_fbb, const WatchlistsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWatchlists(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Watchlists> CreateWatchlists(flatbuffers::FlatBufferBuilder &_fbb, const WatchlistsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const WatchlistsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _watchlists = _o->watchlists.size() ? _fbb.CreateVector<flatbuffers::Offset<comm::datalayer::Watchlist>> (_o->watchlists.size(), [](size_t i, _VectorArgs *__va) { return CreateWatchlist(*__va->__fbb, __va->__o->watchlists[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateWatchlists(
      _fbb,
      _watchlists);
}

inline const comm::datalayer::Watchlists *GetWatchlists(const void *buf) {
  return flatbuffers::GetRoot<comm::datalayer::Watchlists>(buf);
}

inline const comm::datalayer::Watchlists *GetSizePrefixedWatchlists(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<comm::datalayer::Watchlists>(buf);
}

inline Watchlists *GetMutableWatchlists(void *buf) {
  return flatbuffers::GetMutableRoot<Watchlists>(buf);
}

inline bool VerifyWatchlistsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Watchlists>(nullptr);
}

inline bool VerifySizePrefixedWatchlistsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Watchlists>(nullptr);
}

inline void FinishWatchlistsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Watchlists> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWatchlistsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<comm::datalayer::Watchlists> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::WatchlistsT> UnPackWatchlists(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::WatchlistsT>(GetWatchlists(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::WatchlistsT> UnPackSizePrefixedWatchlists(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::WatchlistsT>(GetSizePrefixedWatchlists(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_WATCHLISTS_COMM_DATALAYER_H_
